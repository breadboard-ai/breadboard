{"edges":[{"from":"fetch-4","to":"output-3","out":"response","in":"api_json_response"},{"from":"createFetchParameters","to":"fetch-4","out":"*","in":""},{"from":"input-1","to":"APIInput","out":"*","in":""},{"from":"input-1","to":"APIInput","out":"graph","in":"graph"},{"from":"input-1","to":"createFetchParameters","out":"item","in":"item"},{"from":"toAPIInputs","to":"createFetchParameters","out":"api_inputs","in":"api_inputs"},{"from":"APIInput","to":"toAPIInputs","out":"*","in":""}],"nodes":[{"id":"output-3","type":"output","configuration":{"schema":{"type":"object","properties":{"api_json_response":{"title":"response","description":"The response from the fetch request","type":["string","object"]}},"required":["api_json_response"]}}},{"id":"fetch-4","type":"fetch","configuration":{}},{"id":"createFetchParameters","type":"invoke","configuration":{"path":"#createFetchParameters"}},{"id":"input-1","type":"input","configuration":{"schema":{"type":"object","properties":{"graph":{"title":"graph","description":"The graph descriptor of the board to invoke.","type":"object"},"item":{"type":"string","title":"item"}},"required":["graph","item"]}}},{"id":"toAPIInputs","type":"invoke","configuration":{"path":"#toAPIInputs"}},{"id":"APIInput","type":"invoke","configuration":{}}],"kits":[],"graphs":{"createFetchParameters":{"edges":[{"from":"createFetchParameters-input","to":"createFetchParameters-run","out":"*"},{"from":"createFetchParameters-run","to":"createFetchParameters-output","out":"*"}],"nodes":[{"id":"createFetchParameters-input","type":"input","configuration":{}},{"id":"createFetchParameters-run","type":"runJavascript","configuration":{"code":"function createFetchParameters({ item, api_inputs }) {\n            const { method, parameters, secrets, requestBody, info } = item;\n            console.log(api_inputs);\n            let { url } = item;\n            const queryStringParameters = {};\n            if (typeof api_inputs == \"string\") {\n                api_inputs = JSON.parse(api_inputs);\n            }\n            if (parameters != undefined &&\n                parameters.length > 0 &&\n                api_inputs == undefined) {\n                throw new Error(`Missing input for parameters ${JSON.stringify(parameters)}`);\n            }\n            for (const param of parameters) {\n                if (api_inputs && param.name in api_inputs == false && param.required) {\n                    throw new Error(`Missing required parameter ${param.name}`);\n                }\n                if (api_inputs && param.name in api_inputs == false) {\n                    // Parameter is not required and not in input, so we can skip it.\n                    continue;\n                }\n                if (param.in == \"path\") {\n                    // Replace the path parameter with the value from the input.\n                    url = url.replace(`{${param.name}}`, api_inputs[param.name]);\n                }\n                if (param.in == \"query\") {\n                    queryStringParameters[param.name] = api_inputs[param.name];\n                }\n            }\n            // // If the method is POST or PUT, then we need to add the requestBody to the body.\n            // We are going to want to add in the secret somehow\n            const headers = {};\n            // Create the query string\n            const queryString = Object.entries(queryStringParameters)\n                .map(([key, value]) => {\n                return `${key}=${value}`;\n            })\n                .join(\"&\");\n            if (queryString.length > 0) {\n                url = `${url}?${queryString}`;\n            }\n            // Many APIs will require an authentication token but they don't define it in the Open API spec. If the user has provided a secret, we will use that.\n            if (secrets != undefined && secrets[1].scheme == \"bearer\") {\n                const envKey = `${item.info.title\n                    .replace(/[^a-zA-Z0-9]+/g, \"_\")\n                    .toUpperCase()}_KEY`;\n                const envValue = api_inputs[envKey];\n                headers[\"Authorization\"] = `Bearer ${envValue}`;\n            }\n            let body = undefined;\n            if (requestBody) {\n                // We know the method needs a request Body.\n                // Find the first input that matches the valid required schema of the API.\n                let requestContentType;\n                // We can only handle JSON\n                if (\"requestBody\" in api_inputs) {\n                    body =\n                        typeof api_inputs[\"requestBody\"] == \"string\"\n                            ? JSON.parse(api_inputs[\"requestBody\"])\n                            : api_inputs[\"requestBody\"];\n                    requestContentType = \"application/json\";\n                }\n                if (body == undefined) {\n                    throw new Error(`Missing required request body for ${JSON.stringify(requestBody)}`);\n                }\n                headers[\"Content-Type\"] = requestContentType;\n            }\n            return { url, method, headers, body, queryString };\n        }","name":"createFetchParameters","raw":true}},{"id":"createFetchParameters-output","type":"output","configuration":{}}]},"toAPIInputs":{"edges":[{"from":"toAPIInputs-input","to":"toAPIInputs-run","out":"*"},{"from":"toAPIInputs-run","to":"toAPIInputs-output","out":"*"}],"nodes":[{"id":"toAPIInputs-input","type":"input","configuration":{}},{"id":"toAPIInputs-run","type":"runJavascript","configuration":{"code":"function toAPIInputs(item) {\n            return { api_inputs: item };\n        }","name":"toAPIInputs","raw":true}},{"id":"toAPIInputs-output","type":"output","configuration":{}}]}},"args":{"item":{"operationId":"generativelanguage.models.get","url":"https://generativelanguage.googleapis.com/v1beta3/models/{modelsId}","method":"GET","description":"Gets information about a specific Model.","parameters":[{"in":"path","name":"modelsId","required":true,"schema":{"type":"string"}},{"description":"OAuth 2.0 token for the current user.","in":"query","name":"oauth_token","schema":{"type":"string"}},{"description":"API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.","in":"query","name":"key","schema":{"type":"string"}},{"description":"Selector specifying which fields to include in a partial response.","in":"query","name":"fields","schema":{"type":"string"}},{"description":"V1 error format.","in":"query","name":"$.xgafv","schema":{"type":"string","enum":["1","2"]}},{"description":"Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.","in":"query","name":"quotaUser","schema":{"type":"string"}},{"description":"OAuth access token.","in":"query","name":"access_token","schema":{"type":"string"}},{"description":"Upload protocol for media (e.g. \"raw\", \"multipart\").","in":"query","name":"upload_protocol","schema":{"type":"string"}},{"description":"Returns response with indentations and line breaks.","in":"query","name":"prettyPrint","schema":{"type":"boolean"}},{"description":"Legacy upload protocol for media (e.g. \"media\", \"multipart\").","in":"query","name":"uploadType","schema":{"type":"string"}},{"description":"Data format for response.","in":"query","name":"alt","schema":{"type":"string","enum":["json","media","proto"]}},{"description":"JSONP","in":"query","name":"callback","schema":{"type":"string"}}],"info":{"contact":{"name":"Paul Kinlan via StackQL Studios","url":"https://github.com/stackql/google-discovery-to-openapi","email":"info@stackql.io"},"title":"Generative Language API","description":"The Gemini API allows developers to build generative AI applications using Gemini models. Gemini is our most capable model in the world, built from the ground up to be multimodal. It can generalize and seamlessly understand, operate across, and combine different types of information. including language, images, audio, video, and code. You can use the Gemini API for use cases like reasoning across text and images, content generation, dialogue agents, summarization and classification systems, and more.","version":"v1beta3","x-discovery-doc-revision":"20240102","x-generated-date":"2024-01-05"}},"graph":{"title":"API Inputs for generativelanguage.models.get","url":"#","nodes":[{"id":"input","type":"input","configuration":{"schema":{"type":"object","properties":{"modelsId":{"type":"string","title":"modelsId"},"oauth_token":{"type":"string","title":"oauth_token","description":"OAuth 2.0 token for the current user.","default":null},"key":{"type":"string","title":"key","description":"API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.","default":null},"fields":{"type":"string","title":"fields","description":"Selector specifying which fields to include in a partial response.","default":null},"$.xgafv":{"type":"string","enum":["1","2"],"title":"$.xgafv","description":"V1 error format.","default":null},"quotaUser":{"type":"string","title":"quotaUser","description":"Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.","default":null},"access_token":{"type":"string","title":"access_token","description":"OAuth access token.","default":null},"upload_protocol":{"type":"string","title":"upload_protocol","description":"Upload protocol for media (e.g. \"raw\", \"multipart\").","default":null},"prettyPrint":{"type":"boolean","title":"prettyPrint","description":"Returns response with indentations and line breaks.","default":null},"uploadType":{"type":"string","title":"uploadType","description":"Legacy upload protocol for media (e.g. \"media\", \"multipart\").","default":null},"alt":{"type":"string","enum":["json","media","proto"],"title":"alt","description":"Data format for response.","default":null},"callback":{"type":"string","title":"callback","description":"JSONP","default":null}}}}},{"id":"output","type":"output"}],"edges":[{"from":"input","out":"modelsId","to":"output","in":"modelsId","optional":false},{"from":"input","out":"oauth_token","to":"output","in":"oauth_token","optional":true},{"from":"input","out":"key","to":"output","in":"key","optional":true},{"from":"input","out":"fields","to":"output","in":"fields","optional":true},{"from":"input","out":"$.xgafv","to":"output","in":"$.xgafv","optional":true},{"from":"input","out":"quotaUser","to":"output","in":"quotaUser","optional":true},{"from":"input","out":"access_token","to":"output","in":"access_token","optional":true},{"from":"input","out":"upload_protocol","to":"output","in":"upload_protocol","optional":true},{"from":"input","out":"prettyPrint","to":"output","in":"prettyPrint","optional":true},{"from":"input","out":"uploadType","to":"output","in":"uploadType","optional":true},{"from":"input","out":"alt","to":"output","in":"alt","optional":true},{"from":"input","out":"callback","to":"output","in":"callback","optional":true}]}}}