{
  "title": "Convert String to JSON",
  "description": "Converts a string to JSON.",
  "$schema": "https://raw.githubusercontent.com/breadboard-ai/breadboard/@google-labs/breadboard-schema@1.1.0/packages/schema/breadboard.schema.json",
  "version": "0.0.3",
  "edges": [
    {
      "from": "generateText",
      "to": "output",
      "out": "text",
      "in": "text"
    },
    {
      "from": "input",
      "to": "generateEmbedding",
      "out": "embeddingBoardPath",
      "in": "path"
    },
    {
      "from": "input",
      "to": "generateEmbedding",
      "out": "query",
      "in": "query"
    },
    {
      "from": "input",
      "to": "retrieveCandidateContext",
      "out": "ragBoardPath",
      "in": "path"
    },
    {
      "from": "input",
      "to": "promptTemplate-3",
      "out": "query",
      "in": "query"
    },
    {
      "from": "input",
      "to": "generateText",
      "out": "generateTextBoardPath",
      "in": "path"
    },
    {
      "from": "promptTemplate-3",
      "to": "generateText",
      "out": "text",
      "in": "text"
    },
    {
      "from": "generateEmbedding",
      "to": "retrieveCandidateContext",
      "out": "embedding",
      "in": "embedding"
    },
    {
      "from": "retrieveCandidateContext",
      "to": "getBestCandidate",
      "out": "candidates",
      "in": "candidates"
    },
    {
      "from": "getBestCandidate",
      "to": "promptTemplate-3",
      "out": "candidate",
      "in": "candidate"
    }
  ],
  "nodes": [
    {
      "id": "output",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "title": "Response",
              "description": "Response"
            }
          }
        }
      }
    },
    {
      "id": "generateText",
      "type": "invoke",
      "configuration": {}
    },
    {
      "id": "input",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "title": "Query",
              "description": "Query"
            },
            "ragBoardPath": {
              "type": "string",
              "title": "string",
              "description": "Location of the board that will retrieve the additional context (RAG)"
            },
            "embeddingBoardPath": {
              "type": "string",
              "title": "string",
              "description": "Location of the board that will generate the embedding that wil be used by the RAG board to retrieve the most appropriate context"
            },
            "generateTextBoardPath": {
              "type": "string",
              "title": "string",
              "description": "Location of the board that will generate the response to the prompt that is generated from the query and the retrieved context"
            }
          },
          "required": [
            "query",
            "ragBoardPath",
            "embeddingBoardPath",
            "generateTextBoardPath"
          ]
        }
      }
    },
    {
      "id": "promptTemplate-3",
      "type": "promptTemplate",
      "configuration": {
        "template": "Answer the question as truthfully as possible using the provided context, and if don't have the answer, say \"I don't know\" and suggest looking for this information elsewhere.\n\nContext: {{candidate}}\n\nQuestion: {{query}}\n\nAnswer:"
      }
    },
    {
      "id": "generateEmbedding",
      "type": "invoke",
      "configuration": {}
    },
    {
      "id": "retrieveCandidateContext",
      "type": "invoke",
      "configuration": {}
    },
    {
      "id": "getBestCandidate",
      "type": "invoke",
      "configuration": {
        "path": "#getBestCandidate"
      }
    }
  ],
  "kits": [],
  "graphs": {
    "getBestCandidate": {
      "edges": [
        {
          "from": "getBestCandidate-input",
          "to": "getBestCandidate-run",
          "out": "*"
        },
        {
          "from": "getBestCandidate-run",
          "to": "getBestCandidate-output",
          "out": "*"
        }
      ],
      "nodes": [
        {
          "id": "getBestCandidate-input",
          "type": "input",
          "configuration": {}
        },
        {
          "id": "getBestCandidate-run",
          "type": "runJavascript",
          "configuration": {
            "code": "function getBestCandidate({ candidates }) {\n    // This is a very naieve implementation, but it will do for now.\n    return { candidate: candidates[0] };\n  }",
            "name": "getBestCandidate",
            "raw": true
          }
        },
        {
          "id": "getBestCandidate-output",
          "type": "output",
          "configuration": {}
        }
      ]
    }
  }
}