{
  "url": "file:///Users/paulkinlan/Code/labs-prototypes/recipes/tools/openapi/index.js",
  "title": "Create a board from an Open API spec",
  "description": "Converts an Open API spec to a board.",
  "version": "0.0.3",
  "edges": [
    {
      "from": "convertBoardListToObject",
      "to": "output-2",
      "out": "*",
      "in": ""
    },
    {
      "from": "createFetchBoards",
      "to": "convertBoardListToObject",
      "out": "*",
      "in": ""
    },
    {
      "from": "generateAPISpecs",
      "to": "createFetchBoards",
      "out": "*",
      "in": ""
    },
    {
      "from": "isOpenAPI",
      "to": "generateAPISpecs",
      "out": "*",
      "in": ""
    },
    {
      "from": "fetch-3",
      "to": "isOpenAPI",
      "out": "response",
      "in": "json"
    },
    {
      "from": "input",
      "to": "fetch-3",
      "out": "url",
      "in": "url"
    }
  ],
  "nodes": [
    {
      "id": "output-2",
      "type": "output",
      "configuration": {}
    },
    {
      "id": "convertBoardListToObject",
      "type": "invoke",
      "configuration": {
        "path": "#convertBoardListToObject"
      }
    },
    {
      "id": "createFetchBoards",
      "type": "map",
      "configuration": {
        "board": {
          "kind": "board",
          "board": {
            "kits": [],
            "edges": [
              {
                "from": "input-1",
                "to": "output-3",
                "out": "item",
                "in": "item"
              },
              {
                "from": "input-1",
                "to": "lambda-5",
                "out": "item",
                "in": "item"
              },
              {
                "from": "lambda-5",
                "to": "output-3",
                "out": "board",
                "in": "board"
              }
            ],
            "nodes": [
              {
                "id": "output-3",
                "type": "output",
                "configuration": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "item": {
                        "type": "string",
                        "title": "item"
                      },
                      "board": {
                        "type": "string",
                        "title": "board"
                      }
                    },
                    "required": [
                      "item",
                      "board"
                    ]
                  }
                }
              },
              {
                "id": "input-1",
                "type": "input",
                "configuration": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "item": {
                        "type": "string",
                        "title": "item"
                      }
                    },
                    "required": [
                      "item"
                    ]
                  }
                }
              },
              {
                "id": "lambda-5",
                "type": "lambda",
                "configuration": {
                  "board": {
                    "kind": "board",
                    "board": {
                      "kits": [],
                      "edges": [
                        {
                          "from": "fetch-4",
                          "to": "output-5",
                          "out": "response",
                          "in": "api_json_response"
                        },
                        {
                          "from": "fn-3",
                          "to": "fetch-4",
                          "out": "*",
                          "in": ""
                        },
                        {
                          "from": "input-1",
                          "to": "fn-3",
                          "out": "*",
                          "in": ""
                        }
                      ],
                      "nodes": [
                        {
                          "id": "output-5",
                          "type": "output",
                          "configuration": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "api_json_response": {
                                  "title": "response",
                                  "description": "The response from the fetch request",
                                  "type": [
                                    "string",
                                    "object"
                                  ]
                                }
                              },
                              "required": [
                                "api_json_response"
                              ]
                            }
                          }
                        },
                        {
                          "id": "fetch-4",
                          "type": "fetch",
                          "configuration": {}
                        },
                        {
                          "id": "fn-3",
                          "type": "invoke",
                          "configuration": {
                            "path": "#fn-3"
                          }
                        },
                        {
                          "id": "input-1",
                          "type": "input",
                          "configuration": {}
                        }
                      ],
                      "graphs": {
                        "fn-3": {
                          "edges": [
                            {
                              "from": "fn-3-input",
                              "to": "fn-3-run",
                              "out": "*"
                            },
                            {
                              "from": "fn-3-run",
                              "to": "fn-3-output",
                              "out": "*"
                            }
                          ],
                          "nodes": [
                            {
                              "id": "fn-3-input",
                              "type": "input",
                              "configuration": {}
                            },
                            {
                              "id": "fn-3-run",
                              "type": "runJavascript",
                              "configuration": {
                                "code": "function fn_3(itemToSplat) {\n          const { input, api_inputs } = itemToSplat;\n          const { method, parameters, secrets, requestBody } = itemToSplat.item;\n          let { url } = itemToSplat.item;\n\n          const queryStringParameters = {};\n\n          if (\n            parameters != undefined &&\n            parameters.length > 0 &&\n            input == undefined\n          ) {\n            throw new Error(\n              `Missing input for parameters ${JSON.stringify(parameters)}`\n            );\n          }\n\n          for (const param of parameters) {\n            if (input && param.name in input == false && param.required) {\n              throw new Error(`Missing required parameter ${param.name}`);\n            }\n\n            if (input && param.name in input == false) {\n              // Parameter is not required and not in input, so we can skip it.\n              continue;\n            }\n\n            if (param.in == \"path\") {\n              // Replace the path parameter with the value from the input.\n              url = url.replace(`{${param.name}}`, input[param.name]);\n            }\n\n            if (param.in == \"query\") {\n              queryStringParameters[param.name] = input[param.name];\n            }\n          }\n\n          // // If the method is POST or PUT, then we need to add the requestBody to the body.\n\n          // We are going to want to add in the secret somehow\n          const headers = {};\n\n          // Create the query string\n          const queryString = Object.entries(queryStringParameters)\n            .map((key, value) => {\n              return `${key}=${value}`;\n            })\n            .join(\"&\");\n\n          if (queryString.length > 0) {\n            url = `${url}?${queryString}`;\n          }\n\n          if (secrets != undefined) {\n            // We know that we currently only support Bearer tokens.\n            const envKey = api_inputs.bearer;\n            const envValue = itemToSplat[envKey];\n            headers[\"Authorization\"] = `Bearer ${envValue}`;\n          }\n\n          let body = undefined;\n\n          if (requestBody) {\n            // We know the method needs a request Body.\n            // Find the first input that matches the valid required schema of the API.\n            let requestContentType;\n\n            for (const requiredContentType of Object.keys(requestBody)) {\n              if (requiredContentType in api_inputs) {\n                body = api_inputs[requiredContentType];\n                requestContentType = requiredContentType;\n                break;\n              }\n            }\n\n            if (body == undefined) {\n              throw new Error(\n                `Missing required request body for ${JSON.stringify(\n                  requestBody\n                )}`\n              );\n            }\n\n            headers[\"Content-Type\"] = requestContentType;\n          }\n          return { url, method, headers, body, queryString };\n        }",
                                "name": "fn_3",
                                "raw": true
                              }
                            },
                            {
                              "id": "fn-3-output",
                              "type": "output",
                              "configuration": {}
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            ],
            "graphs": {}
          }
        }
      }
    },
    {
      "id": "generateAPISpecs",
      "type": "invoke",
      "configuration": {
        "path": "#generateAPISpecs"
      }
    },
    {
      "id": "isOpenAPI",
      "type": "invoke",
      "configuration": {
        "path": "#isOpenAPI"
      }
    },
    {
      "id": "fetch-3",
      "type": "fetch",
      "configuration": {}
    },
    {
      "id": "input",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "title": "Open API URL",
              "description": "The URL of the Open API spec that you want to convert to a board."
            }
          }
        }
      }
    }
  ],
  "kits": [],
  "graphs": {
    "convertBoardListToObject": {
      "edges": [
        {
          "from": "convertBoardListToObject-input",
          "to": "convertBoardListToObject-run",
          "out": "*"
        },
        {
          "from": "convertBoardListToObject-run",
          "to": "convertBoardListToObject-output",
          "out": "*"
        }
      ],
      "nodes": [
        {
          "id": "convertBoardListToObject-input",
          "type": "input",
          "configuration": {}
        },
        {
          "id": "convertBoardListToObject-run",
          "type": "runJavascript",
          "configuration": {
            "code": "function convertBoardListToObject({ list }) {\n  const operations = list\n    .map((item) => {\n      return {\n        [item.item.operationId]: item.board,\n      };\n    })\n    .reduce((acc, curr) => {\n      return { ...acc, ...curr };\n    }, {});\n  return { ...operations };\n}",
            "name": "convertBoardListToObject",
            "raw": true
          }
        },
        {
          "id": "convertBoardListToObject-output",
          "type": "output",
          "configuration": {}
        }
      ]
    },
    "generateAPISpecs": {
      "edges": [
        {
          "from": "generateAPISpecs-input",
          "to": "generateAPISpecs-run",
          "out": "*"
        },
        {
          "from": "generateAPISpecs-run",
          "to": "generateAPISpecs-output",
          "out": "*"
        }
      ],
      "nodes": [
        {
          "id": "generateAPISpecs-input",
          "type": "input",
          "configuration": {}
        },
        {
          "id": "generateAPISpecs-run",
          "type": "runJavascript",
          "configuration": {
            "code": "function generateAPISpecs({ json }) {\n  const { paths } = json;\n  const baseUrl = json.servers[0].url;\n\n  /*\n    If there is no operation ID, we need to generate one from the path, but format it like a JS function name.\n   */\n  const inferOperationId = (path, method) => {\n    let newName = path\n      .split(\"/\")\n      .map((part) =>\n        part.length == 0 ? part : part[0].toUpperCase() + part.slice(1)\n      )\n      .join(\"\")\n      .replace(/[.-]/g, \"\") // Remove dashes and dots\n      .replace(/[{}]/g, \"\"); // Remove curly braces (need to improve this)\n\n    return `${method}${newName}`;\n  };\n\n  const apis = Object.entries(paths)\n    .map(([key, value]) => {\n      return Object.keys(value)\n        .filter((method) => [\"post\", \"get\"].includes(method))\n        .map((method) => {\n          // Operation ID might not exist.\n          const operationId =\n            value[method].operationId ||\n            inferOperationId(key, method, value[method]);\n\n          const data = value[method];\n\n          // All parameters, path or query are held in the parameters array ( but might be a reference)\n          const parameters =\n            \"parameters\" in data == false\n              ? []\n              : data.parameters.map((param) => {\n                  // We can only manage reference objects for now.\n                  if (\"$ref\" in param) {\n                    if (param.$ref.startsWith(\"#\") == false) {\n                      return undefined;\n                    }\n\n                    const pathParts = param.$ref.replace(/^#\\//, \"\").split(\"/\");\n                    let obj = json;\n\n                    for (const part of pathParts) {\n                      obj = obj[part];\n                    }\n\n                    return obj;\n                  } else {\n                    return param;\n                  }\n                });\n\n          const requestBody =\n            \"requestBody\" in data == false\n              ? undefined\n              : Object.entries(data.requestBody.content)\n                  .map(([contentType, reqeustParams]) => {\n                    // We can only manage reference objects for now.\n                    if (\"$ref\" in reqeustParams.schema) {\n                      if (reqeustParams.schema.$ref.startsWith(\"#\") == false) {\n                        return undefined;\n                      }\n\n                      const pathParts = reqeustParams.schema.$ref\n                        .replace(/^#\\//, \"\")\n                        .split(\"/\");\n                      let obj = json;\n\n                      for (const part of pathParts) {\n                        obj = obj[part];\n                      }\n\n                      contentType.schema = obj;\n                    }\n                    return { [contentType]: reqeustParams };\n                  })\n                  .reduce((acc, curr) => {\n                    return { ...acc, ...curr };\n                  }, {});\n\n          // We will need to hook up `secrets` to this somehow.\n          let secrets = undefined;\n          // We can only support Bearer tokens for now.\n          if (\"components\" in json && \"securitySchemes\" in json.components) {\n            // Check to see if global security is defined, it's the same type and && it is a bearer token.\n            const bearerSecurity = Object.entries(\n              json.components.securitySchemes\n            ).find(([securityMethodKey, securityValue]) => {\n              const security = json.security.find((item) => {\n                return securityMethodKey in item;\n              });\n\n              return (\n                security &&\n                securityValue.type == \"http\" &&\n                securityValue.scheme == \"bearer\"\n              );\n            });\n\n            if (bearerSecurity != undefined) {\n              secrets = bearerSecurity;\n            }\n          }\n\n          const headers = {\n            operationId,\n            url: baseUrl.replace(/\\/$/, \"\") + key,\n            method: method.toUpperCase(),\n            description: data.description,\n            summary: data.summary,\n            parameters,\n            requestBody,\n            secrets,\n          };\n\n          return headers;\n        })\n        .flat();\n    })\n    .flat();\n\n  return { list: apis };\n}",
            "name": "generateAPISpecs",
            "raw": true
          }
        },
        {
          "id": "generateAPISpecs-output",
          "type": "output",
          "configuration": {}
        }
      ]
    },
    "isOpenAPI": {
      "edges": [
        {
          "from": "isOpenAPI-input",
          "to": "isOpenAPI-run",
          "out": "*"
        },
        {
          "from": "isOpenAPI-run",
          "to": "isOpenAPI-output",
          "out": "*"
        }
      ],
      "nodes": [
        {
          "id": "isOpenAPI-input",
          "type": "input",
          "configuration": {}
        },
        {
          "id": "isOpenAPI-run",
          "type": "runJavascript",
          "configuration": {
            "code": "function isOpenAPI({ json }) {\n  if (\"openapi\" in json == false) {\n    throw new Error(\"Not an Open API spec.\");\n  }\n\n  if (\"servers\" in json == false) {\n    throw new Error(\"No servers in Open API spec.\");\n  }\n\n  if (\"paths\" in json == false) {\n    throw new Error(\"No paths in Open API spec.\");\n  }\n\n  return { json };\n}",
            "name": "isOpenAPI",
            "raw": true
          }
        },
        {
          "id": "isOpenAPI-output",
          "type": "output",
          "configuration": {}
        }
      ]
    }
  }
}
