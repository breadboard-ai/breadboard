{
  "title": "Create a board from an Open API spec",
  "description": "Converts an Open API spec to a board.",
  "$schema": "https://raw.githubusercontent.com/breadboard-ai/breadboard/@google-labs/breadboard-schema@1.1.0/packages/schema/breadboard.schema.json",
  "version": "0.0.3",
  "edges": [
    {
      "from": "convertBoardListToObject",
      "to": "output-2",
      "out": "*",
      "in": ""
    },
    {
      "from": "createFetchBoards",
      "to": "convertBoardListToObject",
      "out": "*",
      "in": ""
    },
    {
      "from": "generateAPISpecs",
      "to": "createFetchBoards",
      "out": "*",
      "in": ""
    },
    {
      "from": "isOpenAPI",
      "to": "generateAPISpecs",
      "out": "*",
      "in": ""
    },
    {
      "from": "fetch_open_api_schema",
      "to": "isOpenAPI",
      "out": "response",
      "in": "json"
    },
    {
      "from": "input-1",
      "to": "fetch_open_api_schema",
      "out": "url",
      "in": "url"
    }
  ],
  "nodes": [
    {
      "id": "output-2",
      "type": "output",
      "configuration": {}
    },
    {
      "id": "convertBoardListToObject",
      "type": "invoke",
      "configuration": {
        "path": "#convertBoardListToObject"
      }
    },
    {
      "id": "createFetchBoards",
      "type": "map",
      "configuration": {
        "board": {
          "kind": "board",
          "board": {
            "kits": [],
            "edges": [
              {
                "from": "input-1",
                "to": "createBoardInputs",
                "out": "item",
                "in": "item"
              },
              {
                "from": "input-1",
                "to": "output-3",
                "out": "item",
                "in": "item"
              },
              {
                "from": "input-1",
                "to": "lambda-5",
                "out": "item",
                "in": "item"
              },
              {
                "from": "createBoardInputs",
                "to": "output-3",
                "out": "*",
                "in": ""
              },
              {
                "from": "createBoardInputs",
                "to": "lambda-5",
                "out": "*",
                "in": ""
              },
              {
                "from": "lambda-5",
                "to": "output-3",
                "out": "board",
                "in": "board"
              }
            ],
            "nodes": [
              {
                "id": "output-3",
                "type": "output",
                "configuration": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "item": {
                        "type": "string",
                        "title": "item"
                      },
                      "board": {
                        "type": "string",
                        "title": "board"
                      }
                    },
                    "required": [
                      "item",
                      "board"
                    ]
                  }
                }
              },
              {
                "id": "input-1",
                "type": "input",
                "configuration": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "item": {
                        "type": "string",
                        "title": "item"
                      }
                    },
                    "required": [
                      "item"
                    ]
                  }
                }
              },
              {
                "id": "createBoardInputs",
                "type": "invoke",
                "configuration": {
                  "path": "#createBoardInputs"
                }
              },
              {
                "id": "lambda-5",
                "type": "lambda",
                "configuration": {
                  "board": {
                    "kind": "board",
                    "board": {
                      "kits": [],
                      "edges": [
                        {
                          "from": "fetch-4",
                          "to": "output-3",
                          "out": "response",
                          "in": "api_json_response"
                        },
                        {
                          "from": "createFetchParameters",
                          "to": "fetch-4",
                          "out": "*",
                          "in": ""
                        },
                        {
                          "from": "input-1",
                          "to": "APIInput",
                          "out": "*",
                          "in": ""
                        },
                        {
                          "from": "input-1",
                          "to": "APIInput",
                          "out": "graph",
                          "in": "graph"
                        },
                        {
                          "from": "input-1",
                          "to": "createFetchParameters",
                          "out": "item",
                          "in": "item"
                        },
                        {
                          "from": "toAPIInputs",
                          "to": "createFetchParameters",
                          "out": "api_inputs",
                          "in": "api_inputs"
                        },
                        {
                          "from": "APIInput",
                          "to": "toAPIInputs",
                          "out": "*",
                          "in": ""
                        }
                      ],
                      "nodes": [
                        {
                          "id": "output-3",
                          "type": "output",
                          "configuration": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "api_json_response": {
                                  "title": "response",
                                  "description": "The response from the fetch request",
                                  "type": [
                                    "string",
                                    "object"
                                  ]
                                }
                              },
                              "required": [
                                "api_json_response"
                              ]
                            }
                          }
                        },
                        {
                          "id": "fetch-4",
                          "type": "fetch",
                          "configuration": {}
                        },
                        {
                          "id": "createFetchParameters",
                          "type": "invoke",
                          "configuration": {
                            "path": "#createFetchParameters"
                          }
                        },
                        {
                          "id": "input-1",
                          "type": "input",
                          "configuration": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "graph": {
                                  "title": "graph",
                                  "description": "The graph descriptor of the board to invoke.",
                                  "type": "object"
                                },
                                "item": {
                                  "type": "string",
                                  "title": "item"
                                }
                              },
                              "required": [
                                "graph",
                                "item"
                              ]
                            }
                          }
                        },
                        {
                          "id": "toAPIInputs",
                          "type": "invoke",
                          "configuration": {
                            "path": "#toAPIInputs"
                          }
                        },
                        {
                          "id": "APIInput",
                          "type": "invoke",
                          "configuration": {}
                        }
                      ],
                      "graphs": {
                        "createFetchParameters": {
                          "edges": [
                            {
                              "from": "createFetchParameters-input",
                              "to": "createFetchParameters-run",
                              "out": "*"
                            },
                            {
                              "from": "createFetchParameters-run",
                              "to": "createFetchParameters-output",
                              "out": "*"
                            }
                          ],
                          "nodes": [
                            {
                              "id": "createFetchParameters-input",
                              "type": "input",
                              "configuration": {}
                            },
                            {
                              "id": "createFetchParameters-run",
                              "type": "runJavascript",
                              "configuration": {
                                "code": "function createFetchParameters({ item, api_inputs }) {\n      const { method, parameters, secrets, requestBody } = item;\n\n      let { url } = item;\n\n      const queryStringParameters = {};\n\n      if (typeof api_inputs == \"string\") {\n        api_inputs = JSON.parse(api_inputs);\n      }\n\n      if (\n        parameters != undefined &&\n        parameters.length > 0 &&\n        api_inputs == undefined\n      ) {\n        throw new Error(\n          `Missing input for parameters ${JSON.stringify(parameters)}`\n        );\n      }\n\n      for (const param of parameters) {\n        if (api_inputs && param.name in api_inputs == false && param.required) {\n          throw new Error(`Missing required parameter ${param.name}`);\n        }\n\n        if (api_inputs && param.name in api_inputs == false) {\n          // Parameter is not required and not in input, so we can skip it.\n          continue;\n        }\n\n        if (param.in == \"path\") {\n          // Replace the path parameter with the value from the input.\n          url = url.replace(`{${param.name}}`, api_inputs[param.name]);\n        }\n\n        if (param.in == \"query\") {\n          queryStringParameters[param.name] = api_inputs[param.name];\n        }\n      }\n\n      // If the method is POST or PUT, then we need to add the requestBody to the body.\n\n      // We are going to want to add in the secret somehow\n      const headers = {};\n\n      // Create the query string\n      const queryString = Object.entries(queryStringParameters)\n        .map(([key, value]) => {\n          return `${key}=${value}`;\n        })\n        .join(\"&\");\n\n      if (queryString.length > 0) {\n        url = `${url}?${queryString}`;\n      }\n\n      // Many APIs will require an authentication token but they don't define it in the Open API spec.\n      if (secrets != undefined && secrets[1].scheme == \"bearer\") {\n        const envKey = `${item.info.title\n          .replace(/[^a-zA-Z0-9]+/g, \"_\")\n          .toUpperCase()}_KEY`;\n        const envValue = api_inputs[envKey];\n\n        headers[\"Authorization\"] = `Bearer ${envValue}`;\n      }\n\n      let body = undefined;\n\n      if (requestBody) {\n        // We know the method needs a request Body.\n        // Find the first input that matches the valid required schema of the API.\n        let requestContentType;\n\n        // We can only handle JSON\n        if (\"requestBody\" in api_inputs) {\n          body =\n            typeof api_inputs[\"requestBody\"] == \"string\"\n              ? JSON.parse(api_inputs[\"requestBody\"])\n              : api_inputs[\"requestBody\"];\n          requestContentType = \"application/json\";\n        }\n\n        if (body == undefined) {\n          throw new Error(\n            `Missing required request body for ${JSON.stringify(requestBody)}`\n          );\n        }\n\n        headers[\"Content-Type\"] = requestContentType;\n      }\n      return { url, method, headers, body, queryString };\n    }",
                                "name": "createFetchParameters",
                                "raw": true
                              }
                            },
                            {
                              "id": "createFetchParameters-output",
                              "type": "output",
                              "configuration": {}
                            }
                          ]
                        },
                        "toAPIInputs": {
                          "edges": [
                            {
                              "from": "toAPIInputs-input",
                              "to": "toAPIInputs-run",
                              "out": "*"
                            },
                            {
                              "from": "toAPIInputs-run",
                              "to": "toAPIInputs-output",
                              "out": "*"
                            }
                          ],
                          "nodes": [
                            {
                              "id": "toAPIInputs-input",
                              "type": "input",
                              "configuration": {}
                            },
                            {
                              "id": "toAPIInputs-run",
                              "type": "runJavascript",
                              "configuration": {
                                "code": "function toAPIInputs(item) {\n      return { api_inputs: item };\n    }",
                                "name": "toAPIInputs",
                                "raw": true
                              }
                            },
                            {
                              "id": "toAPIInputs-output",
                              "type": "output",
                              "configuration": {}
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            ],
            "graphs": {
              "createBoardInputs": {
                "edges": [
                  {
                    "from": "createBoardInputs-input",
                    "to": "createBoardInputs-run",
                    "out": "*"
                  },
                  {
                    "from": "createBoardInputs-run",
                    "to": "createBoardInputs-output",
                    "out": "*"
                  }
                ],
                "nodes": [
                  {
                    "id": "createBoardInputs-input",
                    "type": "input",
                    "configuration": {}
                  },
                  {
                    "id": "createBoardInputs-run",
                    "type": "runJavascript",
                    "configuration": {
                      "code": "function createBoardInputs({ item }) {\n    const { parameters } = item;\n    const nodes = [];\n\n    const inputNode = {\n      id: `input`,\n      type: `input`,\n      configuration: {\n        schema: {\n          type: \"object\",\n          properties: parameters.reduce((params, param) => {\n            const schema = { ...param.schema };\n            schema.title = param.name;\n            schema.description = param.description || param.schema.title;\n\n            if (param.required) {\n              if (\"default\" in param == false) {\n                schema.default = undefined;\n              } else {\n                schema.default = param.default;\n              }\n            } else {\n              schema.default = param.default || null;\n            }\n\n            if (param.in == \"query\" || param.in == \"path\") {\n              params[param.name] = schema;\n            }\n\n            return params;\n          }, {}),\n        },\n      },\n    };\n\n    nodes.push(inputNode);\n\n    nodes.push({ id: \"output\", type: \"output\" });\n\n    const edges = parameters.map((param) => {\n      return {\n        from: `input`,\n        out: param.name,\n        to: \"output\",\n        in: param.name,\n        optional: !param.required,\n      };\n    });\n\n    if (\n      \"requestBody\" in item &&\n      item.requestBody != undefined &&\n      \"application/json\" in item.requestBody\n    ) {\n      // Only support JSON Schema for now.  If you need XML, talk to Paul.\n      nodes.push({\n        id: \"input-requestBody\",\n        type: \"input\",\n        configuration: {\n          schema: {\n            type: \"object\",\n            properties: {\n              requestBody: {\n                type: \"object\",\n                title: \"requestBody\",\n                description:\n                  item.requestBody[\"application/json\"].description ||\n                  \"The request body for the API call (JSON)\",\n              },\n            },\n          },\n        },\n      });\n\n      edges.push({\n        from: \"input-requestBody\",\n        out: \"requestBody\",\n        to: \"output\",\n        in: \"requestBody\",\n      });\n    }\n\n    if (\"secrets\" in item && item.secrets != undefined) {\n      const apiKeyName = `${item.info.title\n        .replace(/[^a-zA-Z0-9]+/g, \"_\")\n        .toUpperCase()}_KEY`;\n\n      nodes.push({\n        id: \"input-secrets\",\n        type: \"secrets\",\n        configuration: {\n          keys: [apiKeyName],\n        },\n      });\n\n      edges.push({\n        from: \"input-secrets\",\n        out: apiKeyName,\n        to: \"output\",\n        in: apiKeyName,\n      });\n    }\n\n    if (nodes.length == 0) {\n      nodes.push({ id: \"input\", type: \"input\" });\n    }\n\n    if (edges.length == 0) {\n      edges.push({ from: `input`, out: \"*\", to: \"output\", in: \"\" });\n    }\n\n    const graph = {\n      title: `API Inputs for ${item.operationId}`,\n      url: \"#\",\n      nodes,\n      edges,\n    };\n\n    return { graph };\n  }",
                      "name": "createBoardInputs",
                      "raw": true
                    }
                  },
                  {
                    "id": "createBoardInputs-output",
                    "type": "output",
                    "configuration": {}
                  }
                ]
              }
            }
          }
        }
      }
    },
    {
      "id": "generateAPISpecs",
      "type": "invoke",
      "configuration": {
        "path": "#generateAPISpecs"
      }
    },
    {
      "id": "isOpenAPI",
      "type": "invoke",
      "configuration": {
        "path": "#isOpenAPI"
      }
    },
    {
      "id": "fetch_open_api_schema",
      "type": "fetch",
      "configuration": {}
    },
    {
      "id": "input-1",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "url": {
              "title": "Open API URL",
              "description": "The URL of the Open API spec that you want to convert to a board.",
              "type": "string"
            }
          },
          "required": [
            "url"
          ]
        }
      }
    }
  ],
  "kits": [],
  "graphs": {
    "convertBoardListToObject": {
      "edges": [
        {
          "from": "convertBoardListToObject-input",
          "to": "convertBoardListToObject-run",
          "out": "*"
        },
        {
          "from": "convertBoardListToObject-run",
          "to": "convertBoardListToObject-output",
          "out": "*"
        }
      ],
      "nodes": [
        {
          "id": "convertBoardListToObject-input",
          "type": "input",
          "configuration": {}
        },
        {
          "id": "convertBoardListToObject-run",
          "type": "runJavascript",
          "configuration": {
            "code": "function convertBoardListToObject({ list }) {\n  const operations = list\n    .map((item) => {\n      return {\n        [item.item.operationId]: item,\n      };\n    })\n    .reduce((acc, curr) => {\n      return { ...acc, ...curr };\n    }, {});\n  return { ...operations };\n}",
            "name": "convertBoardListToObject",
            "raw": true
          }
        },
        {
          "id": "convertBoardListToObject-output",
          "type": "output",
          "configuration": {}
        }
      ]
    },
    "generateAPISpecs": {
      "edges": [
        {
          "from": "generateAPISpecs-input",
          "to": "generateAPISpecs-run",
          "out": "*"
        },
        {
          "from": "generateAPISpecs-run",
          "to": "generateAPISpecs-output",
          "out": "*"
        }
      ],
      "nodes": [
        {
          "id": "generateAPISpecs-input",
          "type": "input",
          "configuration": {}
        },
        {
          "id": "generateAPISpecs-run",
          "type": "runJavascript",
          "configuration": {
            "code": "function generateAPISpecs({ json }) {\n  const { paths, info } = json;\n  const baseUrl = json.servers[0].url;\n\n  /*\n    If there is no operation ID, we need to generate one from the path, but format it like a JS function name.\n   */\n  const inferOperationId = (path, method) => {\n    let newName = path\n      .split(\"/\")\n      .map((part) =>\n        part.length == 0 ? part : part[0].toUpperCase() + part.slice(1)\n      )\n      .join(\"\")\n      .replace(/[.-]/g, \"\") // Remove dashes and dots\n      .replace(/[{}]/g, \"\"); // Remove curly braces (need to improve this)\n\n    return `${method}${newName}`;\n  };\n\n  const apis = Object.entries(paths)\n    .map(([key, value]) => {\n      // Parse parameters on the path\n      let pathParameters = [];\n      if (\"parameters\" in value) {\n        pathParameters = value.parameters.map((param) => {\n          // We can only manage reference objects for now.\n          if (\"$ref\" in param) {\n            if (param.$ref.startsWith(\"#\") == false) {\n              return undefined;\n            }\n\n            const pathParts = param.$ref.replace(/^#\\//, \"\").split(\"/\");\n            let obj = json;\n\n            for (const part of pathParts) {\n              obj = obj[part];\n            }\n\n            return obj;\n          } else {\n            return param;\n          }\n        });\n      }\n\n      return Object.keys(value)\n        .filter((method) => [\"post\", \"get\"].includes(method))\n        .map((method) => {\n          // Operation ID might not exist.\n          const operationId =\n            value[method].operationId ||\n            inferOperationId(key, method, value[method]);\n\n          const data = value[method];\n\n          // All parameters, path or query are held in the parameters array ( but might be a reference)\n          const parameters =\n            \"parameters\" in data == false\n              ? []\n              : data.parameters.map((param) => {\n                  // We can only manage reference objects for now.\n                  if (\"$ref\" in param) {\n                    if (param.$ref.startsWith(\"#\") == false) {\n                      return undefined;\n                    }\n\n                    const pathParts = param.$ref.replace(/^#\\//, \"\").split(\"/\");\n                    let obj = json;\n\n                    for (const part of pathParts) {\n                      obj = obj[part];\n                    }\n\n                    return obj;\n                  } else {\n                    return param;\n                  }\n                });\n\n          parameters.push(...pathParameters);\n\n          const requestBody =\n            \"requestBody\" in data == false\n              ? undefined\n              : Object.entries(data.requestBody.content)\n                  .map(([contentType, reqeustParams]) => {\n                    // We can only manage reference objects for now.\n                    if (\"$ref\" in reqeustParams.schema) {\n                      if (reqeustParams.schema.$ref.startsWith(\"#\") == false) {\n                        return undefined;\n                      }\n\n                      const pathParts = reqeustParams.schema.$ref\n                        .replace(/^#\\//, \"\")\n                        .split(\"/\");\n                      let obj = json;\n\n                      for (const part of pathParts) {\n                        obj = obj[part];\n                      }\n\n                      if (\"description\" in obj == false) {\n                        obj.description = `Request POST data (format: ${contentType})`;\n                      }\n                      return { [contentType]: { schema: obj } };\n                    }\n                    return { [contentType]: reqeustParams };\n                  })\n                  .reduce((acc, curr) => {\n                    return { ...acc, ...curr };\n                  }, {});\n\n          // We will need to hook up `secrets` to this somehow.\n          let secrets = undefined;\n          // We can only support Bearer tokens for now.\n          if (\"components\" in json && \"securitySchemes\" in json.components) {\n            // Check to see if global security is defined, it's the same type and && it is a bearer token.\n            const bearerSecurity = Object.entries(\n              json.components.securitySchemes\n            ).find(([securityMethodKey, securityValue]) => {\n              const security = json.security.find((item) => {\n                return securityMethodKey in item;\n              });\n\n              return (\n                security &&\n                securityValue.type == \"http\" &&\n                securityValue.scheme == \"bearer\"\n              );\n            });\n\n            if (bearerSecurity != undefined) {\n              secrets = bearerSecurity;\n            }\n          }\n\n          const headers = {\n            operationId,\n            url: baseUrl.replace(/\\/$/, \"\") + key,\n            method: method.toUpperCase(),\n            description: data.description,\n            summary: data.summary,\n            parameters,\n            requestBody,\n            secrets,\n            info,\n          };\n\n          return headers;\n        })\n        .flat();\n    })\n    .flat();\n\n  return { list: apis };\n}",
            "name": "generateAPISpecs",
            "raw": true
          }
        },
        {
          "id": "generateAPISpecs-output",
          "type": "output",
          "configuration": {}
        }
      ]
    },
    "isOpenAPI": {
      "edges": [
        {
          "from": "isOpenAPI-input",
          "to": "isOpenAPI-run",
          "out": "*"
        },
        {
          "from": "isOpenAPI-run",
          "to": "isOpenAPI-output",
          "out": "*"
        }
      ],
      "nodes": [
        {
          "id": "isOpenAPI-input",
          "type": "input",
          "configuration": {}
        },
        {
          "id": "isOpenAPI-run",
          "type": "runJavascript",
          "configuration": {
            "code": "function isOpenAPI({ json }) {\n  if (\"openapi\" in json == false) {\n    throw new Error(\"Not an Open API spec.\");\n  }\n\n  if (\"servers\" in json == false) {\n    throw new Error(\"No servers in Open API spec.\");\n  }\n\n  if (\"paths\" in json == false) {\n    throw new Error(\"No paths in Open API spec.\");\n  }\n\n  return { json };\n}",
            "name": "isOpenAPI",
            "raw": true
          }
        },
        {
          "id": "isOpenAPI-output",
          "type": "output",
          "configuration": {}
        }
      ]
    }
  }
}