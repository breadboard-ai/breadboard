openapi: 3.1.0
info:
  contact:
    name: Paul Kinlan via StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Generative Language API
  description: >-
    The Gemini API allows developers to build generative AI applications using
    Gemini models. Gemini is our most capable model in the world, built from the
    ground up to be multimodal. It can generalize and seamlessly understand,
    operate across, and combine different types of information. including
    language, images, audio, video, and code. You can use the Gemini API for use
    cases like reasoning across text and images, content generation, dialogue
    agents, summarization and classification systems, and more.
  version: v1beta3
  x-discovery-doc-revision: "20240102"
  x-generated-date: "2024-01-05"
externalDocs:
  url: https://developers.generativeai.google/api
servers:
  - url: https://generativelanguage.googleapis.com
components:
  schemas:
    TransferOwnershipRequest:
      id: TransferOwnershipRequest
      description: Request to transfer the ownership of the tuned model.
      properties:
        emailAddress:
          description: >-
            Required. The email address of the user to whom the tuned model is
            being transferred to.
          type: string
      type: object
    Hyperparameters:
      properties:
        epochCount:
          type: integer
          description: >-
            Immutable. The number of training epochs. An epoch is one pass
            through the training data. If not set, a default of 10 will be used.
          format: int32
        batchSize:
          format: int32
          type: integer
          description: >-
            Immutable. The batch size hyperparameter for tuning. If not set, a
            default of 16 or 64 will be used based on the number of training
            examples.
        learningRate:
          description: >-
            Immutable. The learning rate hyperparameter for tuning. If not set,
            a default of 0.0002 or 0.002 will be calculated based on the number
            of training examples.
          format: float
          type: number
      type: object
      description: Hyperparameters controlling the tuning process.
      id: Hyperparameters
    EmbedTextResponse:
      description: The response to a EmbedTextRequest.
      id: EmbedTextResponse
      properties:
        embedding:
          readOnly: true
          description: Output only. The embedding generated from the input text.
          $ref: "#/components/schemas/Embedding"
      type: object
    TextPrompt:
      description: >-
        Text given to the model as a prompt. The Model will use this TextPrompt
        to Generate a text completion.
      properties:
        text:
          description: Required. The prompt text.
          type: string
      type: object
      id: TextPrompt
    TuningExample:
      properties:
        textInput:
          type: string
          description: Optional. Text model input.
        output:
          type: string
          description: Required. The expected model output.
      id: TuningExample
      type: object
      description: A single example for tuning.
    TunedModel:
      description: A fine-tuned model created using ModelService.CreateTunedModel.
      type: object
      properties:
        baseModel:
          type: string
          description: >-
            Immutable. The name of the `Model` to tune. Example:
            `models/text-bison-001`
        name:
          description: >-
            Output only. The tuned model name. A unique name will be generated
            on create. Example: `tunedModels/az2mb0bpw6i` If display_name is set
            on create, the id portion of the name will be set by concatenating
            the words of the display_name with hyphens and adding a random
            portion for uniqueness. Example: display_name = "Sentence
            Translator" name = "tunedModels/sentence-translator-u3b7m"
          type: string
          readOnly: true
        topK:
          format: int32
          type: integer
          description: >-
            Optional. For Top-k sampling. Top-k sampling considers the set of
            `top_k` most probable tokens. This value specifies default to be
            used by the backend while making the call to the model. This value
            specifies default to be the one used by the base model while
            creating the model.
        createTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. The timestamp when this model was created.
        temperature:
          description: >-
            Optional. Controls the randomness of the output. Values can range
            over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce
            responses that are more varied, while a value closer to `0.0` will
            typically result in less surprising responses from the model. This
            value specifies default to be the one used by the base model while
            creating the model.
          format: float
          type: number
        displayName:
          description: >-
            Optional. The name to display for this model in user interfaces. The
            display name must be up to 40 characters including spaces.
          type: string
        tuningTask:
          $ref: "#/components/schemas/TuningTask"
          description: Required. The tuning task that creates the tuned model.
        description:
          type: string
          description: Optional. A short description of this model.
        state:
          enumDescriptions:
            - The default value. This value is unused.
            - The model is being created.
            - The model is ready to be used.
            - The model failed to be created.
          readOnly: true
          description: Output only. The state of the tuned model.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACTIVE
            - FAILED
          type: string
        topP:
          description: >-
            Optional. For Nucleus sampling. Nucleus sampling considers the
            smallest set of tokens whose probability sum is at least `top_p`.
            This value specifies default to be the one used by the base model
            while creating the model.
          format: float
          type: number
        tunedModelSource:
          $ref: "#/components/schemas/TunedModelSource"
          description: >-
            Optional. TunedModel to use as the starting point for training the
            new model.
        updateTime:
          description: Output only. The timestamp when this model was updated.
          readOnly: true
          type: string
          format: google-datetime
      id: TunedModel
    CitationMetadata:
      type: object
      description: A collection of source attributions for a piece of content.
      properties:
        citationSources:
          type: array
          description: Citations to sources for a specific response.
          items:
            $ref: "#/components/schemas/CitationSource"
      id: CitationMetadata
    BatchEmbedTextRequest:
      id: BatchEmbedTextRequest
      description: Batch request to get a text embedding from the model.
      type: object
      properties:
        requests:
          description: >-
            Optional. Embed requests for the batch. Only one of `texts` or
            `requests` can be set.
          type: array
          items:
            $ref: "#/components/schemas/EmbedTextRequest"
        texts:
          items:
            type: string
          type: array
          description: >-
            Optional. The free-form input texts that the model will turn into an
            embedding. The current limit is 100 texts, over which an error will
            be thrown.
    ContentFilter:
      id: ContentFilter
      type: object
      properties:
        reason:
          enumDescriptions:
            - A blocked reason was not specified.
            - Content was blocked by safety settings.
            - Content was blocked, but the reason is uncategorized.
          description: The reason content was blocked during request processing.
          enum:
            - BLOCKED_REASON_UNSPECIFIED
            - SAFETY
            - OTHER
          type: string
        message:
          description: A string that describes the filtering behavior in more detail.
          type: string
      description: >-
        Content filtering metadata associated with processing a single request.
        ContentFilter contains a reason and an optional supporting string. The
        reason may be unspecified.
    EmbedTextRequest:
      id: EmbedTextRequest
      type: object
      description: Request to get a text embedding from the model.
      properties:
        text:
          description: >-
            Optional. The free-form input text that the model will turn into an
            embedding.
          type: string
        model:
          type: string
          description: >-
            Required. The model name to use with the format
            model=models/{model}.
    Example:
      properties:
        output:
          description: >-
            Required. An example of what the model should output given the
            input.
          $ref: "#/components/schemas/Message"
        input:
          $ref: "#/components/schemas/Message"
          description: Required. An example of an input `Message` from the user.
      id: Example
      description: >-
        An input/output example used to instruct the Model. It demonstrates how
        the model should respond or format its response.
      type: object
    SafetyFeedback:
      description: >-
        Safety feedback for an entire request. This field is populated if
        content in the input and/or response is blocked due to safety settings.
        SafetyFeedback may not exist for every HarmCategory. Each SafetyFeedback
        will return the safety settings used by the request as well as the
        lowest HarmProbability that should be allowed in order to return a
        result.
      properties:
        rating:
          description: Safety rating evaluated from content.
          $ref: "#/components/schemas/SafetyRating"
        setting:
          description: Safety settings applied to the request.
          $ref: "#/components/schemas/SafetySetting"
      type: object
      id: SafetyFeedback
    CitationSource:
      id: CitationSource
      properties:
        startIndex:
          type: integer
          description: >-
            Optional. Start of segment of the response that is attributed to
            this source. Index indicates the start of the segment, measured in
            bytes.
          format: int32
        license:
          type: string
          description: >-
            Optional. License for the GitHub project that is attributed as a
            source for segment. License info is required for code citations.
        uri:
          description: >-
            Optional. URI that is attributed as a source for a portion of the
            text.
          type: string
        endIndex:
          format: int32
          type: integer
          description: Optional. End of the attributed segment, exclusive.
      description: A citation to a source for a portion of a specific response.
      type: object
    Message:
      id: Message
      properties:
        content:
          description: Required. The text content of the structured `Message`.
          type: string
        citationMetadata:
          $ref: "#/components/schemas/CitationMetadata"
          readOnly: true
          description: >-
            Output only. Citation information for model-generated `content` in
            this `Message`. If this `Message` was generated as output from the
            model, this field may be populated with attribution information for
            any text included in the `content`. This field is used only on
            output.
        author:
          type: string
          description: >-
            Optional. The author of this Message. This serves as a key for
            tagging the content of this Message when it is fed to the model as
            text. The author can be any alphanumeric string.
      type: object
      description: >-
        The base unit of structured text. A `Message` includes an `author` and
        the `content` of the `Message`. The `author` is used to tag messages
        when they are fed to the model as text.
    Status:
      type: object
      properties:
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          type: array
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
      id: Status
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
    Permission:
      description: >-
        Permission resource grants user, group or the rest of the world access
        to the PaLM API resource (e.g. a tuned model, corpus). A role is a
        collection of permitted operations that allows users to perform specific
        actions on PaLM API resources. To make them available to users, groups,
        or service accounts, you assign roles. When you assign a role, you grant
        permissions that the role contains. There are three concentric roles.
        Each role is a superset of the previous role's permitted operations: -
        reader can use the resource (e.g. tuned model, corpus) for inference -
        writer has reader's permissions and additionally can edit and share -
        owner has writer's permissions and additionally can delete
      id: Permission
      properties:
        name:
          readOnly: true
          type: string
          description: >-
            Output only. Identifier. The permission name. A unique name will be
            generated on create. Examples:
            tunedModels/{tuned_model}/permissions/{permission}
            corpora/{corpus}/permissions/{permission} Output only.
        granteeType:
          description: Optional. Immutable. The type of the grantee.
          type: string
          enum:
            - GRANTEE_TYPE_UNSPECIFIED
            - USER
            - GROUP
            - EVERYONE
          enumDescriptions:
            - The default value. This value is unused.
            - >-
              Represents a user. When set, you must provide email_address for
              the user.
            - >-
              Represents a group. When set, you must provide email_address for
              the group.
            - Represents access to everyone. No extra information is required.
        emailAddress:
          description: >-
            Optional. Immutable. The email address of the user of group which
            this permission refers. Field is not set when permission's grantee
            type is EVERYONE.
          type: string
        role:
          type: string
          description: Required. The role granted by this permission.
          enumDescriptions:
            - The default value. This value is unused.
            - Owner can use, update, share and delete the resource.
            - Writer can use, update and share the resource.
            - Reader can use the resource.
          enum:
            - ROLE_UNSPECIFIED
            - OWNER
            - WRITER
            - READER
      type: object
    SafetySetting:
      id: SafetySetting
      description: >-
        Safety setting, affecting the safety-blocking behavior. Passing a safety
        setting for a category changes the allowed proability that content is
        blocked.
      type: object
      properties:
        threshold:
          type: string
          description: >-
            Required. Controls the probability threshold at which harm is
            blocked.
          enumDescriptions:
            - Threshold is unspecified.
            - Content with NEGLIGIBLE will be allowed.
            - Content with NEGLIGIBLE and LOW will be allowed.
            - Content with NEGLIGIBLE, LOW, and MEDIUM will be allowed.
            - All content will be allowed.
          enum:
            - HARM_BLOCK_THRESHOLD_UNSPECIFIED
            - BLOCK_LOW_AND_ABOVE
            - BLOCK_MEDIUM_AND_ABOVE
            - BLOCK_ONLY_HIGH
            - BLOCK_NONE
        category:
          enum:
            - HARM_CATEGORY_UNSPECIFIED
            - HARM_CATEGORY_DEROGATORY
            - HARM_CATEGORY_TOXICITY
            - HARM_CATEGORY_VIOLENCE
            - HARM_CATEGORY_SEXUAL
            - HARM_CATEGORY_MEDICAL
            - HARM_CATEGORY_DANGEROUS
            - HARM_CATEGORY_HARASSMENT
            - HARM_CATEGORY_HATE_SPEECH
            - HARM_CATEGORY_SEXUALLY_EXPLICIT
            - HARM_CATEGORY_DANGEROUS_CONTENT
          enumDescriptions:
            - Category is unspecified.
            - >-
              Negative or harmful comments targeting identity and/or protected
              attribute.
            - Content that is rude, disrepspectful, or profane.
            - >-
              Describes scenarios depictng violence against an individual or
              group, or general descriptions of gore.
            - Contains references to sexual acts or other lewd content.
            - Promotes unchecked medical advice.
            - >-
              Dangerous content that promotes, facilitates, or encourages
              harmful acts.
            - Harasment content.
            - Hate speech and content.
            - Sexually explicit content.
            - Dangerous content.
          type: string
          description: Required. The category for this setting.
    TuningExamples:
      id: TuningExamples
      type: object
      description: A set of tuning examples. Can be training or validation data.
      properties:
        examples:
          type: array
          description: >-
            Required. The examples. Example input can be for text or discuss,
            but all examples in a set must be of the same type.
          items:
            $ref: "#/components/schemas/TuningExample"
    TextCompletion:
      description: Output text returned from a model.
      type: object
      id: TextCompletion
      properties:
        citationMetadata:
          description: >-
            Output only. Citation information for model-generated `output` in
            this `TextCompletion`. This field may be populated with attribution
            information for any text included in the `output`.
          $ref: "#/components/schemas/CitationMetadata"
          readOnly: true
        output:
          readOnly: true
          description: Output only. The generated text returned from the model.
          type: string
        safetyRatings:
          items:
            $ref: "#/components/schemas/SafetyRating"
          description: >-
            Ratings for the safety of a response. There is at most one rating
            per category.
          type: array
    Dataset:
      id: Dataset
      description: Dataset for training or validation.
      type: object
      properties:
        examples:
          description: Optional. Inline examples.
          $ref: "#/components/schemas/TuningExamples"
    Model:
      properties:
        supportedGenerationMethods:
          type: array
          description: >-
            The model's supported generation methods. The method names are
            defined as Pascal case strings, such as `generateMessage` which
            correspond to API methods.
          items:
            type: string
        description:
          type: string
          description: A short description of the model.
        displayName:
          description: >-
            The human-readable name of the model. E.g. "Chat Bison". The name
            can be up to 128 characters long and can consist of any UTF-8
            characters.
          type: string
        outputTokenLimit:
          format: int32
          type: integer
          description: Maximum number of output tokens available for this model.
        inputTokenLimit:
          type: integer
          description: Maximum number of input tokens allowed for this model.
          format: int32
        temperature:
          format: float
          type: number
          description: >-
            Controls the randomness of the output. Values can range over
            `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce
            responses that are more varied, while a value closer to `0.0` will
            typically result in less surprising responses from the model. This
            value specifies default to be used by the backend while making the
            call to the model.
        topP:
          type: number
          format: float
          description: >-
            For Nucleus sampling. Nucleus sampling considers the smallest set of
            tokens whose probability sum is at least `top_p`. This value
            specifies default to be used by the backend while making the call to
            the model.
        baseModelId:
          type: string
          description: >-
            Required. The name of the base model, pass this to the generation
            request. Examples: * `chat-bison`
        version:
          description: >-
            Required. The version number of the model. This represents the major
            version
          type: string
        name:
          type: string
          description: >-
            Required. The resource name of the `Model`. Format: `models/{model}`
            with a `{model}` naming convention of: * "{base_model_id}-{version}"
            Examples: * `models/chat-bison-001`
        topK:
          type: integer
          description: >-
            For Top-k sampling. Top-k sampling considers the set of `top_k` most
            probable tokens. This value specifies default to be used by the
            backend while making the call to the model.
          format: int32
      type: object
      description: Information about a Generative Language Model.
      id: Model
    CountTextTokensResponse:
      description: >-
        A response from `CountTextTokens`. It returns the model's `token_count`
        for the `prompt`.
      properties:
        tokenCount:
          type: integer
          description: >-
            The number of tokens that the `model` tokenizes the `prompt` into.
            Always non-negative.
          format: int32
      id: CountTextTokensResponse
      type: object
    CreateTunedModelMetadata:
      type: object
      description: >-
        Metadata about the state and progress of creating a tuned model returned
        from the long-running operation
      properties:
        snapshots:
          type: array
          description: Metrics collected during tuning.
          items:
            $ref: "#/components/schemas/TuningSnapshot"
        totalSteps:
          format: int32
          type: integer
          description: The total number of tuning steps.
        completedSteps:
          format: int32
          type: integer
          description: The number of steps completed.
        tunedModel:
          type: string
          description: Name of the tuned model associated with the tuning operation.
        completedPercent:
          description: The completed percentage for the tuning operation.
          type: number
          format: float
      id: CreateTunedModelMetadata
    Embedding:
      id: Embedding
      type: object
      description: A list of floats representing the embedding.
      properties:
        value:
          items:
            type: number
            format: float
          description: The embedding values.
          type: array
    TransferOwnershipResponse:
      type: object
      id: TransferOwnershipResponse
      properties: {}
      description: Response from `TransferOwnership`.
    CountMessageTokensRequest:
      description: >-
        Counts the number of tokens in the `prompt` sent to a model. Models may
        tokenize text differently, so each model may return a different
        `token_count`.
      properties:
        prompt:
          $ref: "#/components/schemas/MessagePrompt"
          description: Required. The prompt, whose token count is to be returned.
      id: CountMessageTokensRequest
      type: object
    TunedModelSource:
      description: Tuned model as a source for training a new model.
      id: TunedModelSource
      type: object
      properties:
        tunedModel:
          type: string
          description: >-
            Immutable. The name of the `TunedModel` to use as the starting point
            for training the new model. Example: `tunedModels/my-tuned-model`
        baseModel:
          type: string
          readOnly: true
          description: >-
            Output only. The name of the base `Model` this `TunedModel` was
            tuned from. Example: `models/text-bison-001`
    CountTextTokensRequest:
      type: object
      description: >-
        Counts the number of tokens in the `prompt` sent to a model. Models may
        tokenize text differently, so each model may return a different
        `token_count`.
      id: CountTextTokensRequest
      properties:
        prompt:
          description: Required. The free-form input text given to the model as a prompt.
          $ref: "#/components/schemas/TextPrompt"
    TuningTask:
      type: object
      id: TuningTask
      properties:
        snapshots:
          description: Output only. Metrics collected during tuning.
          type: array
          items:
            $ref: "#/components/schemas/TuningSnapshot"
          readOnly: true
        startTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. The timestamp when tuning this model started.
        completeTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. The timestamp when tuning this model completed.
        hyperparameters:
          $ref: "#/components/schemas/Hyperparameters"
          description: >-
            Immutable. Hyperparameters controlling the tuning process. If not
            provided, default values will be used.
        trainingData:
          description: Required. Input only. Immutable. The model training data.
          $ref: "#/components/schemas/Dataset"
      description: Tuning tasks that create tuned models.
    MessagePrompt:
      description: >-
        All of the structured input text passed to the model as a prompt. A
        `MessagePrompt` contains a structured set of fields that provide context
        for the conversation, examples of user input/model output message pairs
        that prime the model to respond in different ways, and the conversation
        history or list of messages representing the alternating turns of the
        conversation between the user and the model.
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
          description: >-
            Required. A snapshot of the recent conversation history sorted
            chronologically. Turns alternate between two authors. If the total
            input size exceeds the model's `input_token_limit` the input will be
            truncated: The oldest items will be dropped from `messages`.
        examples:
          description: >-
            Optional. Examples of what the model should generate. This includes
            both user input and the response that the model should emulate.
            These `examples` are treated identically to conversation messages
            except that they take precedence over the history in `messages`: If
            the total input size exceeds the model's `input_token_limit` the
            input will be truncated. Items will be dropped from `messages`
            before `examples`.
          items:
            $ref: "#/components/schemas/Example"
          type: array
        context:
          type: string
          description: >-
            Optional. Text that should be provided to the model first to ground
            the response. If not empty, this `context` will be given to the
            model first before the `examples` and `messages`. When using a
            `context` be sure to provide it with every request to maintain
            continuity. This field can be a description of your prompt to the
            model to help provide context and guide the responses. Examples:
            "Translate the phrase from English to French." or "Given a
            statement, classify the sentiment as happy, sad or neutral."
            Anything included in this field will take precedence over message
            history if the total input size exceeds the model's
            `input_token_limit` and the input request is truncated.
      id: MessagePrompt
    GenerateTextResponse:
      description: The response from the model, including candidate completions.
      type: object
      properties:
        safetyFeedback:
          type: array
          items:
            $ref: "#/components/schemas/SafetyFeedback"
          description: Returns any safety feedback related to content filtering.
        filters:
          items:
            $ref: "#/components/schemas/ContentFilter"
          description: >-
            A set of content filtering metadata for the prompt and response
            text. This indicates which `SafetyCategory`(s) blocked a candidate
            from this response, the lowest `HarmProbability` that triggered a
            block, and the HarmThreshold setting for that category. This
            indicates the smallest change to the `SafetySettings` that would be
            necessary to unblock at least 1 response. The blocking is configured
            by the `SafetySettings` in the request (or the default
            `SafetySettings` of the API).
          type: array
        candidates:
          type: array
          items:
            $ref: "#/components/schemas/TextCompletion"
          description: Candidate responses from the model.
      id: GenerateTextResponse
    GenerateTextRequest:
      description: Request to generate a text completion response from the model.
      id: GenerateTextRequest
      properties:
        temperature:
          description: >-
            Optional. Controls the randomness of the output. Note: The default
            value varies by model, see the `Model.temperature` attribute of the
            `Model` returned the `getModel` function. Values can range from
            [0.0,1.0], inclusive. A value closer to 1.0 will produce responses
            that are more varied and creative, while a value closer to 0.0 will
            typically result in more straightforward responses from the model.
          type: number
          format: float
        maxOutputTokens:
          type: integer
          format: int32
          description: >-
            Optional. The maximum number of tokens to include in a candidate. If
            unset, this will default to output_token_limit specified in the
            `Model` specification.
        topK:
          description: >-
            Optional. The maximum number of tokens to consider when sampling.
            The model uses combined Top-k and nucleus sampling. Top-k sampling
            considers the set of `top_k` most probable tokens. Defaults to 40.
            Note: The default value varies by model, see the `Model.top_k`
            attribute of the `Model` returned the `getModel` function.
          type: integer
          format: int32
        candidateCount:
          description: >-
            Optional. Number of generated responses to return. This value must
            be between [1, 8], inclusive. If unset, this will default to 1.
          type: integer
          format: int32
        topP:
          format: float
          type: number
          description: >-
            Optional. The maximum cumulative probability of tokens to consider
            when sampling. The model uses combined Top-k and nucleus sampling.
            Tokens are sorted based on their assigned probabilities so that only
            the most likely tokens are considered. Top-k sampling directly
            limits the maximum number of tokens to consider, while Nucleus
            sampling limits number of tokens based on the cumulative
            probability. Note: The default value varies by model, see the
            `Model.top_p` attribute of the `Model` returned the `getModel`
            function.
        prompt:
          $ref: "#/components/schemas/TextPrompt"
          description: >-
            Required. The free-form input text given to the model as a prompt.
            Given a prompt, the model will generate a TextCompletion response it
            predicts as the completion of the input text.
        stopSequences:
          type: array
          description: >-
            The set of character sequences (up to 5) that will stop output
            generation. If specified, the API will stop at the first appearance
            of a stop sequence. The stop sequence will not be included as part
            of the response.
          items:
            type: string
        safetySettings:
          type: array
          items:
            $ref: "#/components/schemas/SafetySetting"
          description: >-
            Optional. A list of unique `SafetySetting` instances for blocking
            unsafe content. that will be enforced on the
            `GenerateTextRequest.prompt` and `GenerateTextResponse.candidates`.
            There should not be more than one setting for each `SafetyCategory`
            type. The API will block any prompts and responses that fail to meet
            the thresholds set by these settings. This list overrides the
            default settings for each `SafetyCategory` specified in the
            safety_settings. If there is no `SafetySetting` for a given
            `SafetyCategory` provided in the list, the API will use the default
            safety setting for that category. Harm categories
            HARM_CATEGORY_DEROGATORY, HARM_CATEGORY_TOXICITY,
            HARM_CATEGORY_VIOLENCE, HARM_CATEGORY_SEXUAL, HARM_CATEGORY_MEDICAL,
            HARM_CATEGORY_DANGEROUS are supported in text service.
      type: object
    TuningSnapshot:
      description: Record for a single tuning step.
      type: object
      properties:
        epoch:
          type: integer
          readOnly: true
          description: Output only. The epoch this step was part of.
          format: int32
        meanLoss:
          readOnly: true
          format: float
          description: Output only. The mean loss of the training examples for this step.
          type: number
        step:
          type: integer
          description: Output only. The tuning step.
          readOnly: true
          format: int32
        computeTime:
          format: google-datetime
          description: Output only. The timestamp when this metric was computed.
          readOnly: true
          type: string
      id: TuningSnapshot
    BatchEmbedTextResponse:
      description: The response to a EmbedTextRequest.
      type: object
      properties:
        embeddings:
          type: array
          items:
            $ref: "#/components/schemas/Embedding"
          readOnly: true
          description: Output only. The embeddings generated from the input text.
      id: BatchEmbedTextResponse
    ListPermissionsResponse:
      type: object
      properties:
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no more pages.
          type: string
        permissions:
          description: Returned permissions.
          items:
            $ref: "#/components/schemas/Permission"
          type: array
      id: ListPermissionsResponse
      description: >-
        Response from `ListPermissions` containing a paginated list of
        permissions.
    SafetyRating:
      type: object
      description: >-
        Safety rating for a piece of content. The safety rating contains the
        category of harm and the harm probability level in that category for a
        piece of content. Content is classified for safety across a number of
        harm categories and the probability of the harm classification is
        included here.
      id: SafetyRating
      properties:
        probability:
          enumDescriptions:
            - Probability is unspecified.
            - Content has a negligible chance of being unsafe.
            - Content has a low chance of being unsafe.
            - Content has a medium chance of being unsafe.
            - Content has a high chance of being unsafe.
          type: string
          description: Required. The probability of harm for this content.
          enum:
            - HARM_PROBABILITY_UNSPECIFIED
            - NEGLIGIBLE
            - LOW
            - MEDIUM
            - HIGH
        blocked:
          description: Was this content blocked because of this rating?
          type: boolean
        category:
          enumDescriptions:
            - Category is unspecified.
            - >-
              Negative or harmful comments targeting identity and/or protected
              attribute.
            - Content that is rude, disrepspectful, or profane.
            - >-
              Describes scenarios depictng violence against an individual or
              group, or general descriptions of gore.
            - Contains references to sexual acts or other lewd content.
            - Promotes unchecked medical advice.
            - >-
              Dangerous content that promotes, facilitates, or encourages
              harmful acts.
            - Harasment content.
            - Hate speech and content.
            - Sexually explicit content.
            - Dangerous content.
          description: Required. The category for this rating.
          type: string
          enum:
            - HARM_CATEGORY_UNSPECIFIED
            - HARM_CATEGORY_DEROGATORY
            - HARM_CATEGORY_TOXICITY
            - HARM_CATEGORY_VIOLENCE
            - HARM_CATEGORY_SEXUAL
            - HARM_CATEGORY_MEDICAL
            - HARM_CATEGORY_DANGEROUS
            - HARM_CATEGORY_HARASSMENT
            - HARM_CATEGORY_HATE_SPEECH
            - HARM_CATEGORY_SEXUALLY_EXPLICIT
            - HARM_CATEGORY_DANGEROUS_CONTENT
    GenerateMessageRequest:
      id: GenerateMessageRequest
      type: object
      properties:
        prompt:
          description: >-
            Required. The structured textual input given to the model as a
            prompt. Given a prompt, the model will return what it predicts is
            the next message in the discussion.
          $ref: "#/components/schemas/MessagePrompt"
        topP:
          description: >-
            Optional. The maximum cumulative probability of tokens to consider
            when sampling. The model uses combined Top-k and nucleus sampling.
            Nucleus sampling considers the smallest set of tokens whose
            probability sum is at least `top_p`.
          format: float
          type: number
        temperature:
          type: number
          format: float
          description: >-
            Optional. Controls the randomness of the output. Values can range
            over `[0.0,1.0]`, inclusive. A value closer to `1.0` will produce
            responses that are more varied, while a value closer to `0.0` will
            typically result in less surprising responses from the model.
        topK:
          type: integer
          format: int32
          description: >-
            Optional. The maximum number of tokens to consider when sampling.
            The model uses combined Top-k and nucleus sampling. Top-k sampling
            considers the set of `top_k` most probable tokens.
        candidateCount:
          format: int32
          description: >-
            Optional. The number of generated response messages to return. This
            value must be between `[1, 8]`, inclusive. If unset, this will
            default to `1`.
          type: integer
      description: Request to generate a message response from the model.
    GenerateMessageResponse:
      properties:
        messages:
          items:
            $ref: "#/components/schemas/Message"
          description: The conversation history used by the model.
          type: array
        candidates:
          type: array
          description: Candidate response messages from the model.
          items:
            $ref: "#/components/schemas/Message"
        filters:
          type: array
          items:
            $ref: "#/components/schemas/ContentFilter"
          description: >-
            A set of content filtering metadata for the prompt and response
            text. This indicates which `SafetyCategory`(s) blocked a candidate
            from this response, the lowest `HarmProbability` that triggered a
            block, and the HarmThreshold setting for that category.
      description: >-
        The response from the model. This includes candidate messages and
        conversation history in the form of chronologically-ordered messages.
      type: object
      id: GenerateMessageResponse
    ListModelsResponse:
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no more pages.
        models:
          type: array
          description: The returned Models.
          items:
            $ref: "#/components/schemas/Model"
      type: object
      description: Response from `ListModel` containing a paginated list of Models.
      id: ListModelsResponse
    ListTunedModelsResponse:
      properties:
        tunedModels:
          type: array
          description: The returned Models.
          items:
            $ref: "#/components/schemas/TunedModel"
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no more pages.
          type: string
      description: Response from `ListTunedModels` containing a paginated list of Models.
      type: object
      id: ListTunedModelsResponse
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      id: Empty
      properties: {}
      type: object
    CountMessageTokensResponse:
      properties:
        tokenCount:
          format: int32
          description: >-
            The number of tokens that the `model` tokenizes the `prompt` into.
            Always non-negative.
          type: integer
      type: object
      description: >-
        A response from `CountMessageTokens`. It returns the model's
        `token_count` for the `prompt`.
      id: CountMessageTokensResponse
    Operation:
      id: Operation
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Status"
          description: >-
            The error result of the operation in case of failure or
            cancellation.
        response:
          type: object
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as `Delete`, the response is
            `google.protobuf.Empty`. If the original method is standard
            `Get`/`Create`/`Update`, the response should be the resource. For
            other methods, the response should have the type `XxxResponse`,
            where `Xxx` is the original method name. For example, if the
            original method name is `TakeSnapshot()`, the inferred response type
            is `TakeSnapshotResponse`.
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
        done:
          type: boolean
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
        name:
          type: string
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
        metadata:
          type: object
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
  parameters:
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - "1"
          - "2"
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
paths:
  /v1beta3/tunedModels:
    parameters: &ref_0
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/uploadType"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
    post:
      description: >-
        Creates a tuned model. Intermediate tuning progress (if any) is accessed
        through the [google.longrunning.Operations] service. Status and results
        can be accessed through the Operations service. Example: GET
        /v1/tunedModels/az2mb0bpw6i/operations/000-111-222
      operationId: generativelanguage.tunedModels.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TunedModel"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
      parameters:
        - in: query
          name: tunedModelId
          schema:
            type: string
      x-stackQL-resource: tuned_models
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists tuned models owned by the user.
      operationId: generativelanguage.tunedModels.list
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTunedModelsResponse"
      parameters:
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: tuned_models
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.tunedModels
  /v1beta3/tunedModels/{tunedModelsId}:
    parameters: *ref_0
    delete:
      description: Deletes a tuned model.
      operationId: generativelanguage.tunedModels.delete
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      parameters:
        - in: path
          name: tunedModelsId
          required: true
          schema:
            type: string
      x-stackQL-resource: tuned_models
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Updates a tuned model.
      operationId: generativelanguage.tunedModels.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TunedModel"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TunedModel"
      parameters:
        - in: path
          name: tunedModelsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: tuned_models
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Gets information about a specific TunedModel.
      operationId: generativelanguage.tunedModels.get
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TunedModel"
      parameters:
        - in: path
          name: tunedModelsId
          required: true
          schema:
            type: string
      x-stackQL-resource: tuned_models
      x-stackQL-method: get
      x-stackQL-verb: select
  /v1beta3/tunedModels/{tunedModelsId}:transferOwnership:
    parameters: *ref_0
    post:
      description: >-
        Transfers ownership of the tuned model. This is the only way to change
        ownership of the tuned model. The current owner will be downgraded to
        writer role.
      operationId: generativelanguage.tunedModels.transferOwnership
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferOwnershipRequest"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferOwnershipResponse"
      parameters:
        - in: path
          name: tunedModelsId
          required: true
          schema:
            type: string
      x-stackQL-resource: tuned_models
      x-stackQL-method: transfer_ownership
      x-stackQL-verb: exec
  /v1beta3/tunedModels/{tunedModelsId}:generateText:
    parameters: *ref_0
    post:
      description: Generates a response from the model given an input message.
      operationId: generativelanguage.tunedModels.generateText
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateTextRequest"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerateTextResponse"
      parameters:
        - in: path
          name: tunedModelsId
          required: true
          schema:
            type: string
      x-stackQL-resource: tuned_models
      x-stackQL-method: generate_text
      x-stackQL-verb: exec
  /v1beta3/tunedModels/{tunedModelsId}/permissions/{permissionsId}:
    parameters: *ref_0
    patch:
      description: Updates the permission.
      operationId: generativelanguage.tunedModels.permissions.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Permission"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permission"
      parameters:
        - in: path
          name: tunedModelsId
          required: true
          schema:
            type: string
        - in: path
          name: permissionsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: permissions
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Gets information about a specific Permission.
      operationId: generativelanguage.tunedModels.permissions.get
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permission"
      parameters:
        - in: path
          name: tunedModelsId
          required: true
          schema:
            type: string
        - in: path
          name: permissionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: permissions
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes the permission.
      operationId: generativelanguage.tunedModels.permissions.delete
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      parameters:
        - in: path
          name: tunedModelsId
          required: true
          schema:
            type: string
        - in: path
          name: permissionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: permissions
      x-stackQL-method: delete
      x-stackQL-verb: delete
  /v1beta3/tunedModels/{tunedModelsId}/permissions:
    parameters: *ref_0
    get:
      description: Lists permissions for the specific resource.
      operationId: generativelanguage.tunedModels.permissions.list
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPermissionsResponse"
      parameters:
        - in: path
          name: tunedModelsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: permissions
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.permissions
    post:
      description: Create a permission to a specific resource.
      operationId: generativelanguage.tunedModels.permissions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Permission"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permission"
      parameters:
        - in: path
          name: tunedModelsId
          required: true
          schema:
            type: string
      x-stackQL-resource: permissions
      x-stackQL-method: create
      x-stackQL-verb: insert
  /v1beta3/corpora/{corporaId}/permissions/{permissionsId}:
    parameters: *ref_0
    patch:
      description: Updates the permission.
      operationId: generativelanguage.corpora.permissions.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Permission"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permission"
      parameters:
        - in: path
          name: corporaId
          required: true
          schema:
            type: string
        - in: path
          name: permissionsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: permissions
      x-stackQL-method: patch
      x-stackQL-verb: exec
    delete:
      description: Deletes the permission.
      operationId: generativelanguage.corpora.permissions.delete
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      parameters:
        - in: path
          name: corporaId
          required: true
          schema:
            type: string
        - in: path
          name: permissionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: permissions
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets information about a specific Permission.
      operationId: generativelanguage.corpora.permissions.get
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permission"
      parameters:
        - in: path
          name: corporaId
          required: true
          schema:
            type: string
        - in: path
          name: permissionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: permissions
      x-stackQL-method: get
      x-stackQL-verb: select
  /v1beta3/corpora/{corporaId}/permissions:
    parameters: *ref_0
    post:
      description: Create a permission to a specific resource.
      operationId: generativelanguage.corpora.permissions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Permission"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permission"
      parameters:
        - in: path
          name: corporaId
          required: true
          schema:
            type: string
      x-stackQL-resource: permissions
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists permissions for the specific resource.
      operationId: generativelanguage.corpora.permissions.list
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPermissionsResponse"
      parameters:
        - in: path
          name: corporaId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: permissions
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.permissions
  /v1beta3/models/{modelsId}:embedText:
    parameters: *ref_0
    post:
      description: Generates an embedding from the model given an input message.
      operationId: generativelanguage.models.embedText
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmbedTextRequest"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmbedTextResponse"
      parameters:
        - in: path
          name: modelsId
          required: true
          schema:
            type: string
      x-stackQL-resource: models
      x-stackQL-method: embed_text
      x-stackQL-verb: exec
  /v1beta3/models/{modelsId}:countMessageTokens:
    parameters: *ref_0
    post:
      description: Runs a model's tokenizer on a string and returns the token count.
      operationId: generativelanguage.models.countMessageTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountMessageTokensRequest"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountMessageTokensResponse"
      parameters:
        - in: path
          name: modelsId
          required: true
          schema:
            type: string
      x-stackQL-resource: models
      x-stackQL-method: count_message_tokens
      x-stackQL-verb: exec
  /v1beta3/models/{modelsId}:batchEmbedText:
    parameters: *ref_0
    post:
      description: >-
        Generates multiple embeddings from the model given input text in a
        synchronous call.
      operationId: generativelanguage.models.batchEmbedText
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchEmbedTextRequest"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchEmbedTextResponse"
      parameters:
        - in: path
          name: modelsId
          required: true
          schema:
            type: string
      x-stackQL-resource: models
      x-stackQL-method: batch_embed_text
      x-stackQL-verb: exec
  /v1beta3/models:
    parameters: *ref_0
    get:
      description: Lists models available through the API.
      operationId: generativelanguage.models.list
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListModelsResponse"
      parameters:
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: models
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.models
  /v1beta3/models/{modelsId}:
    parameters: *ref_0
    get:
      description: Gets information about a specific Model.
      operationId: generativelanguage.models.get
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
      parameters:
        - in: path
          name: modelsId
          required: true
          schema:
            type: string
      x-stackQL-resource: models
      x-stackQL-method: get
      x-stackQL-verb: select
  /v1beta3/models/{modelsId}:countTextTokens:
    parameters: *ref_0
    post:
      description: Runs a model's tokenizer on a text and returns the token count.
      operationId: generativelanguage.models.countTextTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountTextTokensRequest"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountTextTokensResponse"
      parameters:
        - in: path
          name: modelsId
          required: true
          schema:
            type: string
      x-stackQL-resource: models
      x-stackQL-method: count_text_tokens
      x-stackQL-verb: exec
  /v1beta3/models/{modelsId}:generateMessage:
    parameters: *ref_0
    post:
      description: Generates a response from the model given an input `MessagePrompt`.
      operationId: generativelanguage.models.generateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateMessageRequest"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerateMessageResponse"
      parameters:
        - in: path
          name: modelsId
          required: true
          schema:
            type: string
      x-stackQL-resource: models
      x-stackQL-method: generate_message
      x-stackQL-verb: exec
  /v1beta3/models/{modelsId}:generateText:
    parameters: *ref_0
    post:
      description: Generates a response from the model given an input message.
      operationId: generativelanguage.models.generateText
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateTextRequest"
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerateTextResponse"
      parameters:
        - in: path
          name: modelsId
          required: true
          schema:
            type: string
      x-stackQL-resource: models
      x-stackQL-method: generate_text
      x-stackQL-verb: exec
