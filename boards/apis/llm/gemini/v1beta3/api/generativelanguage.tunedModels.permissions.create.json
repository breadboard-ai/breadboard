{
  "title": "generativelanguage.tunedModels.permissions.create",
  "description": "Create a permission to a specific resource.",
  "$schema": "https://raw.githubusercontent.com/breadboard-ai/breadboard/@google-labs/breadboard-schema@1.3.0/packages/schema/breadboard.schema.json",
  "version": "0.0.1",
  "edges": [
    {
      "from": "path-inputs",
      "to": "url",
      "out": "tunedModelsId",
      "in": "tunedModelsId",
      "optional": false
    },
    {
      "from": "path-inputs",
      "to": "url",
      "out": "oauth_token",
      "in": "oauth_token",
      "optional": true
    },
    {
      "from": "path-inputs",
      "to": "url",
      "out": "key",
      "in": "key",
      "optional": true
    },
    {
      "from": "path-inputs",
      "to": "url",
      "out": "fields",
      "in": "fields",
      "optional": true
    },
    {
      "from": "path-inputs",
      "to": "url",
      "out": "$.xgafv",
      "in": "$.xgafv",
      "optional": true
    },
    {
      "from": "path-inputs",
      "to": "url",
      "out": "quotaUser",
      "in": "quotaUser",
      "optional": true
    },
    {
      "from": "path-inputs",
      "to": "url",
      "out": "access_token",
      "in": "access_token",
      "optional": true
    },
    {
      "from": "path-inputs",
      "to": "url",
      "out": "upload_protocol",
      "in": "upload_protocol",
      "optional": true
    },
    {
      "from": "path-inputs",
      "to": "url",
      "out": "prettyPrint",
      "in": "prettyPrint",
      "optional": true
    },
    {
      "from": "path-inputs",
      "to": "url",
      "out": "uploadType",
      "in": "uploadType",
      "optional": true
    },
    {
      "from": "path-inputs",
      "to": "url",
      "out": "alt",
      "in": "alt",
      "optional": true
    },
    {
      "from": "path-inputs",
      "to": "url",
      "out": "callback",
      "in": "callback",
      "optional": true
    },
    {
      "from": "url",
      "to": "fetch",
      "out": "url",
      "in": "url"
    },
    {
      "from": "input-secrets",
      "to": "url",
      "out": "GENERATIVE_LANGUAGE_API_KEY",
      "in": "key"
    },
    {
      "from": "mergeHTTPHeaders",
      "to": "fetch",
      "out": "headers",
      "in": "headers"
    },
    {
      "from": "input-requestBody",
      "to": "fetch",
      "out": "requestBody",
      "in": "body"
    },
    {
      "from": "fetch",
      "to": "output",
      "out": "response",
      "in": "api_json_response"
    }
  ],
  "nodes": [
    {
      "id": "path-inputs",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "tunedModelsId": {
              "title": "tunedModelsId",
              "type": "string",
              "description": "The data for tunedModelsId"
            },
            "oauth_token": {
              "title": "oauth_token",
              "type": "string",
              "description": "OAuth 2.0 token for the current user."
            },
            "key": {
              "title": "key",
              "type": "string",
              "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
            },
            "fields": {
              "title": "fields",
              "type": "string",
              "description": "Selector specifying which fields to include in a partial response."
            },
            "$.xgafv": {
              "title": "$.xgafv",
              "type": "string",
              "description": "V1 error format."
            },
            "quotaUser": {
              "title": "quotaUser",
              "type": "string",
              "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
            },
            "access_token": {
              "title": "access_token",
              "type": "string",
              "description": "OAuth access token."
            },
            "upload_protocol": {
              "title": "upload_protocol",
              "type": "string",
              "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
            },
            "prettyPrint": {
              "title": "prettyPrint",
              "type": "boolean",
              "description": "Returns response with indentations and line breaks."
            },
            "uploadType": {
              "title": "uploadType",
              "type": "string",
              "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
            },
            "alt": {
              "title": "alt",
              "type": "string",
              "description": "Data format for response."
            },
            "callback": {
              "title": "callback",
              "type": "string",
              "description": "JSONP"
            }
          },
          "required": [
            "tunedModelsId"
          ]
        }
      }
    },
    {
      "id": "url",
      "type": "urlTemplate",
      "configuration": {
        "template": "https://generativelanguage.googleapis.com/v1beta3/tunedModels/{tunedModelsId}/permissions?{&tunedModelsId}{&oauth_token}{&key}{&fields}{&$.xgafv}{&quotaUser}{&access_token}{&upload_protocol}{&prettyPrint}{&uploadType}{&alt}{&callback}"
      }
    },
    {
      "id": "input-secrets",
      "type": "secrets",
      "configuration": {
        "keys": [
          "GENERATIVE_LANGUAGE_API_KEY"
        ]
      }
    },
    {
      "id": "mergeHTTPHeaders",
      "type": "runJavascript",
      "configuration": {
        "raw": true,
        "code": "function(inputs) {\n          const headers = {};\n\n          if (inputs.Authorization_Key != undefined) {\n            headers[\"Authorization\"] = \"Bearer \" + inputs.Authorization_Key;\n          }\n\n          if (\"Content-Type\" in inputs) {\n            headers[\"Content-Type\"] = inputs[\"Content-Type\"];\n          }\n          \n          return { headers };\n      }",
        "Content-Type": "application/json"
      }
    },
    {
      "id": "fetch",
      "type": "fetch",
      "configuration": {
        "method": "POST"
      }
    },
    {
      "id": "input-requestBody",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "requestBody": {
              "type": "object",
              "title": "requestBody",
              "description": "The request body for the API call (JSON)"
            }
          }
        }
      }
    },
    {
      "id": "output",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "api_json_response": {
              "type": "object",
              "title": "API response",
              "description": "The response from the API call (JSON)"
            }
          }
        }
      }
    }
  ],
  "kits": []
}