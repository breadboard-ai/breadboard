{"edges":[{"from":"fetch-4","to":"output-3","out":"response","in":"api_json_response"},{"from":"createFetchParameters","to":"fetch-4","out":"*","in":""},{"from":"input-1","to":"APIInput","out":"*","in":""},{"from":"input-1","to":"APIInput","out":"graph","in":"graph"},{"from":"input-1","to":"createFetchParameters","out":"item","in":"item"},{"from":"toAPIInputs","to":"createFetchParameters","out":"api_inputs","in":"api_inputs"},{"from":"APIInput","to":"toAPIInputs","out":"*","in":""}],"nodes":[{"id":"output-3","type":"output","configuration":{"schema":{"type":"object","properties":{"api_json_response":{"title":"response","description":"The response from the fetch request","type":["string","object"]}},"required":["api_json_response"]}}},{"id":"fetch-4","type":"fetch","configuration":{}},{"id":"createFetchParameters","type":"invoke","configuration":{"path":"#createFetchParameters"}},{"id":"input-1","type":"input","configuration":{"schema":{"type":"object","properties":{"graph":{"title":"graph","description":"The graph descriptor of the board to invoke.","type":"object"},"item":{"type":"string","title":"item"}},"required":["graph","item"]}}},{"id":"toAPIInputs","type":"invoke","configuration":{"path":"#toAPIInputs"}},{"id":"APIInput","type":"invoke","configuration":{}}],"kits":[],"graphs":{"createFetchParameters":{"edges":[{"from":"createFetchParameters-input","to":"createFetchParameters-run","out":"*"},{"from":"createFetchParameters-run","to":"createFetchParameters-output","out":"*"}],"nodes":[{"id":"createFetchParameters-input","type":"input","configuration":{}},{"id":"createFetchParameters-run","type":"runJavascript","configuration":{"code":"function createFetchParameters({ item, api_inputs }) {\n            const { method, parameters, secrets, requestBody } = item;\n            let { url } = item;\n            const queryStringParameters = {};\n            if (typeof api_inputs == \"string\") {\n                api_inputs = JSON.parse(api_inputs);\n            }\n            if (parameters != undefined &&\n                parameters.length > 0 &&\n                api_inputs == undefined) {\n                throw new Error(`Missing input for parameters ${JSON.stringify(parameters)}`);\n            }\n            for (const param of parameters) {\n                if (api_inputs && param.name in api_inputs == false && param.required) {\n                    throw new Error(`Missing required parameter ${param.name}`);\n                }\n                if (api_inputs && param.name in api_inputs == false) {\n                    // Parameter is not required and not in input, so we can skip it.\n                    continue;\n                }\n                if (param.in == \"path\") {\n                    // Replace the path parameter with the value from the input.\n                    url = url.replace(`{${param.name}}`, api_inputs[param.name]);\n                }\n                if (param.in == \"query\") {\n                    queryStringParameters[param.name] = api_inputs[param.name];\n                }\n            }\n            // If the method is POST or PUT, then we need to add the requestBody to the body.\n            // We are going to want to add in the secret somehow\n            const headers = {};\n            // Create the query string\n            const queryString = Object.entries(queryStringParameters)\n                .map(([key, value]) => {\n                return `${key}=${value}`;\n            })\n                .join(\"&\");\n            if (queryString.length > 0) {\n                url = `${url}?${queryString}`;\n            }\n            // Many APIs will require an authentication token but they don't define it in the Open API spec.\n            if (secrets != undefined && secrets[1].scheme == \"bearer\") {\n                const envKey = `${item.info.title\n                    .replace(/[^a-zA-Z0-9]+/g, \"_\")\n                    .toUpperCase()}_KEY`;\n                const envValue = api_inputs[envKey];\n                headers[\"Authorization\"] = `Bearer ${envValue}`;\n            }\n            let body = undefined;\n            if (requestBody) {\n                // We know the method needs a request Body.\n                // Find the first input that matches the valid required schema of the API.\n                let requestContentType;\n                // We can only handle JSON\n                if (\"requestBody\" in api_inputs) {\n                    body =\n                        typeof api_inputs[\"requestBody\"] == \"string\"\n                            ? JSON.parse(api_inputs[\"requestBody\"])\n                            : api_inputs[\"requestBody\"];\n                    requestContentType = \"application/json\";\n                }\n                if (body == undefined) {\n                    throw new Error(`Missing required request body for ${JSON.stringify(requestBody)}`);\n                }\n                headers[\"Content-Type\"] = requestContentType;\n            }\n            return { url, method, headers, body, queryString };\n        }","name":"createFetchParameters","raw":true}},{"id":"createFetchParameters-output","type":"output","configuration":{}}]},"toAPIInputs":{"edges":[{"from":"toAPIInputs-input","to":"toAPIInputs-run","out":"*"},{"from":"toAPIInputs-run","to":"toAPIInputs-output","out":"*"}],"nodes":[{"id":"toAPIInputs-input","type":"input","configuration":{}},{"id":"toAPIInputs-run","type":"runJavascript","configuration":{"code":"function toAPIInputs(item) {\n            return { api_inputs: item };\n        }","name":"toAPIInputs","raw":true}},{"id":"toAPIInputs-output","type":"output","configuration":{}}]}},"args":{"item":{"operationId":"createImage","url":"https://api.openai.com/v1/images/generations","method":"POST","summary":"Creates an image given a prompt.","parameters":[],"requestBody":{"application/json":{"schema":{"type":"object","properties":{"prompt":{"description":"A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.","type":"string","example":"A cute baby sea otter"},"model":{"anyOf":[{"type":"string"},{"type":"string","enum":["dall-e-2","dall-e-3"]}],"x-oaiTypeLabel":"string","default":"dall-e-2","example":"dall-e-3","nullable":true,"description":"The model to use for image generation."},"n":{"type":"integer","minimum":1,"maximum":10,"default":1,"example":1,"nullable":true,"description":"The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported."},"quality":{"type":"string","enum":["standard","hd"],"default":"standard","example":"standard","description":"The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`."},"response_format":{"type":"string","enum":["url","b64_json"],"default":"url","example":"url","nullable":true,"description":"The format in which the generated images are returned. Must be one of `url` or `b64_json`."},"size":{"type":"string","enum":["256x256","512x512","1024x1024","1792x1024","1024x1792"],"default":"1024x1024","example":"1024x1024","nullable":true,"description":"The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models."},"style":{"type":"string","enum":["vivid","natural"],"default":"vivid","example":"vivid","nullable":true,"description":"The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`."},"user":{"type":"string","example":"user-1234","description":"A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n"}},"required":["prompt"],"description":"Request POST data (format: application/json)"}}},"secrets":["ApiKeyAuth",{"type":"http","scheme":"bearer"}],"info":{"title":"OpenAI API","description":"The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.","version":"2.0.0","termsOfService":"https://openai.com/policies/terms-of-use","contact":{"name":"OpenAI Support","url":"https://help.openai.com/"},"license":{"name":"MIT","url":"https://github.com/openai/openai-openapi/blob/master/LICENSE"}}},"graph":{"title":"API Inputs for createImage","url":"#","nodes":[{"id":"input","type":"input","configuration":{"schema":{"type":"object","properties":{}}}},{"id":"output","type":"output"},{"id":"input-requestBody","type":"input","configuration":{"schema":{"type":"object","properties":{"requestBody":{"type":"object","title":"requestBody","description":"The request body for the API call (JSON)"}}}}},{"id":"input-secrets","type":"secrets","configuration":{"keys":["OPENAI_API_KEY"]}}],"edges":[{"from":"input-requestBody","out":"requestBody","to":"output","in":"requestBody"},{"from":"input-secrets","out":"OPENAI_API_KEY","to":"output","in":"OPENAI_API_KEY"}]}}}