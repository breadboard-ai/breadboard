{
  "title": "MCP Server",
  "description": "",
  "version": "0.0.1",
  "nodes": [],
  "edges": [],
  "metadata": {
    "icon": "generative",
    "visual": {
      "presentation": {
        "themes": {
          "f65ea9aa-b8c6-4c80-9667-a08c4f631013": {
            "themeColors": {
              "primaryColor": "#246db5",
              "secondaryColor": "#5cadff",
              "backgroundColor": "#ffffff",
              "textColor": "#1a1a1a",
              "primaryTextColor": "#ffffff"
            },
            "template": "basic",
            "splashScreen": {
              "storedData": {
                "handle": "/images/app/generic-flow.jpg",
                "mimeType": "image/jpeg"
              }
            }
          }
        },
        "theme": "f65ea9aa-b8c6-4c80-9667-a08c4f631013"
      }
    },
    "userModified": true,
    "tags": [
      "connector",
      "connector-singleton",
      "experimental",
      "published"
    ],
    "comments": [
      {
        "id": "comment-c74afa15",
        "text": "Intentionally Left Blank",
        "metadata": {
          "title": "Comment",
          "visual": {
            "x": 281,
            "y": 501,
            "collapsed": "expanded",
            "outputHeight": 0
          }
        }
      }
    ]
  },
  "modules": {
    "configurator": {
      "code": "/**\n * @fileoverview Add a description for your module here.\n */\nimport { createConfigurator } from \"./a2/connector-manager\";\nimport { rpc } from \"./a2/rpc\";\nimport { llm, ok } from \"./a2/utils\";\nexport { invoke as default, describe };\nconst CONNECTOR_TITLE = \"MCP Server\";\nconst { invoke, describe } = createConfigurator({\n    title: CONNECTOR_TITLE,\n    initialize: async () => {\n        return { title: CONNECTOR_TITLE, configuration: {} };\n    },\n    preview: async ({ configuration }) => {\n        const endpoint = configuration.endpoint;\n        if (!endpoint)\n            return [llm ``.asContent()];\n        const gettingInfo = await rpc({\n            path: \"/mnt/mcp/call/info\",\n            data: {\n                url: endpoint,\n                clientName: \"Breadboard\",\n            },\n        });\n        if (!ok(gettingInfo)) {\n            return [llm `${endpoint}`.asContent()];\n        }\n        return [\n            llm `**${gettingInfo.title || gettingInfo.name}**\\nMCP server at ${endpoint}`.asContent(),\n        ];\n    },\n    read: async ({ configuration }) => {\n        return {\n            schema: {\n                type: \"object\",\n                properties: {\n                    endpoint: {\n                        type: \"string\",\n                        title: \"URL\",\n                        description: \"The URL of the MCP Server's Streamable HTTP endpoint\",\n                    },\n                },\n            },\n            values: configuration,\n        };\n    },\n});\n"
    },
    "connector-tools": {
      "code": "/**\n * @fileoverview The tools export for the connector.\n */\nimport { createTools } from \"./a2/connector-manager\";\nimport { StreamableReporter } from \"./a2/output\";\nimport { rpc } from \"./a2/rpc\";\nimport { ok } from \"./a2/utils\";\nexport { invoke as default, describe };\nconst { invoke, describe } = createTools({\n    title: \"MCP Server\",\n    list: async (_id, info) => {\n        const reporter = new StreamableReporter({\n            title: `Calling MCP Server`,\n            icon: \"robot_server\",\n        });\n        try {\n            await reporter.start();\n            await reporter.sendUpdate(\"MCP Server Request\", { listTools: {} }, \"upload\");\n            const listingTools = await rpc({\n                path: \"/mnt/mcp/call/listTools\",\n                data: {\n                    url: info.configuration.endpoint,\n                    clientName: \"Breadboard\",\n                },\n            });\n            if (!ok(listingTools)) {\n                return reporter.sendError(listingTools);\n            }\n            await reporter.sendUpdate(\"MCP Server Response\", listingTools, \"download\");\n            // Transform to the ToolManager format.\n            const list = listingTools.map((item) => {\n                return {\n                    url: info.url,\n                    description: { ...item, title: item.name },\n                    passContext: false,\n                };\n            });\n            return { list };\n        }\n        finally {\n            await reporter.close();\n        }\n    },\n    invoke: async (_id, info, name, args) => {\n        const reporter = new StreamableReporter({\n            title: `Calling MCP Server`,\n            icon: \"robot_server\",\n        });\n        try {\n            await reporter.start();\n            await reporter.sendUpdate(\"MCP Server Request\", { callTool: { name, arguments: args } }, \"upload\");\n            const callingTool = await rpc({\n                path: \"/mnt/mcp/call/callTool\",\n                data: {\n                    url: info.configuration.endpoint,\n                    clientName: \"Breadboard\",\n                    name,\n                    arguments: args,\n                },\n            });\n            if (!ok(callingTool)) {\n                return reporter.sendError(callingTool);\n            }\n            await reporter.sendUpdate(\"MCP Server Response\", callingTool, \"download\");\n            return { result: JSON.stringify(callingTool) };\n        }\n        finally {\n            await reporter.close();\n        }\n    },\n});\n"
    },
    "types": {
      "code": "/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nexport {};\n"
    }
  },
  "imports": {
    "a2": {
      "url": "./a2.bgl.json"
    }
  },
  "exports": [
    "#module:configurator",
    "#module:connector-tools"
  ]
}