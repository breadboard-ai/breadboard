{
  "title": "MCP Server",
  "description": "",
  "version": "0.0.1",
  "nodes": [],
  "edges": [],
  "metadata": {
    "icon": "generative",
    "visual": {
      "presentation": {
        "themes": {
          "f65ea9aa-b8c6-4c80-9667-a08c4f631013": {
            "themeColors": {
              "primaryColor": "#246db5",
              "secondaryColor": "#5cadff",
              "backgroundColor": "#ffffff",
              "textColor": "#1a1a1a",
              "primaryTextColor": "#ffffff"
            },
            "template": "basic",
            "splashScreen": {
              "storedData": {
                "handle": "/images/app/generic-flow.jpg",
                "mimeType": "image/jpeg"
              }
            }
          }
        },
        "theme": "f65ea9aa-b8c6-4c80-9667-a08c4f631013"
      }
    },
    "userModified": true,
    "tags": [
      "connector",
      "connector-singleton",
      "experimental",
      "published"
    ],
    "comments": [
      {
        "id": "comment-c74afa15",
        "text": "Intentionally Left Blank",
        "metadata": {
          "title": "Comment",
          "visual": {
            "x": 281,
            "y": 501,
            "collapsed": "expanded",
            "outputHeight": 0
          }
        }
      }
    ]
  },
  "modules": {
    "configurator": {
      "code": "/**\n * @fileoverview Add a description for your module here.\n */\nimport { err, ok, llm } from \"./a2/utils\";\nimport { createConfigurator } from \"./a2/connector-manager\";\nimport { McpClient } from \"./mcp-client\";\nimport read from \"@read\";\nimport write from \"@write\";\nexport { invoke as default, describe };\nconst CONNECTOR_TITLE = \"MCP Server\";\nconst { invoke, describe } = createConfigurator({\n    title: CONNECTOR_TITLE,\n    initialize: async () => {\n        return { title: CONNECTOR_TITLE, configuration: {} };\n    },\n    preview: async ({ id, configuration }) => {\n        const endpoint = configuration.endpoint;\n        if (!endpoint)\n            return [llm ``.asContent()];\n        const client = new McpClient(id, endpoint);\n        const info = await client.connect();\n        if (!ok(info)) {\n            return [llm `${endpoint}`.asContent()];\n        }\n        return [\n            llm `**${info.serverInfo.name}**\\nMCP server at ${endpoint}`.asContent(),\n        ];\n    },\n    read: async ({ id, configuration }) => {\n        return {\n            schema: {\n                type: \"object\",\n                properties: {\n                    endpoint: {\n                        type: \"string\",\n                        title: \"URL\",\n                        description: \"The URL of the MCP Server's Streamable HTTP endpoint\",\n                    },\n                },\n            },\n            values: configuration,\n        };\n    },\n});\n",
      "metadata": {
        "title": "configurator",
        "source": {
          "code": "/**\n * @fileoverview Add a description for your module here.\n */\n\nimport { err, ok, llm } from \"./a2/utils\";\nimport { createConfigurator } from \"./a2/connector-manager\";\nimport { McpClient } from \"./mcp-client\";\n\nimport read from \"@read\";\nimport write from \"@write\";\n\nexport { invoke as default, describe };\n\nconst CONNECTOR_TITLE = \"MCP Server\";\n\ntype McpConfiguration = {\n  endpoint?: string;\n};\n\nconst { invoke, describe } = createConfigurator<McpConfiguration>({\n  title: CONNECTOR_TITLE,\n  initialize: async () => {\n    return { title: CONNECTOR_TITLE, configuration: {} };\n  },\n  preview: async ({ id, configuration }) => {\n    const endpoint = configuration.endpoint;\n    if (!endpoint) return [llm``.asContent()];\n    const client = new McpClient(id, endpoint);\n    const info = await client.connect();\n    if (!ok(info)) {\n      return [llm`${endpoint}`.asContent()];\n    }\n    return [\n      llm`**${info.serverInfo.name}**\\nMCP server at ${endpoint}`.asContent(),\n    ];\n  },\n  read: async ({ id, configuration }) => {\n    return {\n      schema: {\n        type: \"object\",\n        properties: {\n          endpoint: {\n            type: \"string\",\n            title: \"URL\",\n            description: \"The URL of the MCP Server's Streamable HTTP endpoint\",\n          },\n        },\n      },\n      values: configuration,\n    };\n  },\n});\n",
          "language": "typescript"
        },
        "description": "Add a description for your module here.",
        "runnable": false
      }
    },
    "mcp-client": {
      "code": "/**\n * @fileoverview Breadboard MCP Client\n */\nimport fetch from \"@fetch\";\nimport read from \"@read\";\nimport write from \"@write\";\nimport query from \"@query\";\nimport { ok, err } from \"./a2/utils\";\nexport { McpClient };\nfunction json(result) {\n    if (!ok(result))\n        return result;\n    const j = result.data?.at(-1)?.parts.at(0)?.json;\n    if (!j) {\n        return err(`Invalid result structure`);\n    }\n    return j;\n}\nfunction sse(result) {\n    const e = json(result);\n    if (!ok(e))\n        return e;\n    return e.data;\n}\nfunction rpc(result, status) {\n    const e = sse(result);\n    if (!ok(e))\n        return e;\n    return e.result;\n}\nclass McpClient {\n    connectorId;\n    url;\n    #id = 0;\n    #messageEndpoint = null;\n    constructor(connectorId, url) {\n        this.connectorId = connectorId;\n        this.url = url;\n    }\n    #path() {\n        return `/session/mcp/${this.connectorId}/stream`;\n    }\n    #newId() {\n        return ++this.#id;\n    }\n    async notify(body) {\n        const url = this.url;\n        const notifying = await fetch({\n            url,\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json,text/event-stream\",\n            },\n            body: JSON.stringify(body),\n        });\n        if (!notifying)\n            return notifying;\n    }\n    async call(body) {\n        const file = this.#path();\n        const url = this.url;\n        const id = this.#newId();\n        // send initialize request\n        const calling = await fetch({\n            url,\n            file,\n            stream: \"sse\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json,text/event-stream\",\n            },\n            body: JSON.stringify(body),\n        });\n        if (!ok(calling))\n            return calling;\n        const path = calling.response;\n        const response = rpc(await read({ path }), calling.status);\n        return response;\n    }\n    async connect() {\n        const file = this.#path();\n        const url = this.url;\n        const id = this.#newId();\n        // send initialize request\n        const initializing = await this.call({\n            jsonrpc: \"2.0\",\n            id,\n            method: \"initialize\",\n            params: {\n                protocolVersion: \"2024-11-05\",\n                clientInfo: {\n                    name: \"Breadboard\",\n                    version: \"1.0.0\",\n                },\n                capabilities: {\n                    tools: {},\n                },\n            },\n        });\n        if (!ok(initializing))\n            return initializing;\n        const confirmInitialization = await this.notify({\n            jsonrpc: \"2.0\",\n            method: \"notifications/initialized\",\n        });\n        return initializing;\n    }\n    async listTools() {\n        const url = this.url;\n        const id = this.#newId();\n        const file = this.#path();\n        // get list of tools\n        const askToListTools = await this.call({\n            jsonrpc: \"2.0\",\n            id,\n            method: \"tools/list\",\n        });\n        if (!ok(askToListTools))\n            return askToListTools;\n        return askToListTools.tools;\n    }\n    async callTool(name, args) {\n        const url = this.url;\n        const id = this.#newId();\n        const file = this.#path();\n        // Call tool\n        const askToCallTool = await this.call({\n            jsonrpc: \"2.0\",\n            id,\n            method: \"tools/call\",\n            params: { name, arguments: args },\n        });\n        if (!ok(askToCallTool))\n            return askToCallTool;\n        return askToCallTool.content;\n    }\n    async disconnect() {\n        const path = this.#path();\n        const deleting = await write({ path, delete: true });\n        if (!ok(deleting))\n            return deleting;\n    }\n}\n",
      "metadata": {
        "title": "mcp-client",
        "source": {
          "code": "/**\n * @fileoverview Breadboard MCP Client\n */\n\nimport fetch from \"@fetch\";\nimport read from \"@read\";\nimport write from \"@write\";\nimport query from \"@query\";\n\nimport { ok, err } from \"./a2/utils\";\n\nexport { McpClient };\n\nexport type InitializeResponse = {\n  capabilities: {\n    resources?: {};\n    tools?: {};\n    prompts?: {};\n  };\n  protocolVersion: string;\n  serverInfo: {\n    name: string;\n    version: string;\n  };\n};\n\nexport type ListToolsTool = {\n  name: string;\n  description: string;\n  // Schema is Breadboard-specific, but this should work well enough\n  inputSchema: Schema;\n};\n\nexport type ListToolsResponse = {\n  tools: ListToolsTool[];\n};\n\nexport type CallToolContentText = {\n  type: \"text\";\n  text: string;\n};\n\nexport type CallToolContentImage = {\n  type: \"image\";\n  data: string;\n  mimeType: string;\n};\n\nexport type CallToolContent = CallToolContentText | CallToolContentImage;\n\nexport type CallToolResponse = {\n  content: CallToolContent[];\n};\n\nexport type MCPResponse =\n  | InitializeResponse\n  | ListToolsResponse\n  | CallToolResponse;\n\nexport type JsonRpcResponse<M extends MCPResponse> = {\n  id: number;\n  jsonrpc: \"2.0\";\n  result: M;\n};\n\nexport type ServerSentEvent<T extends JsonSerializable = JsonSerializable> = {\n  data: T;\n  event: string;\n  id: string | null;\n  retry: string | null;\n};\n\nexport type SavedMessageEndpoint = {\n  endpoint: string;\n};\n\nfunction json<T>(result: FileSystemReadResult) {\n  if (!ok(result)) return result;\n  const j = (result.data?.at(-1)?.parts.at(0) as JSONPart)?.json;\n  if (!j) {\n    return err(`Invalid result structure`);\n  }\n  return j as T;\n}\n\nfunction sse<T extends JsonSerializable>(result: FileSystemReadResult) {\n  const e = json<ServerSentEvent<T>>(result);\n  if (!ok(e)) return e;\n  return e.data;\n}\n\nfunction rpc<M extends MCPResponse>(\n  result: FileSystemReadResult,\n  status: number\n) {\n  const e = sse<JsonRpcResponse<M>>(result);\n  if (!ok(e)) return e;\n  return e.result;\n}\n\nclass McpClient {\n  #id: number = 0;\n  #messageEndpoint: string | null = null;\n\n  constructor(\n    public readonly connectorId: string,\n    public readonly url: string\n  ) {}\n\n  #path(): FileSystemReadWritePath {\n    return `/session/mcp/${this.connectorId}/stream`;\n  }\n\n  #newId() {\n    return ++this.#id;\n  }\n\n  async notify(body: unknown): Promise<Outcome<void>> {\n    const url = this.url;\n    const notifying = await fetch({\n      url,\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json,text/event-stream\",\n      },\n      body: JSON.stringify(body),\n    });\n    if (!notifying) return notifying;\n  }\n\n  async call<T extends MCPResponse>(body: unknown): Promise<Outcome<T>> {\n    const file = this.#path();\n    const url = this.url;\n\n    const id = this.#newId();\n    // send initialize request\n    const calling = await fetch({\n      url,\n      file,\n      stream: \"sse\",\n\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json,text/event-stream\",\n      },\n\n      body: JSON.stringify(body),\n    });\n    if (!ok(calling)) return calling;\n    const path = calling.response as FileSystemReadWritePath;\n    const response = rpc<T>(await read({ path }), calling.status);\n    return response;\n  }\n\n  async connect(): Promise<Outcome<InitializeResponse>> {\n    const file = this.#path();\n    const url = this.url;\n\n    const id = this.#newId();\n    // send initialize request\n    const initializing = await this.call<InitializeResponse>({\n      jsonrpc: \"2.0\",\n      id,\n      method: \"initialize\",\n      params: {\n        protocolVersion: \"2024-11-05\",\n        clientInfo: {\n          name: \"Breadboard\",\n          version: \"1.0.0\",\n        },\n        capabilities: {\n          tools: {},\n        },\n      },\n    });\n    if (!ok(initializing)) return initializing;\n\n    const confirmInitialization = await this.notify({\n      jsonrpc: \"2.0\",\n      method: \"notifications/initialized\",\n    });\n    return initializing;\n  }\n\n  async listTools(): Promise<Outcome<ListToolsTool[]>> {\n    const url = this.url;\n    const id = this.#newId();\n    const file = this.#path();\n    // get list of tools\n    const askToListTools = await this.call<ListToolsResponse>({\n      jsonrpc: \"2.0\",\n      id,\n      method: \"tools/list\",\n    });\n    if (!ok(askToListTools)) return askToListTools;\n    return askToListTools.tools;\n  }\n\n  async callTool(\n    name: string,\n    args: Record<string, JsonSerializable>\n  ): Promise<Outcome<CallToolContent[]>> {\n    const url = this.url;\n    const id = this.#newId();\n    const file = this.#path();\n\n    // Call tool\n    const askToCallTool = await this.call<CallToolResponse>({\n      jsonrpc: \"2.0\",\n      id,\n      method: \"tools/call\",\n      params: { name, arguments: args },\n    });\n    if (!ok(askToCallTool)) return askToCallTool;\n    return askToCallTool.content;\n  }\n\n  async disconnect(): Promise<Outcome<void>> {\n    const path = this.#path();\n    const deleting = await write({ path, delete: true });\n    if (!ok(deleting)) return deleting;\n  }\n}\n",
          "language": "typescript"
        },
        "description": "Breadboard MCP Client",
        "runnable": false
      }
    },
    "connector-tools": {
      "code": "/**\n * @fileoverview The tools export for the connector.\n */\nimport { err, ok } from \"./a2/utils\";\nimport { McpClient } from \"./mcp-client\";\nimport { createTools } from \"./a2/connector-manager\";\nexport { invoke as default, describe };\nasync function getClient(id, info) {\n    const url = info.configuration.endpoint;\n    const client = new McpClient(id, url);\n    const connecting = await client.connect();\n    if (!ok(connecting))\n        return connecting;\n    return client;\n}\nconst { invoke, describe } = createTools({\n    title: \"MCP Server\",\n    list: async (id, info) => {\n        const client = await getClient(id, info);\n        if (!ok(client))\n            return client;\n        const listing = await client.listTools();\n        if (!ok(listing))\n            return listing;\n        // Transform to the ToolManager format.\n        const list = listing.map((item) => {\n            return {\n                url: info.url,\n                description: { ...item, title: item.name },\n                passContext: false,\n            };\n        });\n        return { list };\n    },\n    invoke: async (id, info, name, args) => {\n        const client = await getClient(id, info);\n        if (!ok(client))\n            return client;\n        // const connecting = await client.connect();\n        // if (!ok(connecting)) return connecting;\n        const invoking = await client.callTool(name, args);\n        if (!ok(invoking))\n            return invoking;\n        return { result: JSON.stringify(invoking) };\n    },\n});\n",
      "metadata": {
        "title": "connector-tools",
        "source": {
          "code": "/**\n * @fileoverview The tools export for the connector.\n */\n\nimport { err, ok } from \"./a2/utils\";\nimport { McpClient } from \"./mcp-client\";\nimport type {\n  ListToolResult,\n  ListMethodOutput,\n  InvokeMethodOutput,\n  ConnectorInfo,\n} from \"./a2/connector-manager\";\nimport { createTools } from \"./a2/connector-manager\";\n\nexport { invoke as default, describe };\n\ntype Configuration = {\n  endpoint: string;\n};\n\nasync function getClient(\n  id: string,\n  info: ConnectorInfo<Configuration>\n): Promise<Outcome<McpClient>> {\n  const url = info.configuration.endpoint;\n  const client = new McpClient(id, url);\n  const connecting = await client.connect();\n  if (!ok(connecting)) return connecting;\n  return client;\n}\n\nconst { invoke, describe } = createTools<Configuration>({\n  title: \"MCP Server\",\n  list: async (id, info) => {\n    const client = await getClient(id, info);\n    if (!ok(client)) return client;\n    const listing = await client.listTools();\n    if (!ok(listing)) return listing;\n\n    // Transform to the ToolManager format.\n    const list = listing.map<ListToolResult>((item) => {\n      return {\n        url: info.url,\n        description: { ...item, title: item.name },\n        passContext: false,\n      };\n    });\n    return { list };\n  },\n  invoke: async (id, info, name, args) => {\n    const client = await getClient(id, info);\n    if (!ok(client)) return client;\n    // const connecting = await client.connect();\n    // if (!ok(connecting)) return connecting;\n    const invoking = await client.callTool(name, args);\n    if (!ok(invoking)) return invoking;\n    return { result: JSON.stringify(invoking) };\n  },\n});\n",
          "language": "typescript"
        },
        "description": "The tools export for the connector.",
        "runnable": false
      }
    }
  },
  "imports": {
    "a2": {
      "url": "./a2.bgl.json"
    }
  },
  "exports": [
    "#module:configurator",
    "#module:connector-tools"
  ]
}