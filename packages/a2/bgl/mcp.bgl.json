{
  "title": "MCP Server",
  "description": "",
  "version": "0.0.1",
  "nodes": [],
  "edges": [],
  "metadata": {
    "icon": "generative",
    "visual": {
      "presentation": {
        "themes": {
          "f65ea9aa-b8c6-4c80-9667-a08c4f631013": {
            "themeColors": {
              "primaryColor": "#246db5",
              "secondaryColor": "#5cadff",
              "backgroundColor": "#ffffff",
              "textColor": "#1a1a1a",
              "primaryTextColor": "#ffffff"
            },
            "template": "basic",
            "splashScreen": {
              "storedData": {
                "handle": "/images/app/generic-flow.jpg",
                "mimeType": "image/jpeg"
              }
            }
          }
        },
        "theme": "f65ea9aa-b8c6-4c80-9667-a08c4f631013"
      }
    },
    "userModified": true,
    "tags": [
      "connector",
      "connector-singleton",
      "experimental",
      "published"
    ],
    "comments": [
      {
        "id": "comment-c74afa15",
        "text": "Intentionally Left Blank",
        "metadata": {
          "title": "Comment",
          "visual": {
            "x": 281,
            "y": 501,
            "collapsed": "expanded",
            "outputHeight": 0
          }
        }
      }
    ]
  },
  "modules": {
    "configurator": {
      "code": "/**\n * @fileoverview Add a description for your module here.\n */\nimport { createConfigurator } from \"./a2/connector-manager\";\nimport { llm, ok } from \"./a2/utils\";\nimport { McpClient } from \"./mcp-client\";\nexport { invoke as default, describe };\nconst CONNECTOR_TITLE = \"MCP Server\";\nconst { invoke, describe } = createConfigurator({\n    title: CONNECTOR_TITLE,\n    initialize: async () => {\n        return { title: CONNECTOR_TITLE, configuration: {} };\n    },\n    preview: async ({ id, configuration }) => {\n        const endpoint = configuration.endpoint;\n        if (!endpoint)\n            return [llm ``.asContent()];\n        const client = new McpClient(id, endpoint);\n        const info = await client.connect();\n        if (!ok(info)) {\n            return [llm `${endpoint}`.asContent()];\n        }\n        return [\n            llm `**${info.serverInfo.name}**\\nMCP server at ${endpoint}`.asContent(),\n        ];\n    },\n    read: async ({ configuration }) => {\n        return {\n            schema: {\n                type: \"object\",\n                properties: {\n                    endpoint: {\n                        type: \"string\",\n                        title: \"URL\",\n                        description: \"The URL of the MCP Server's Streamable HTTP endpoint\",\n                    },\n                },\n            },\n            values: configuration,\n        };\n    },\n});\n//# sourceMappingURL=configurator.js.map"
    },
    "connector-tools": {
      "code": "/**\n * @fileoverview The tools export for the connector.\n */\nimport { createTools } from \"./a2/connector-manager\";\nimport { ok } from \"./a2/utils\";\nimport { McpClient } from \"./mcp-client\";\nexport { invoke as default, describe };\nasync function getClient(id, info) {\n    const url = info.configuration.endpoint;\n    const client = new McpClient(id, url);\n    const connecting = await client.connect();\n    if (!ok(connecting))\n        return connecting;\n    return client;\n}\nconst { invoke, describe } = createTools({\n    title: \"MCP Server\",\n    list: async (id, info) => {\n        const client = await getClient(id, info);\n        if (!ok(client))\n            return client;\n        const listing = await client.listTools();\n        if (!ok(listing))\n            return listing;\n        // Transform to the ToolManager format.\n        const list = listing.map((item) => {\n            return {\n                url: info.url,\n                description: { ...item, title: item.name },\n                passContext: false,\n            };\n        });\n        return { list };\n    },\n    invoke: async (id, info, name, args) => {\n        const client = await getClient(id, info);\n        if (!ok(client))\n            return client;\n        // const connecting = await client.connect();\n        // if (!ok(connecting)) return connecting;\n        const invoking = await client.callTool(name, args);\n        if (!ok(invoking))\n            return invoking;\n        return { result: JSON.stringify(invoking) };\n    },\n});\n//# sourceMappingURL=connector-tools.js.map"
    },
    "mcp-client": {
      "code": "/**\n * @fileoverview Breadboard MCP Client\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _McpClient_instances, _McpClient_id, _McpClient_messageEndpoint, _McpClient_path, _McpClient_newId;\nimport fetch from \"@fetch\";\nimport read from \"@read\";\nimport write from \"@write\";\nimport { err, ok } from \"./a2/utils\";\nexport { McpClient };\nfunction json(result) {\n    if (!ok(result))\n        return result;\n    const j = result.data?.at(-1)?.parts.at(0)?.json;\n    if (!j) {\n        return err(`Invalid result structure`);\n    }\n    return j;\n}\nfunction sse(result) {\n    const e = json(result);\n    if (!ok(e))\n        return e;\n    return e.data;\n}\nfunction rpc(result, _status) {\n    const e = sse(result);\n    if (!ok(e))\n        return e;\n    return e.result;\n}\nclass McpClient {\n    constructor(connectorId, url) {\n        _McpClient_instances.add(this);\n        this.connectorId = connectorId;\n        this.url = url;\n        _McpClient_id.set(this, 0);\n        _McpClient_messageEndpoint.set(this, null);\n    }\n    async notify(body) {\n        const url = this.url;\n        const notifying = await fetch({\n            url,\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json,text/event-stream\",\n            },\n            body: JSON.stringify(body),\n        });\n        if (!notifying)\n            return notifying;\n    }\n    async call(body) {\n        const file = __classPrivateFieldGet(this, _McpClient_instances, \"m\", _McpClient_path).call(this);\n        const url = this.url;\n        // send initialize request\n        const calling = await fetch({\n            url,\n            file,\n            stream: \"sse\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json,text/event-stream\",\n            },\n            body: JSON.stringify(body),\n        });\n        if (!ok(calling))\n            return calling;\n        const path = calling.response;\n        const response = rpc(await read({ path }), calling.status);\n        return response;\n    }\n    async connect() {\n        const id = __classPrivateFieldGet(this, _McpClient_instances, \"m\", _McpClient_newId).call(this);\n        // send initialize request\n        const initializing = await this.call({\n            jsonrpc: \"2.0\",\n            id,\n            method: \"initialize\",\n            params: {\n                protocolVersion: \"2024-11-05\",\n                clientInfo: {\n                    name: \"Breadboard\",\n                    version: \"1.0.0\",\n                },\n                capabilities: {\n                    tools: {},\n                },\n            },\n        });\n        if (!ok(initializing))\n            return initializing;\n        await this.notify({\n            jsonrpc: \"2.0\",\n            method: \"notifications/initialized\",\n        });\n        return initializing;\n    }\n    async listTools() {\n        const id = __classPrivateFieldGet(this, _McpClient_instances, \"m\", _McpClient_newId).call(this);\n        // get list of tools\n        const askToListTools = await this.call({\n            jsonrpc: \"2.0\",\n            id,\n            method: \"tools/list\",\n        });\n        if (!ok(askToListTools))\n            return askToListTools;\n        return askToListTools.tools;\n    }\n    async callTool(name, args) {\n        const id = __classPrivateFieldGet(this, _McpClient_instances, \"m\", _McpClient_newId).call(this);\n        // Call tool\n        const askToCallTool = await this.call({\n            jsonrpc: \"2.0\",\n            id,\n            method: \"tools/call\",\n            params: { name, arguments: args },\n        });\n        if (!ok(askToCallTool))\n            return askToCallTool;\n        return askToCallTool.content;\n    }\n    async disconnect() {\n        const path = __classPrivateFieldGet(this, _McpClient_instances, \"m\", _McpClient_path).call(this);\n        const deleting = await write({ path, delete: true });\n        if (!ok(deleting))\n            return deleting;\n    }\n}\n_McpClient_id = new WeakMap(), _McpClient_messageEndpoint = new WeakMap(), _McpClient_instances = new WeakSet(), _McpClient_path = function _McpClient_path() {\n    return `/session/mcp/${this.connectorId}/stream`;\n}, _McpClient_newId = function _McpClient_newId() {\n    var _a;\n    return __classPrivateFieldSet(this, _McpClient_id, (_a = __classPrivateFieldGet(this, _McpClient_id, \"f\"), ++_a), \"f\");\n};\n//# sourceMappingURL=mcp-client.js.map"
    }
  },
  "imports": {
    "a2": {
      "url": "./a2.bgl.json"
    }
  },
  "exports": [
    "#module:configurator",
    "#module:connector-tools"
  ]
}