{
  "title": "A2 Generate",
  "description": "",
  "version": "0.0.1",
  "nodes": [],
  "edges": [],
  "metadata": {
    "comments": [
      {
        "id": "comment-cc94afe8",
        "text": "Intentionally Left Blank",
        "metadata": {
          "title": "Comment",
          "visual": {
            "x": 531,
            "y": 374,
            "collapsed": "expanded",
            "outputHeight": 0
          }
        }
      }
    ],
    "visual": {
      "presentation": {
        "themes": {
          "5f3ca599-8fee-46fb-951f-0d47b16a6d56": {
            "themeColors": {
              "primaryColor": "#246db5",
              "secondaryColor": "#5cadff",
              "backgroundColor": "#ffffff",
              "textColor": "#1a1a1a",
              "primaryTextColor": "#ffffff"
            },
            "template": "basic",
            "splashScreen": {
              "storedData": {
                "handle": "/images/app/generic-flow.jpg",
                "mimeType": "image/jpeg"
              }
            }
          }
        },
        "theme": "5f3ca599-8fee-46fb-951f-0d47b16a6d56"
      }
    },
    "tags": [
      "published",
      "tool",
      "component"
    ],
    "userModified": true
  },
  "imports": {
    "a2": {
      "url": "./a2.bgl.json"
    }
  },
  "modules": {
    "main": {
      "code": "/**\n * @fileoverview Add a description for your module here.\n */\nimport describeGraph from \"@describe\";\nimport invokeGraph from \"@invoke\";\nimport { ok } from \"./a2/utils\";\nimport {} from \"./a2/common\";\nexport { invoke as default, describe };\nconst MODES = [\n    {\n        id: \"text\",\n        url: \"embed://a2/generate-text.bgl.json#daf082ca-c1aa-4aff-b2c8-abeb984ab66c\",\n        title: \"Gemini 2.0 Flash\",\n        description: \"For everyday tasks, plus more\",\n        icon: \"generative-text\",\n    },\n    {\n        id: \"think\",\n        url: \"embed://a2/go-over-list.bgl.json#module:main\",\n        title: \"Plan and Execute with Gemini 2.0 Flash\",\n        description: \"Plans and executes complex tasks\",\n        icon: \"generative\",\n    },\n    {\n        id: \"image-gen\",\n        url: \"embed://a2/a2.bgl.json#module:image-generator\",\n        title: \"Imagen 3\",\n        description: \"Generates images from text\",\n        icon: \"generative-image\",\n    },\n    {\n        id: \"image\",\n        url: \"embed://a2/a2.bgl.json#module:image-editor\",\n        title: \"Gemini 2.0 Flash: Image Generation\",\n        description: \"Generates images from text and images\",\n        icon: \"generative-image\",\n    },\n    {\n        id: \"audio\",\n        url: \"embed://a2/audio-generator.bgl.json#module:main\",\n        title: \"AudioLM\",\n        description: \"Generates speech from text\",\n        icon: \"generative-audio\",\n    },\n    {\n        id: \"video\",\n        url: \"embed://a2/video-generator.bgl.json#module:main\",\n        title: \"Veo 2\",\n        description: \"Generates videos from text and images\",\n        icon: \"generative-video\",\n    },\n];\nconst DEFAULT_MODE = MODES[0];\nconst modeMap = new Map(MODES.map((mode) => [mode.id, mode]));\nconst PROMPT_PORT = \"config$prompt\";\nconst ASK_USER_PORT = \"config$ask-user\";\nconst LIST_PORT = \"config$list\";\n// Maps the prompt port to various names of the other ports.\nconst portMapForward = new Map([\n    [\n        MODES[0].id,\n        new Map([\n            [PROMPT_PORT, \"description\"],\n            [ASK_USER_PORT, \"p-chat\"],\n            [LIST_PORT, \"p-list\"],\n        ]),\n    ],\n    [\n        MODES[1].id,\n        new Map([\n            [PROMPT_PORT, \"plan\"],\n            [LIST_PORT, \"z-list\"],\n        ]),\n    ],\n    [MODES[2].id, new Map([[PROMPT_PORT, \"instruction\"]])],\n    [MODES[3].id, new Map([[PROMPT_PORT, \"instruction\"]])],\n    [MODES[4].id, new Map([[PROMPT_PORT, \"text\"]])],\n    [MODES[5].id, new Map([[PROMPT_PORT, \"instruction\"]])],\n]);\nconst portMapReverse = new Map(Array.from(portMapForward.entries()).map(([mode, map]) => {\n    const inverted = new Map();\n    for (const [from, to] of map) {\n        inverted.set(to, from);\n    }\n    return [mode, inverted];\n}));\nfunction translate(ports, map) {\n    return Object.fromEntries(Object.entries(ports).map(([name, value]) => [map.get(name) || name, value]));\n}\nfunction forwardPorts(mode, ports) {\n    const forwardingMap = portMapForward.get(mode);\n    if (!forwardingMap)\n        return ports;\n    return translate(ports, forwardingMap);\n}\nfunction receivePorts(mode, ports) {\n    const reverseMap = portMapReverse.get(mode);\n    if (!reverseMap)\n        return ports;\n    return translate(ports, reverseMap);\n}\nfunction getMode(modeId) {\n    return modeMap.get(modeId || DEFAULT_MODE.id) || DEFAULT_MODE;\n}\nasync function invoke({ \"generation-mode\": mode, ...rest }) {\n    const { url: $board, id } = getMode(mode);\n    return await invokeGraph({ $board, ...forwardPorts(id, rest) });\n}\nasync function describe({ inputs: { \"generation-mode\": mode, ...rest }, asType, }) {\n    const metadata = {\n        title: \"Generate\",\n        description: \"Uses Gemini to generate content and call tools\",\n        metadata: {\n            icon: \"generative\",\n            tags: [\"quick-access\", \"generative\", \"generate\"],\n            order: 1,\n        },\n    };\n    // When asked for to be described as type, skip trying to\n    // get the detailed schema and just return metadata.\n    if (asType) {\n        return {\n            ...metadata,\n            inputSchema: {},\n            outputSchema: {},\n        };\n    }\n    const { url, id } = getMode(mode);\n    const describing = await describeGraph({ url, inputs: rest });\n    let modeSchema = {};\n    if (ok(describing)) {\n        modeSchema = receivePorts(id, describing.inputSchema.properties || modeSchema);\n    }\n    return {\n        title: \"Generate\",\n        description: \"Uses Gemini to generate content and call tools\",\n        metadata: {\n            icon: \"generative\",\n            tags: [\"quick-access\", \"generative\", \"generate\"],\n            order: 1,\n        },\n        inputSchema: {\n            type: \"object\",\n            properties: {\n                \"generation-mode\": {\n                    type: \"string\",\n                    title: \"Mode\",\n                    enum: MODES,\n                    behavior: [\"config\", \"hint-preview\", \"reactive\", \"hint-controller\"],\n                },\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context in\",\n                    behavior: [\"main-port\"],\n                },\n                ...modeSchema,\n            },\n            behavior: [\"at-wireable\"],\n        },\n        outputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context out\",\n                    behavior: [\"main-port\"],\n                },\n            },\n        },\n    };\n}\n",
      "metadata": {
        "title": "main",
        "source": {
          "code": "/**\n * @fileoverview Add a description for your module here.\n */\n\nimport describeGraph from \"@describe\";\nimport invokeGraph from \"@invoke\";\n\nimport { ok } from \"./a2/utils\";\nimport { type Params } from \"./a2/common\";\n\nexport { invoke as default, describe };\n\ntype GenerationModes = (typeof MODES)[number];\n\ntype ModeId = GenerationModes[\"id\"];\n\ntype Inputs = {\n  context?: LLMContent[];\n  \"generation-mode\"?: ModeId;\n} & Record<string, unknown>;\n\ntype DescribeInputs = {\n  inputs: Inputs;\n  asType?: boolean;\n};\n\nconst MODES = [\n  {\n    id: \"text\",\n    url: \"embed://a2/generate-text.bgl.json#daf082ca-c1aa-4aff-b2c8-abeb984ab66c\",\n    title: \"Gemini 2.0 Flash\",\n    description: \"For everyday tasks, plus more\",\n    icon: \"generative-text\",\n  },\n  {\n    id: \"think\",\n    url: \"embed://a2/go-over-list.bgl.json#module:main\",\n    title: \"Plan and Execute with Gemini 2.0 Flash\",\n    description: \"Plans and executes complex tasks\",\n    icon: \"generative\",\n  },\n  {\n    id: \"image-gen\",\n    url: \"embed://a2/a2.bgl.json#module:image-generator\",\n    title: \"Imagen 3\",\n    description: \"Generates images from text\",\n    icon: \"generative-image\",\n  },\n  {\n    id: \"image\",\n    url: \"embed://a2/a2.bgl.json#module:image-editor\",\n    title: \"Gemini 2.0 Flash: Image Generation\",\n    description: \"Generates images from text and images\",\n    icon: \"generative-image\",\n  },\n  {\n    id: \"audio\",\n    url: \"embed://a2/audio-generator.bgl.json#module:main\",\n    title: \"AudioLM\",\n    description: \"Generates speech from text\",\n    icon: \"generative-audio\",\n  },\n  {\n    id: \"video\",\n    url: \"embed://a2/video-generator.bgl.json#module:main\",\n    title: \"Veo 2\",\n    description: \"Generates videos from text and images\",\n    icon: \"generative-video\",\n  },\n] as const;\n\nconst DEFAULT_MODE = MODES[0];\n\nconst modeMap = new Map(MODES.map((mode) => [mode.id, mode]));\n\nconst PROMPT_PORT = \"config$prompt\";\nconst ASK_USER_PORT = \"config$ask-user\";\nconst LIST_PORT = \"config$list\";\n\n// Maps the prompt port to various names of the other ports.\nconst portMapForward = new Map<ModeId, Map<string, string>>([\n  [\n    MODES[0].id,\n    new Map([\n      [PROMPT_PORT, \"description\"],\n      [ASK_USER_PORT, \"p-chat\"],\n      [LIST_PORT, \"p-list\"],\n    ]),\n  ],\n  [\n    MODES[1].id,\n    new Map([\n      [PROMPT_PORT, \"plan\"],\n      [LIST_PORT, \"z-list\"],\n    ]),\n  ],\n  [MODES[2].id, new Map([[PROMPT_PORT, \"instruction\"]])],\n  [MODES[3].id, new Map([[PROMPT_PORT, \"instruction\"]])],\n  [MODES[4].id, new Map([[PROMPT_PORT, \"text\"]])],\n  [MODES[5].id, new Map([[PROMPT_PORT, \"instruction\"]])],\n]);\n\nconst portMapReverse = new Map(\n  Array.from(portMapForward.entries()).map(([mode, map]) => {\n    const inverted = new Map<string, string>();\n    for (const [from, to] of map) {\n      inverted.set(to, from);\n    }\n    return [mode, inverted];\n  })\n);\n\nfunction translate<T extends Record<string, unknown>>(\n  ports: T,\n  map: Map<string, string>\n): T {\n  return Object.fromEntries(\n    Object.entries(ports).map(([name, value]) => [map.get(name) || name, value])\n  ) as T;\n}\n\nfunction forwardPorts<T extends Record<string, unknown>>(\n  mode: ModeId,\n  ports: T\n): T {\n  const forwardingMap = portMapForward.get(mode);\n  if (!forwardingMap) return ports;\n  return translate(ports, forwardingMap);\n}\n\nfunction receivePorts<T extends Record<string, unknown>>(\n  mode: ModeId,\n  ports: T\n): T {\n  const reverseMap = portMapReverse.get(mode);\n  if (!reverseMap) return ports;\n  return translate(ports, reverseMap);\n}\n\nfunction getMode(modeId: ModeId | undefined): GenerationModes {\n  return modeMap.get(modeId || DEFAULT_MODE.id) || DEFAULT_MODE;\n}\n\nasync function invoke({ \"generation-mode\": mode, ...rest }: Inputs) {\n  const { url: $board, id } = getMode(mode);\n  return await invokeGraph({ $board, ...forwardPorts(id, rest) });\n}\n\nasync function describe({\n  inputs: { \"generation-mode\": mode, ...rest },\n  asType,\n}: DescribeInputs) {\n  const metadata = {\n    title: \"Generate\",\n    description: \"Uses Gemini to generate content and call tools\",\n    metadata: {\n      icon: \"generative\",\n      tags: [\"quick-access\", \"generative\", \"generate\"],\n      order: 1,\n    },\n  };\n\n  // When asked for to be described as type, skip trying to\n  // get the detailed schema and just return metadata.\n  if (asType) {\n    return {\n      ...metadata,\n      inputSchema: {},\n      outputSchema: {},\n    };\n  }\n\n  const { url, id } = getMode(mode);\n  const describing = await describeGraph({ url, inputs: rest });\n  let modeSchema: Record<string, Schema> = {};\n  if (ok(describing)) {\n    modeSchema = receivePorts(\n      id,\n      describing.inputSchema.properties || modeSchema\n    );\n  }\n\n  return {\n    title: \"Generate\",\n    description: \"Uses Gemini to generate content and call tools\",\n    metadata: {\n      icon: \"generative\",\n      tags: [\"quick-access\", \"generative\", \"generate\"],\n      order: 1,\n    },\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        \"generation-mode\": {\n          type: \"string\",\n          title: \"Mode\",\n          enum: MODES as unknown as SchemaEnumValue[],\n          behavior: [\"config\", \"hint-preview\", \"reactive\", \"hint-controller\"],\n        },\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context in\",\n          behavior: [\"main-port\"],\n        },\n        ...modeSchema,\n      },\n      behavior: [\"at-wireable\"],\n    } satisfies Schema,\n    outputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context out\",\n          behavior: [\"main-port\"],\n        },\n      },\n    } satisfies Schema,\n  };\n}\n",
          "language": "typescript"
        },
        "description": "Add a description for your module here.",
        "runnable": false
      }
    }
  },
  "exports": [
    "#module:main"
  ]
}