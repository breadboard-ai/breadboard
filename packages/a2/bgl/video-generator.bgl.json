{
  "title": "A2 Video Generation",
  "description": "",
  "version": "0.0.1",
  "nodes": [],
  "edges": [],
  "metadata": {
    "comments": [
      {
        "id": "comment-cc94afe8",
        "text": "Intentionally Left Blank",
        "metadata": {
          "title": "Comment",
          "visual": {
            "x": 531,
            "y": 374,
            "collapsed": "expanded",
            "outputHeight": 0
          }
        }
      }
    ],
    "visual": {
      "presentation": {
        "themes": {
          "5f3ca599-8fee-46fb-951f-0d47b16a6d56": {
            "themeColors": {
              "primaryColor": "#246db5",
              "secondaryColor": "#5cadff",
              "backgroundColor": "#ffffff",
              "textColor": "#1a1a1a",
              "primaryTextColor": "#ffffff"
            },
            "template": "basic",
            "splashScreen": {
              "storedData": {
                "handle": "/images/app/generic-flow.jpg",
                "mimeType": "image/jpeg"
              }
            }
          }
        },
        "theme": "5f3ca599-8fee-46fb-951f-0d47b16a6d56"
      }
    },
    "tags": [
      "published",
      "tool",
      "component"
    ]
  },
  "modules": {
    "main": {
      "code": "/**\n * @fileoverview Generates video output using supplied context.\n */\nimport gemini, { defaultSafetySettings, } from \"./a2/gemini\";\nimport { err, ok, llm, toLLMContent, toLLMContentInline, toText, } from \"./a2/utils\";\nimport { Template } from \"./a2/template\";\nimport { ToolManager } from \"./a2/tool-manager\";\nimport {} from \"./a2/common\";\nimport {} from \"./a2/common\";\nimport { ArgumentNameGenerator } from \"./a2/introducer\";\nimport { executeStep, } from \"./a2/step-executor\";\nexport { invoke as default, describe };\nasync function callVideoGen(prompt) {\n    const executionInputs = {};\n    const encodedPrompt = btoa(unescape(encodeURIComponent(prompt)));\n    executionInputs[\"video_description\"] = {\n        chunks: [\n            {\n                mimetype: \"text/plain\",\n                data: encodedPrompt,\n            },\n        ],\n    };\n    const inputParameters = [\"video_description\"];\n    const body = {\n        planStep: {\n            stepName: \"GenerateVideo\",\n            modelApi: \"generate_video\",\n            inputParameters: inputParameters,\n            systemPrompt: \"\",\n        },\n        execution_inputs: executionInputs,\n    };\n    // TODO(askerryryan): Remove when stable.\n    console.log(\"REQUEST:\");\n    console.log(body);\n    const response = await executeStep(body);\n    console.log(\"RESPONSE:\");\n    console.log(response);\n    if (!ok(response)) {\n        return toLLMContent(\"Video generation failed: \" + response.$error);\n    }\n    let returnVal;\n    for (let value of Object.values(response.executionOutputs)) {\n        const mimetype = value.chunks[0].mimetype;\n        if (mimetype.startsWith(\"video\")) {\n            returnVal = toLLMContentInline(mimetype, value.chunks[0].data);\n        }\n    }\n    if (!returnVal) {\n        return toLLMContent(\"Error: No video returned from backend\");\n    }\n    return returnVal;\n}\nasync function invoke({ context, instruction, ...params }) {\n    if (!instruction) {\n        instruction = toLLMContent(\"\");\n    }\n    // 1) Get last LLMContent from input.\n    const prompt = context && Array.isArray(context) && context.length > 0\n        ? context.at(-1)\n        : undefined;\n    if (!prompt) {\n        return err(\"Must supply context as input\");\n    }\n    prompt.role = \"user\";\n    let videoPrompt = toText(prompt);\n    const toolManager = new ToolManager(new ArgumentNameGenerator());\n    const substituting = await new Template(toLLMContent(toText(instruction).trim())).substitute(params, async ({ path: url }) => toolManager.addTool(url));\n    if (!ok(substituting)) {\n        return substituting;\n    }\n    if (instruction) {\n        videoPrompt += \"\\n \" + toText(instruction);\n    }\n    console.log(\"PROMPT: \", videoPrompt);\n    // 2) Call backend to generate video.\n    const content = await callVideoGen(videoPrompt);\n    return { context: [content] };\n}\nasync function describe() {\n    return {\n        inputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context in\",\n                    behavior: [\"main-port\"],\n                },\n                instruction: {\n                    type: \"object\",\n                    behavior: [\"llm-content\", \"config\", \"hint-preview\", \"at-wireable\"],\n                    title: \"Instruction\",\n                    description: \"Instructions for how to render the video. Use @ to reference upstream steps.\",\n                },\n            },\n            additionalProperties: false,\n        },\n        outputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context out\",\n                    behavior: [\"hint-audio\"],\n                },\n            },\n            additionalProperties: false,\n        },\n        title: \"Make Video [WIP]\",\n        metadata: {\n            icon: \"generative-audio\",\n            tags: [\"quick-access\", \"generative\", \"experimental\"],\n            order: 3,\n        },\n    };\n}\n",
      "metadata": {
        "title": "main",
        "source": {
          "code": "/**\n * @fileoverview Generates video output using supplied context.\n */\n\nimport gemini, {\n  defaultSafetySettings,\n  type GeminiOutputs,\n  type GeminiInputs,\n} from \"./a2/gemini\";\nimport {\n  err,\n  ok,\n  llm,\n  toLLMContent,\n  toLLMContentInline,\n  toText,\n} from \"./a2/utils\";\nimport { Template } from \"./a2/template\";\nimport { ToolManager } from \"./a2/tool-manager\";\nimport { type Params } from \"./a2/common\";\nimport { type DescriberResult } from \"./a2/common\";\nimport { ArgumentNameGenerator } from \"./a2/introducer\";\n\nimport {\n  type ContentMap,\n  type ExecuteStepRequest,\n  executeStep,\n} from \"./a2/step-executor\";\n\ntype VideoGeneratorInputs = {\n  context: LLMContent[];\n  instruction?: LLMContent;\n};\n\ntype VideoGeneratorOutputs = {\n  context: LLMContent[] | DescriberResult;\n};\n\nexport { invoke as default, describe };\n\nasync function callVideoGen(prompt: string): Promise<LLMContent> {\n  const executionInputs: ContentMap = {};\n  const encodedPrompt = btoa(unescape(encodeURIComponent(prompt)));\n  executionInputs[\"video_description\"] = {\n    chunks: [\n      {\n        mimetype: \"text/plain\",\n        data: encodedPrompt,\n      },\n    ],\n  };\n  const inputParameters: string[] = [\"video_description\"];\n  const body = {\n    planStep: {\n      stepName: \"GenerateVideo\",\n      modelApi: \"generate_video\",\n      inputParameters: inputParameters,\n      systemPrompt: \"\",\n    },\n    execution_inputs: executionInputs,\n  } satisfies ExecuteStepRequest;\n  // TODO(askerryryan): Remove when stable.\n  console.log(\"REQUEST:\");\n  console.log(body);\n  const response = await executeStep(body);\n  console.log(\"RESPONSE:\");\n  console.log(response);\n  if (!ok(response)) {\n    return toLLMContent(\"Video generation failed: \" + response.$error);\n  }\n\n  let returnVal;\n  for (let value of Object.values(response.executionOutputs)) {\n    const mimetype = value.chunks[0].mimetype;\n    if (mimetype.startsWith(\"video\")) {\n      returnVal = toLLMContentInline(mimetype, value.chunks[0].data);\n    }\n  }\n  if (!returnVal) {\n    return toLLMContent(\"Error: No video returned from backend\");\n  }\n  return returnVal;\n}\n\nasync function invoke({\n  context,\n  instruction,\n  ...params\n}: VideoGeneratorInputs): Promise<Outcome<VideoGeneratorOutputs>> {\n  if (!instruction) {\n    instruction = toLLMContent(\"\");\n  }\n  // 1) Get last LLMContent from input.\n  const prompt =\n    context && Array.isArray(context) && context.length > 0\n      ? context.at(-1)!\n      : undefined;\n  if (!prompt) {\n    return err(\"Must supply context as input\");\n  }\n  prompt.role = \"user\";\n  let videoPrompt = toText(prompt);\n  const toolManager = new ToolManager(new ArgumentNameGenerator());\n  const substituting = await new Template(\n    toLLMContent(toText(instruction).trim())\n  ).substitute(params, async ({ path: url }) => toolManager.addTool(url));\n  if (!ok(substituting)) {\n    return substituting;\n  }\n  if (instruction) {\n    videoPrompt += \"\\n \" + toText(instruction);\n  }\n  console.log(\"PROMPT: \", videoPrompt);\n\n  // 2) Call backend to generate video.\n  const content = await callVideoGen(videoPrompt);\n\n  return { context: [content] };\n}\n\nasync function describe() {\n  return {\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context in\",\n          behavior: [\"main-port\"],\n        },\n        instruction: {\n          type: \"object\",\n          behavior: [\"llm-content\", \"config\", \"hint-preview\", \"at-wireable\"],\n          title: \"Instruction\",\n          description:\n            \"Instructions for how to render the video. Use @ to reference upstream steps.\",\n        },\n      },\n      additionalProperties: false,\n    } satisfies Schema,\n    outputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context out\",\n          behavior: [\"hint-audio\"],\n        },\n      },\n      additionalProperties: false,\n    } satisfies Schema,\n    title: \"Make Video [WIP]\",\n    metadata: {\n      icon: \"generative-audio\",\n      tags: [\"quick-access\", \"generative\", \"experimental\"],\n      order: 3,\n    },\n  };\n}\n",
          "language": "typescript"
        },
        "description": "Generates video output using supplied context.",
        "runnable": true
      }
    }
  },
  "imports": {
    "a2": {
      "url": "./a2.bgl.json"
    }
  },
  "exports": [
    "#module:main"
  ]
}