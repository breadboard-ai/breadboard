{
  "title": "Tools",
  "description": "A collection of useful tools.",
  "version": "0.0.1",
  "nodes": [],
  "edges": [],
  "imports": {
    "a2": {
      "url": "./a2.bgl.json"
    }
  },
  "metadata": {
    "comments": [
      {
        "id": "comment-6fc8b597",
        "text": "Intentionally Left Blank",
        "metadata": {
          "visual": {
            "x": 7,
            "y": -575,
            "collapsed": "expanded",
            "outputHeight": 0
          }
        }
      }
    ],
    "visual": {},
    "tags": [
      "published",
      "tool",
      "component"
    ]
  },
  "modules": {
    "search-web": {
      "code": "/**\n * @fileoverview Add a description for your module here.\n */\nexport { invoke as default, describe };\nasync function invoke({ context }) {\n    return { context };\n}\nasync function describe() {\n    return {\n        inputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context in\",\n                },\n            },\n        },\n        outputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context out\",\n                },\n            },\n        },\n        metadata: {\n            icon: \"search\",\n            tags: [\"quick-access\", \"tool\"],\n            order: 1,\n        },\n    };\n}\n",
      "metadata": {
        "title": "Search Web",
        "source": {
          "code": "/**\n * @fileoverview Add a description for your module here.\n */\n\nexport { invoke as default, describe };\n\nasync function invoke({ context }: { context: LLMContent[] }) {\n  return { context };\n}\n\nasync function describe() {\n  return {\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context in\",\n        },\n      },\n    } satisfies Schema,\n    outputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context out\",\n        },\n      },\n    } satisfies Schema,\n    metadata: {\n      icon: \"search\",\n      tags: [\"quick-access\", \"tool\"],\n      order: 1,\n    },\n  };\n}\n",
          "language": "typescript"
        },
        "description": "Add a description for your module here.",
        "runnable": false
      }
    },
    "search-maps": {
      "code": "/**\n * @fileoverview Add a description for your module here.\n */\nexport { invoke as default, describe };\nasync function invoke({ context }) {\n    return { context };\n}\nasync function describe() {\n    return {\n        inputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context in\",\n                },\n            },\n        },\n        outputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context out\",\n                },\n            },\n        },\n        metadata: {\n            icon: \"map-search\",\n            tags: [\"quick-access\", \"tool\"],\n            order: 2,\n        },\n    };\n}\n",
      "metadata": {
        "title": "Search Maps",
        "source": {
          "code": "/**\n * @fileoverview Add a description for your module here.\n */\n\nexport { invoke as default, describe };\n\nasync function invoke({ context }: { context: LLMContent[] }) {\n  return { context };\n}\n\nasync function describe() {\n  return {\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context in\",\n        },\n      },\n    } satisfies Schema,\n    outputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context out\",\n        },\n      },\n    } satisfies Schema,\n    metadata: {\n      icon: \"map-search\",\n      tags: [\"quick-access\", \"tool\"],\n      order: 2,\n    },\n  };\n}\n",
          "language": "typescript"
        },
        "description": "Add a description for your module here.",
        "runnable": false
      }
    },
    "get-webpage": {
      "code": "/**\n * @fileoverview Given a URL of a webpage, returns its content as Markdown with a list of links and other metadata.\n */\nexport { invoke as default, describe };\nasync function invoke({ context }) {\n    return { context };\n}\nasync function describe() {\n    return {\n        inputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context in\",\n                },\n            },\n        },\n        outputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context out\",\n                },\n            },\n        },\n        metadata: {\n            icon: \"language\",\n            tags: [\"quick-access\", \"tool\"],\n            order: 4,\n        },\n    };\n}\n",
      "metadata": {
        "title": "Get Webpage",
        "source": {
          "code": "/**\n * @fileoverview Given a URL of a webpage, returns its content as Markdown with a list of links and other metadata.\n */\n\nexport { invoke as default, describe };\n\nasync function invoke({ context }: { context: LLMContent[] }) {\n  return { context };\n}\n\nasync function describe() {\n  return {\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context in\",\n        },\n      },\n    } satisfies Schema,\n    outputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context out\",\n        },\n      },\n    } satisfies Schema,\n    metadata: {\n      icon: \"language\",\n      tags: [\"quick-access\", \"tool\"],\n      order: 4,\n    },\n  };\n}\n",
          "language": "typescript"
        },
        "description": "Given a URL of a webpage, returns its content as Markdown with a list of links and other metadata.",
        "runnable": false
      }
    },
    "search-wikipedia": {
      "code": "/**\n * @fileoverview Add a description for your module here.\n */\nexport { invoke as default, describe };\nasync function invoke({ context }) {\n    return { context };\n}\nasync function describe() {\n    return {\n        inputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context in\",\n                },\n            },\n        },\n        outputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context out\",\n                },\n            },\n        },\n        metadata: {\n            icon: \"globe-book\",\n            tags: [\"quick-access\", \"tool\"],\n            order: 3,\n        },\n    };\n}\n",
      "metadata": {
        "title": "Search Wikipedia",
        "source": {
          "code": "/**\n * @fileoverview Add a description for your module here.\n */\n\nexport { invoke as default, describe };\n\nasync function invoke({ context }: { context: LLMContent[] }) {\n  return { context };\n}\n\nasync function describe() {\n  return {\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context in\",\n        },\n      },\n    } satisfies Schema,\n    outputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context out\",\n        },\n      },\n    } satisfies Schema,\n    metadata: {\n      icon: \"globe-book\",\n      tags: [\"quick-access\", \"tool\"],\n      order: 3,\n    },\n  };\n}\n",
          "language": "typescript"
        },
        "description": "Add a description for your module here.",
        "runnable": false
      }
    },
    "get-weather": {
      "code": "/**\n * @fileoverview Add a description for your module here.\n */\nimport { err, toLLMContent, toText, addUserTurn } from \"./a2/utils\";\nimport getWeather, { describe as getWeatherDescriber, } from \"./get-weather-tool\";\nexport { invoke as default, describe };\nasync function invoke(inputs) {\n    let location;\n    let mode;\n    if (\"context\" in inputs) {\n        mode = \"step\";\n        const last = inputs.context?.at(-1);\n        if (last) {\n            location = toText(last);\n        }\n        else {\n            return err(\"Please provide a location\");\n        }\n    }\n    else if (\"p-location\" in inputs) {\n        location = inputs[\"p-location\"];\n        mode = \"step\";\n    }\n    else {\n        location = inputs.location;\n        mode = \"tool\";\n    }\n    location = (location || \"\").trim();\n    if (!location) {\n        return err(\"Please provide a location\");\n    }\n    const result = await getWeather({ location });\n    if (mode == \"step\") {\n        return {\n            context: [\n                toLLMContent(`Location: ${location}\\n\\n Weather information: \\n\\n\\`\\`\\`json\\n${JSON.stringify(result, null, 2)}\\n\\`\\`\\``),\n            ],\n        };\n    }\n    else {\n        return result;\n    }\n}\nasync function describe(inputs) {\n    const isTool = inputs && Object.keys(inputs).length === 1;\n    if (isTool) {\n        return getWeatherDescriber();\n    }\n    const hasWires = \"context\" in (inputs.inputSchema.properties || {});\n    const location = hasWires\n        ? {}\n        : {\n            \"p-location\": {\n                type: \"string\",\n                title: \"Location\",\n                description: \"Please provide the location for which to get current weather\",\n                behavior: [\"config\", \"hint-preview\"],\n            },\n        };\n    return {\n        inputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context in\",\n                    behavior: [\"main-port\"],\n                },\n                ...location,\n            },\n        },\n        outputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context out\",\n                    behavior: [\"hint-text\"],\n                },\n            },\n        },\n        metadata: {\n            icon: \"sunny\",\n            tags: [\"quick-access\", \"tool\"],\n            order: 5,\n        },\n    };\n}\n",
      "metadata": {
        "title": "Get Weather",
        "source": {
          "code": "/**\n * @fileoverview Add a description for your module here.\n */\n\nimport { err, toLLMContent, toText, addUserTurn } from \"./a2/utils\";\nimport getWeather, {\n  describe as getWeatherDescriber,\n  type WeatherInputs,\n  type WeatherOutputs,\n} from \"./get-weather-tool\";\n\nexport { invoke as default, describe };\n\n/**\n * Every tool operates in one of three modes:\n * - `tool` -- when invoked as a tool by an LLM\n * - `step` -- when used as a step in a visual editor\n * - `invoke` -- when invoked directly as a module (by another module)\n */\nexport type ToolMode = \"tool\" | \"step\" | \"invoke\";\n\nexport type Inputs =\n  | {\n      context?: LLMContent[];\n      \"p-location\": string;\n    }\n  | WeatherInputs;\n\nexport type Outputs =\n  | WeatherOutputs\n  | {\n      context: LLMContent[];\n    };\n\nasync function invoke(inputs: Inputs): Promise<Outcome<Outputs>> {\n  let location;\n  let mode: ToolMode;\n  if (\"context\" in inputs) {\n    mode = \"step\";\n    const last = inputs.context?.at(-1);\n    if (last) {\n      location = toText(last);\n    } else {\n      return err(\"Please provide a location\");\n    }\n  } else if (\"p-location\" in inputs) {\n    location = inputs[\"p-location\"];\n    mode = \"step\";\n  } else {\n    location = inputs.location;\n    mode = \"tool\";\n  }\n  location = (location || \"\").trim();\n  if (!location) {\n    return err(\"Please provide a location\");\n  }\n  const result = await getWeather({ location });\n  if (mode == \"step\") {\n    return {\n      context: [\n        toLLMContent(\n          `Location: ${location}\\n\\n Weather information: \\n\\n\\`\\`\\`json\\n${JSON.stringify(result, null, 2)}\\n\\`\\`\\``\n        ),\n      ],\n    };\n  } else {\n    return result;\n  }\n}\n\nexport type DescribeInputs = {\n  inputs: Inputs;\n  inputSchema: Schema;\n};\n\nasync function describe(inputs: DescribeInputs) {\n  const isTool = inputs && Object.keys(inputs).length === 1;\n  if (isTool) {\n    return getWeatherDescriber();\n  }\n  const hasWires = \"context\" in (inputs.inputSchema.properties || {});\n  const location: Schema[\"properties\"] = hasWires\n    ? {}\n    : {\n        \"p-location\": {\n          type: \"string\",\n          title: \"Location\",\n          description:\n            \"Please provide the location for which to get current weather\",\n          behavior: [\"config\", \"hint-preview\"],\n        },\n      };\n  return {\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context in\",\n          behavior: [\"main-port\"],\n        },\n        ...location,\n      },\n    } satisfies Schema,\n    outputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context out\",\n          behavior: [\"hint-text\"],\n        },\n      },\n    } satisfies Schema,\n    metadata: {\n      icon: \"sunny\",\n      tags: [\"quick-access\", \"tool\"],\n      order: 5,\n    },\n  };\n}\n",
          "language": "typescript"
        },
        "description": "Add a description for your module here.",
        "runnable": false
      }
    },
    "get-weather-tool": {
      "code": "/**\n * @fileoverview The actual tool that gets the weather.\n */\nimport fetch from \"@fetch\";\nexport { invoke as default, describe };\nconst WEATHER_CODES = {\n    // Individual codes\n    \"0\": {\n        description: \"Clear sky\",\n        category: \"clear\",\n    },\n    // Ranges for cloud coverage\n    \"1\": {\n        description: \"Mainly clear\",\n        category: \"partlyCloudy\",\n    },\n    \"2\": {\n        description: \"Partly cloudy\",\n        category: \"partlyCloudy\",\n    },\n    \"3\": {\n        description: \"Overcast\",\n        category: \"cloudy\",\n    },\n    // Fog conditions\n    \"45\": {\n        description: \"Fog\",\n        category: \"fog\",\n    },\n    \"48\": {\n        description: \"Depositing rime fog\",\n        category: \"fog\",\n    },\n    // Drizzle intensities\n    \"51\": {\n        description: \"Light drizzle\",\n        category: \"drizzle\",\n        intensity: \"light\",\n    },\n    \"53\": {\n        description: \"Moderate drizzle\",\n        category: \"drizzle\",\n        intensity: \"moderate\",\n    },\n    \"55\": {\n        description: \"Dense drizzle\",\n        category: \"drizzle\",\n        intensity: \"heavy\",\n    },\n    // Freezing drizzle\n    \"56\": {\n        description: \"Light freezing drizzle\",\n        category: \"freezingDrizzle\",\n        intensity: \"light\",\n    },\n    \"57\": {\n        description: \"Dense freezing drizzle\",\n        category: \"freezingDrizzle\",\n        intensity: \"heavy\",\n    },\n    // Rain intensities\n    \"61\": {\n        description: \"Slight rain\",\n        category: \"rain\",\n        intensity: \"light\",\n    },\n    \"63\": {\n        description: \"Moderate rain\",\n        category: \"rain\",\n        intensity: \"moderate\",\n    },\n    \"65\": {\n        description: \"Heavy rain\",\n        category: \"rain\",\n        intensity: \"heavy\",\n    },\n    // Freezing rain\n    \"66\": {\n        description: \"Light freezing rain\",\n        category: \"freezingRain\",\n        intensity: \"light\",\n    },\n    \"67\": {\n        description: \"Heavy freezing rain\",\n        category: \"freezingRain\",\n        intensity: \"heavy\",\n    },\n    // Snow intensities\n    \"71\": {\n        description: \"Slight snow fall\",\n        category: \"snow\",\n        intensity: \"light\",\n    },\n    \"73\": {\n        description: \"Moderate snow fall\",\n        category: \"snow\",\n        intensity: \"moderate\",\n    },\n    \"75\": {\n        description: \"Heavy snow fall\",\n        category: \"snow\",\n        intensity: \"heavy\",\n    },\n    // Snow grains\n    \"77\": {\n        description: \"Snow grains\",\n        category: \"snowGrains\",\n    },\n    // Rain showers\n    \"80\": {\n        description: \"Slight rain showers\",\n        category: \"rainShowers\",\n        intensity: \"light\",\n    },\n    \"81\": {\n        description: \"Moderate rain showers\",\n        category: \"rainShowers\",\n        intensity: \"moderate\",\n    },\n    \"82\": {\n        description: \"Violent rain showers\",\n        category: \"rainShowers\",\n        intensity: \"violent\",\n    },\n    // Snow showers\n    \"85\": {\n        description: \"Slight snow showers\",\n        category: \"snowShowers\",\n        intensity: \"light\",\n    },\n    \"86\": {\n        description: \"Heavy snow showers\",\n        category: \"snowShowers\",\n        intensity: \"heavy\",\n    },\n    // Thunderstorm\n    \"95\": {\n        description: \"Thunderstorm\",\n        category: \"thunderstorm\",\n        intensity: \"moderate\",\n    },\n    // Thunderstorm with hail\n    \"96\": {\n        description: \"Thunderstorm with slight hail\",\n        category: \"thunderstormWithHail\",\n        intensity: \"light\",\n    },\n    \"99\": {\n        description: \"Thunderstorm with heavy hail\",\n        category: \"thunderstormWithHail\",\n        intensity: \"heavy\",\n    },\n};\nfunction geocodingUrl(location) {\n    return `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(location)}&count=10&language=en&format=json`;\n}\nfunction weatherUrl(latitude, longitude) {\n    // current=temperature_2m,is_day,precipitation,rain,showers,snowfall&temperature_unit=fahrenheit&wind_speed_unit=mph&precipitation_unit=inch&timezone=auto&forecast_days=1\n    return `https://api.open-meteo.com/v1/forecast?latitude=${encodeURIComponent(latitude)}&longitude=${encodeURIComponent(longitude)}&current=weather_code,temperature_2m,is_day,precipitation,rain,showers,snowfall&temperature_unit=fahrenheit&wind_speed_unit=mph&precipitation_unit=inch&timezone=auto&forecast_days=1`;\n}\nfunction getConditions(weather_code) {\n    const code = `${weather_code}`;\n    const conditions = WEATHER_CODES[code];\n    return conditions;\n}\nasync function invoke({ location, }) {\n    const geocodingResponse = await fetch({ url: geocodingUrl(location) });\n    if (\"$error\" in geocodingResponse) {\n        return { $error: geocodingResponse.$error };\n    }\n    const geocodingResults = geocodingResponse.response;\n    if (!geocodingResults.results) {\n        return { $error: `No results for location: \"${location}\"` };\n    }\n    const { latitude, longitude } = geocodingResults.results.at(0) || {};\n    if (!latitude || !longitude) {\n        return { $error: `No latitude/longitude for location: \"${location}\"` };\n    }\n    const weatherResponse = await fetch({ url: weatherUrl(latitude, longitude) });\n    if (\"$error\" in weatherResponse) {\n        return { $error: weatherResponse.$error };\n    }\n    const { current } = weatherResponse.response;\n    const precipitation = current.precipitation\n        ? `${current.precipitation} inches`\n        : \"none\";\n    const weather = {\n        conditions: getConditions(current.weather_code),\n        time: current.time,\n        is_day: current.is_day == 1,\n        precipitation,\n        temperature: `${current.temperature_2m} F`,\n    };\n    if (current.showers) {\n        weather.showers = true;\n    }\n    if (current.snowfall) {\n        weather.snowfall = true;\n    }\n    if (current.rain) {\n        weather.rain = true;\n    }\n    return { weather };\n}\nasync function describe() {\n    return {\n        inputSchema: {\n            type: \"object\",\n            properties: {\n                location: {\n                    type: \"string\",\n                    title: \"Location\",\n                    description: \"The name of the city\",\n                },\n            },\n        },\n        outputSchema: {\n            type: \"object\",\n            properties: {\n                weather: {\n                    type: \"object\",\n                    title: \"Current Weather\",\n                },\n            },\n        },\n    };\n}\n",
      "metadata": {
        "title": "get-weather-tool",
        "source": {
          "code": "/**\n * @fileoverview The actual tool that gets the weather.\n */\nimport fetch from \"@fetch\";\n\nexport { invoke as default, describe };\n\nexport type WeatherInputs = {\n  location: string;\n};\n\nexport type WeatherOutputs = {\n  weather: WeatherOutput;\n};\n\ntype GeocodingResults = {\n  results?: {\n    name: string;\n    latitude: number;\n    longitude: number;\n  }[];\n};\n\ntype WeatherResults = {\n  current: {\n    weather_code: number;\n    time: string;\n    temperature_2m: number;\n    is_day: 0 | 1;\n    precipitation: number;\n    rain: number;\n    showers: number;\n    snowfall: number;\n  };\n};\n\nconst WEATHER_CODES: Record<string, Conditions> = {\n  // Individual codes\n  \"0\": {\n    description: \"Clear sky\",\n    category: \"clear\",\n  },\n\n  // Ranges for cloud coverage\n  \"1\": {\n    description: \"Mainly clear\",\n    category: \"partlyCloudy\",\n  },\n  \"2\": {\n    description: \"Partly cloudy\",\n    category: \"partlyCloudy\",\n  },\n  \"3\": {\n    description: \"Overcast\",\n    category: \"cloudy\",\n  },\n\n  // Fog conditions\n  \"45\": {\n    description: \"Fog\",\n    category: \"fog\",\n  },\n  \"48\": {\n    description: \"Depositing rime fog\",\n    category: \"fog\",\n  },\n\n  // Drizzle intensities\n  \"51\": {\n    description: \"Light drizzle\",\n    category: \"drizzle\",\n    intensity: \"light\",\n  },\n  \"53\": {\n    description: \"Moderate drizzle\",\n    category: \"drizzle\",\n    intensity: \"moderate\",\n  },\n  \"55\": {\n    description: \"Dense drizzle\",\n    category: \"drizzle\",\n    intensity: \"heavy\",\n  },\n\n  // Freezing drizzle\n  \"56\": {\n    description: \"Light freezing drizzle\",\n    category: \"freezingDrizzle\",\n    intensity: \"light\",\n  },\n  \"57\": {\n    description: \"Dense freezing drizzle\",\n    category: \"freezingDrizzle\",\n    intensity: \"heavy\",\n  },\n\n  // Rain intensities\n  \"61\": {\n    description: \"Slight rain\",\n    category: \"rain\",\n    intensity: \"light\",\n  },\n  \"63\": {\n    description: \"Moderate rain\",\n    category: \"rain\",\n    intensity: \"moderate\",\n  },\n  \"65\": {\n    description: \"Heavy rain\",\n    category: \"rain\",\n    intensity: \"heavy\",\n  },\n\n  // Freezing rain\n  \"66\": {\n    description: \"Light freezing rain\",\n    category: \"freezingRain\",\n    intensity: \"light\",\n  },\n  \"67\": {\n    description: \"Heavy freezing rain\",\n    category: \"freezingRain\",\n    intensity: \"heavy\",\n  },\n\n  // Snow intensities\n  \"71\": {\n    description: \"Slight snow fall\",\n    category: \"snow\",\n    intensity: \"light\",\n  },\n  \"73\": {\n    description: \"Moderate snow fall\",\n    category: \"snow\",\n    intensity: \"moderate\",\n  },\n  \"75\": {\n    description: \"Heavy snow fall\",\n    category: \"snow\",\n    intensity: \"heavy\",\n  },\n\n  // Snow grains\n  \"77\": {\n    description: \"Snow grains\",\n    category: \"snowGrains\",\n  },\n\n  // Rain showers\n  \"80\": {\n    description: \"Slight rain showers\",\n    category: \"rainShowers\",\n    intensity: \"light\",\n  },\n  \"81\": {\n    description: \"Moderate rain showers\",\n    category: \"rainShowers\",\n    intensity: \"moderate\",\n  },\n  \"82\": {\n    description: \"Violent rain showers\",\n    category: \"rainShowers\",\n    intensity: \"violent\",\n  },\n\n  // Snow showers\n  \"85\": {\n    description: \"Slight snow showers\",\n    category: \"snowShowers\",\n    intensity: \"light\",\n  },\n  \"86\": {\n    description: \"Heavy snow showers\",\n    category: \"snowShowers\",\n    intensity: \"heavy\",\n  },\n\n  // Thunderstorm\n  \"95\": {\n    description: \"Thunderstorm\",\n    category: \"thunderstorm\",\n    intensity: \"moderate\",\n  },\n\n  // Thunderstorm with hail\n  \"96\": {\n    description: \"Thunderstorm with slight hail\",\n    category: \"thunderstormWithHail\",\n    intensity: \"light\",\n  },\n  \"99\": {\n    description: \"Thunderstorm with heavy hail\",\n    category: \"thunderstormWithHail\",\n    intensity: \"heavy\",\n  },\n};\n\ntype Conditions = {\n  description: string;\n  category: string;\n  intensity?: string;\n};\n\ntype WeatherOutput = {\n  conditions: Conditions;\n  time: string;\n  temperature: string;\n  is_day: boolean;\n  precipitation: string;\n  snowfall?: boolean;\n  rain?: boolean;\n  showers?: boolean;\n};\n\nfunction geocodingUrl(location: string) {\n  return `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(location)}&count=10&language=en&format=json`;\n}\n\nfunction weatherUrl(latitude: number, longitude: number) {\n  // current=temperature_2m,is_day,precipitation,rain,showers,snowfall&temperature_unit=fahrenheit&wind_speed_unit=mph&precipitation_unit=inch&timezone=auto&forecast_days=1\n  return `https://api.open-meteo.com/v1/forecast?latitude=${encodeURIComponent(latitude)}&longitude=${encodeURIComponent(longitude)}&current=weather_code,temperature_2m,is_day,precipitation,rain,showers,snowfall&temperature_unit=fahrenheit&wind_speed_unit=mph&precipitation_unit=inch&timezone=auto&forecast_days=1`;\n}\n\nfunction getConditions(weather_code: number): Conditions {\n  const code = `${weather_code}`;\n  const conditions = WEATHER_CODES[code];\n  return conditions;\n}\n\nasync function invoke({\n  location,\n}: WeatherInputs): Promise<Outcome<WeatherOutputs>> {\n  const geocodingResponse = await fetch({ url: geocodingUrl(location) });\n  if (\"$error\" in geocodingResponse) {\n    return { $error: geocodingResponse.$error as string };\n  }\n  const geocodingResults = geocodingResponse.response as GeocodingResults;\n  if (!geocodingResults.results) {\n    return { $error: `No results for location: \"${location}\"` };\n  }\n  const { latitude, longitude } = geocodingResults.results.at(0) || {};\n  if (!latitude || !longitude) {\n    return { $error: `No latitude/longitude for location: \"${location}\"` };\n  }\n  const weatherResponse = await fetch({ url: weatherUrl(latitude, longitude) });\n  if (\"$error\" in weatherResponse) {\n    return { $error: weatherResponse.$error as string };\n  }\n  const { current } = weatherResponse.response as WeatherResults;\n\n  const precipitation = current.precipitation\n    ? `${current.precipitation} inches`\n    : \"none\";\n  const weather: WeatherOutput = {\n    conditions: getConditions(current.weather_code),\n    time: current.time,\n    is_day: current.is_day == 1,\n    precipitation,\n    temperature: `${current.temperature_2m} F`,\n  };\n  if (current.showers) {\n    weather.showers = true;\n  }\n  if (current.snowfall) {\n    weather.snowfall = true;\n  }\n  if (current.rain) {\n    weather.rain = true;\n  }\n  return { weather };\n}\n\nasync function describe() {\n  return {\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        location: {\n          type: \"string\",\n          title: \"Location\",\n          description: \"The name of the city\",\n        },\n      },\n    } satisfies Schema,\n    outputSchema: {\n      type: \"object\",\n      properties: {\n        weather: {\n          type: \"object\",\n          title: \"Current Weather\",\n        },\n      },\n    } satisfies Schema,\n  };\n}\n",
          "language": "typescript"
        },
        "description": "The actual tool that gets the weather.",
        "runnable": false
      }
    }
  },
  "exports": [
    "#module:get-weather",
    "#module:search-web",
    "#module:search-wikipedia",
    "#module:get-webpage",
    "#module:search-maps"
  ]
}