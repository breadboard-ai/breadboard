{
  "title": "Local Memory",
  "description": "A connector that provides CRUD interface to a simple data store (a \"local memory\")",
  "version": "0.0.1",
  "nodes": [],
  "edges": [],
  "metadata": {
    "icon": "generative",
    "visual": {
      "presentation": {
        "themes": {
          "f65ea9aa-b8c6-4c80-9667-a08c4f631013": {
            "themeColors": {
              "primaryColor": "#246db5",
              "secondaryColor": "#5cadff",
              "backgroundColor": "#ffffff",
              "textColor": "#1a1a1a",
              "primaryTextColor": "#ffffff"
            },
            "template": "basic",
            "splashScreen": {
              "storedData": {
                "handle": "/images/app/generic-flow.jpg",
                "mimeType": "image/jpeg"
              }
            }
          }
        },
        "theme": "f65ea9aa-b8c6-4c80-9667-a08c4f631013"
      }
    },
    "userModified": true,
    "tags": [
      "connector",
      "published"
    ],
    "comments": [
      {
        "id": "comment-c74afa15",
        "text": "Intentionally Left Blank",
        "metadata": {
          "title": "Comment",
          "visual": {
            "x": 281,
            "y": 501,
            "collapsed": "expanded",
            "outputHeight": 0
          }
        }
      }
    ]
  },
  "modules": {
    "save-state": {
      "code": "/**\n * @fileoverview Saves the current state into a foilo.\n */\nexport { invoke as default, describe };\nimport { ok, err, mergeTextParts } from \"./a2/utils\";\nimport write from \"@write\";\nimport read from \"@read\";\nconst MODE = [\"Append\", \"Prepend\", \"Replace\"];\nfunction getParts(context) {\n    const last = context?.at(-1);\n    return last ? last.parts : [];\n}\nasync function invoke({ id, method, context, info, \"folio-mode\": mode, }) {\n    if (!context || context.length === 0) {\n        return { context: [] };\n    }\n    if (method === \"save\") {\n        const path = `/local/folio/${id}`;\n        if (mode === \"Append\") {\n            const readResult = await read({ path });\n            if (!ok(readResult))\n                return readResult;\n            const existing = getParts(readResult.data);\n            const incoming = getParts(context);\n            const data = [\n                { parts: mergeTextParts([...existing, ...incoming], \"\\n\\n\") },\n            ];\n            const writeResult = await write({ path, data });\n            if (!ok(writeResult))\n                return writeResult;\n        }\n        else if (mode === \"Prepend\") {\n            const readResult = await read({ path });\n            if (!ok(readResult))\n                return readResult;\n            const existing = getParts(readResult.data);\n            const incoming = getParts(context);\n            const data = [\n                { parts: mergeTextParts([...incoming, ...existing], \"\\n\\n\") },\n            ];\n            const writeResult = await write({ path, data });\n            if (!ok(writeResult))\n                return writeResult;\n        }\n        else {\n            // Replace\n            const parts = mergeTextParts(getParts(context), \"\\n\\n\");\n            const writeResult = await write({ path, data: [{ parts }] });\n            if (!ok(writeResult))\n                return writeResult;\n        }\n        return { context };\n    }\n    else if (method === \"canSave\") {\n        return { canSave: true };\n    }\n    return err(`Unknown method \"${method}\"`);\n}\nasync function describe() {\n    return {\n        description: \"Saves the current state into a folio\",\n        title: \"Save Current State\",\n        metadata: {\n            tags: [\"connector-save\"],\n        },\n        inputSchema: {\n            type: \"object\",\n            properties: {\n                \"folio-mode\": {\n                    type: \"string\",\n                    enum: MODE,\n                    title: \"How to save\",\n                    description: \"Prepend will save at the front, Append will save at the end, and Replace will overwrite what has been saved\",\n                    default: \"Append\",\n                    behavior: [\"config\", \"hint-preview\"],\n                    icon: \"summarize\",\n                },\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context to be saved\",\n                    description: \"All content as one multi-line string\",\n                },\n            },\n        },\n        outputSchema: {\n            // Returns nothing.\n            type: \"object\",\n        },\n    };\n}\n",
      "metadata": {
        "title": "save-state",
        "source": {
          "code": "/**\n * @fileoverview Saves the current state into a foilo.\n */\n\nexport { invoke as default, describe };\n\nimport { ok, err, mergeTextParts } from \"./a2/utils\";\n\nimport write from \"@write\";\nimport read from \"@read\";\n\ntype Inputs = {\n  id: string;\n  context?: LLMContent[];\n  info: unknown;\n  method: \"canSave\" | \"save\";\n  \"folio-mode\": string;\n};\n\nconst MODE = [\"Append\", \"Prepend\", \"Replace\"];\n\ntype Outputs =\n  | {\n      context: LLMContent[];\n    }\n  | {\n      canSave: boolean;\n    };\n\nfunction getParts(context?: LLMContent[]): DataPart[] {\n  const last = context?.at(-1);\n  return last ? last.parts : [];\n}\n\nasync function invoke({\n  id,\n  method,\n  context,\n  info,\n  \"folio-mode\": mode,\n}: Inputs): Promise<Outcome<Outputs>> {\n  if (!context || context.length === 0) {\n    return { context: [] };\n  }\n\n  if (method === \"save\") {\n    const path: FileSystemPath = `/local/folio/${id}`;\n    if (mode === \"Append\") {\n      const readResult = await read({ path });\n      if (!ok(readResult)) return readResult;\n      const existing = getParts(readResult.data);\n      const incoming = getParts(context);\n      const data = [\n        { parts: mergeTextParts([...existing, ...incoming], \"\\n\\n\") },\n      ];\n      const writeResult = await write({ path, data });\n      if (!ok(writeResult)) return writeResult;\n    } else if (mode === \"Prepend\") {\n      const readResult = await read({ path });\n      if (!ok(readResult)) return readResult;\n      const existing = getParts(readResult.data);\n      const incoming = getParts(context);\n      const data = [\n        { parts: mergeTextParts([...incoming, ...existing], \"\\n\\n\") },\n      ];\n      const writeResult = await write({ path, data });\n      if (!ok(writeResult)) return writeResult;\n    } else {\n      // Replace\n      const parts = mergeTextParts(getParts(context), \"\\n\\n\");\n      const writeResult = await write({ path, data: [{ parts }] });\n      if (!ok(writeResult)) return writeResult;\n    }\n    return { context };\n  } else if (method === \"canSave\") {\n    return { canSave: true };\n  }\n  return err(`Unknown method \"${method}\"`);\n}\n\nasync function describe() {\n  return {\n    description: \"Saves the current state into a folio\",\n    title: \"Save Current State\",\n    metadata: {\n      tags: [\"connector-save\"],\n    },\n\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        \"folio-mode\": {\n          type: \"string\",\n          enum: MODE,\n          title: \"How to save\",\n          description:\n            \"Prepend will save at the front, Append will save at the end, and Replace will overwrite what has been saved\",\n          default: \"Append\",\n          behavior: [\"config\", \"hint-preview\"],\n          icon: \"summarize\",\n        },\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context to be saved\",\n          description: \"All content as one multi-line string\",\n        },\n      },\n    } satisfies Schema,\n    outputSchema: {\n      // Returns nothing.\n      type: \"object\",\n    } satisfies Schema,\n  };\n}\n",
          "language": "typescript"
        },
        "description": "Saves the current state into a foilo.",
        "runnable": false
      }
    },
    "load-all": {
      "code": "/**\n * @fileoverview Loads all of the folio into current context.\n */\nimport read from \"@read\";\nimport { ok } from \"./a2/utils\";\nexport { invoke as default, describe };\nasync function invoke({ id }) {\n    const readResult = await read({ path: `/local/folio/${id}` });\n    if (!ok(readResult))\n        return readResult;\n    return { context: readResult.data || [] };\n}\nasync function describe() {\n    return {\n        title: \"Load Entire Temp File\",\n        description: \"Loads all of the file into current context\",\n        metadata: {\n            tags: [\"connector-load\"],\n        },\n        inputSchema: {\n            type: \"object\",\n        },\n        outputSchema: {\n            type: \"object\",\n            properties: {\n                context: {\n                    type: \"array\",\n                    items: { type: \"object\", behavior: [\"llm-content\"] },\n                    title: \"Context out\",\n                },\n            },\n        },\n    };\n}\n",
      "metadata": {
        "title": "load-all",
        "source": {
          "code": "/**\n * @fileoverview Loads all of the folio into current context.\n */\nimport read from \"@read\";\nimport { ok } from \"./a2/utils\";\n\nexport { invoke as default, describe };\n\ntype Inputs = {\n  id: string;\n};\ntype Outputs = {\n  context: LLMContent[];\n};\n\nasync function invoke({ id }: Inputs): Promise<Outcome<Outputs>> {\n  const readResult = await read({ path: `/local/folio/${id}` });\n  if (!ok(readResult)) return readResult;\n  return { context: readResult.data || [] };\n}\n\nasync function describe() {\n  return {\n    title: \"Load Entire Temp File\",\n    description: \"Loads all of the file into current context\",\n    metadata: {\n      tags: [\"connector-load\"],\n    },\n    inputSchema: {\n      type: \"object\",\n    } satisfies Schema,\n    outputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context out\",\n        },\n      },\n    } satisfies Schema,\n  };\n}\n",
          "language": "typescript"
        },
        "description": "Loads all of the folio into current context.",
        "runnable": false
      }
    },
    "configurator": {
      "code": "/**\n * @fileoverview Add a description for your module here.\n */\nimport { err, ok } from \"./a2/utils\";\nimport { createConfigurator } from \"./a2/connector-manager\";\nimport read from \"@read\";\nimport write from \"@write\";\nexport { invoke as default, describe };\nconst { invoke, describe } = createConfigurator({\n    title: \"Configure Local Memory\",\n    initialize: async (inputs) => {\n        const writing = await write({\n            path: `/local/folio/${inputs.id}`,\n            data: [{ parts: [{ text: \"\" }] }],\n        });\n        if (!ok(writing))\n            return writing;\n        return { title: \"Untitled Local Memory\", configuration: {} };\n    },\n    read: async (inputs) => {\n        const reading = await read({ path: `/local/folio/${inputs.id}` });\n        const data = ok(reading) ? reading.data : [];\n        return {\n            schema: {\n                type: \"object\",\n                properties: {\n                    data: {\n                        type: \"array\",\n                        items: { type: \"object\", behavior: [\"llm-content\"] },\n                    },\n                },\n            },\n            values: { data },\n        };\n    },\n    write: async (inputs) => {\n        const data = inputs.values.data;\n        if (!data) {\n            return err(`No data to write`);\n        }\n        const writing = await write({\n            path: `/local/folio/${inputs.id}`,\n            data,\n        });\n        console.log(\"WRITING\", inputs);\n        if (!ok(writing))\n            return writing;\n        return inputs.values;\n    },\n    preview: async ({ id }) => {\n        const reading = await read({ path: `/local/folio/${id}` });\n        const data = (ok(reading) ? reading.data : []) || [];\n        return data;\n    },\n});\n",
      "metadata": {
        "title": "configurator",
        "source": {
          "code": "/**\n * @fileoverview Add a description for your module here.\n */\n\nimport { err, ok } from \"./a2/utils\";\nimport { createConfigurator } from \"./a2/connector-manager\";\nimport read from \"@read\";\nimport write from \"@write\";\n\nexport { invoke as default, describe };\n\nconst { invoke, describe } = createConfigurator({\n  title: \"Configure Local Memory\",\n  initialize: async (inputs) => {\n    const writing = await write({\n      path: `/local/folio/${inputs.id}`,\n      data: [{ parts: [{ text: \"\" }] }],\n    });\n    if (!ok(writing)) return writing;\n    return { title: \"Untitled Local Memory\", configuration: {} };\n  },\n  read: async (inputs) => {\n    const reading = await read({ path: `/local/folio/${inputs.id}` });\n    const data = ok(reading) ? reading.data : [];\n    return {\n      schema: {\n        type: \"object\",\n        properties: {\n          data: {\n            type: \"array\",\n            items: { type: \"object\", behavior: [\"llm-content\"] },\n          },\n        },\n      },\n      values: { data },\n    };\n  },\n  write: async (inputs) => {\n    const data = inputs.values.data;\n    if (!data) {\n      return err(`No data to write`);\n    }\n    const writing = await write({\n      path: `/local/folio/${inputs.id}`,\n      data,\n    });\n    console.log(\"WRITING\", inputs);\n    if (!ok(writing)) return writing;\n    return inputs.values;\n  },\n  preview: async ({ id }) => {\n    const reading = await read({ path: `/local/folio/${id}` });\n    const data = (ok(reading) ? reading.data : []) || [];\n    return data;\n  },\n});\n",
          "language": "typescript"
        },
        "description": "Add a description for your module here.",
        "runnable": false
      }
    }
  },
  "imports": {
    "a2": {
      "url": "./a2.bgl.json"
    }
  },
  "exports": [
    "#module:save-state",
    "#module:load-all",
    "#module:configurator"
  ]
}