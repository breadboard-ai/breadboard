/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A specific instance of a ComponentType with its own unique ID and properties. The properties are validated based on the 'type' field.
 */
export type Component = {
  /**
   * A unique identifier for this component instance.
   */
  id: string;
  type: ComponentType;
  [k: string]: unknown;
} & Component1;

/**
 * The set of supported component types.
 */
export type ComponentType =
  | "Text"
  | "List"
  | "Card"
  | "Image"
  | "AudioPlayer"
  | "TextField"
  | "MutuallyExclusiveMultipleChoice"
  | "MultipleChoice"
  | "Button"
  | "Slider"
  | "Tabs"
  | "Divider"
  | "Carousel";

export type Component1 =
  | {
      type: "Text";
      /**
       * The text content to display, supporting markdown.
       */
      text: string;
      [k: string]: unknown;
    }
  | {
      type: "List";
      direction?: "vertical" | "horizontal";
      children: ComponentInstanceListRef;
      /**
       * Distribution of items along the main axis.
       */
      distribution?: "start" | "center" | "end";
      /**
       * Alignment of items along the cross axis.
       */
      alignment?: "start" | "center" | "end";
      [k: string]: unknown;
    }
  | {
      type: "Card";
      child: ComponentInstanceRef;
      [k: string]: unknown;
    }
  | {
      type: "Image";
      url: string;
      /**
       * Hint for how to fit the image to its container (e.g., 'cover', 'contain').
       */
      fit?: string;
      max_width?: number;
      max_height?: number;
      [k: string]: unknown;
    }
  | {
      type: "AudioPlayer";
      url: string;
      /**
       * A description or title for the audio clip.
       */
      description?: string;
      [k: string]: unknown;
    }
  | {
      type: "TextField";
      /**
       * A label or placeholder text for the input field.
       */
      description?: string;
      /**
       * The type of data expected in the text field.
       */
      inputType?: "shortText" | "number" | "date" | "longText";
      /**
       * A data binding to a key in the data model that this field's value is synced with.
       */
      valueBinding: string;
      [k: string]: unknown;
    }
  | {
      type: "MutuallyExclusiveMultipleChoice";
      /**
       * A list of options where only one can be selected.
       */
      options: string[];
      /**
       * A data binding to a key in the data model that the selected option is synced with.
       */
      valueBinding?: string;
      [k: string]: unknown;
    }
  | {
      type: "MultipleChoice";
      /**
       * A list of options where multiple can be selected.
       */
      options: string[];
      /**
       * A data binding to a key in the data model that the array of selected options is synced with.
       */
      valueBinding?: string;
      [k: string]: unknown;
    }
  | {
      type: "Button";
      label: string;
      action: Action;
      [k: string]: unknown;
    }
  | {
      type: "Slider";
      min?: number;
      max?: number;
      step?: number;
      /**
       * A value that can be a literal, a reference to the global data model (starts with '/'), or a reference to a local data context (does not start with '/').
       */
      valueBinding?: string;
      [k: string]: unknown;
    }
  | {
      type: "Tabs";
      tabItems: {
        label: string;
        child: ComponentInstanceRef;
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    }
  | {
      type: "Divider";
      [k: string]: unknown;
    }
  | {
      type: "Carousel";
      children: ComponentInstanceListRef;
      [k: string]: unknown;
    };

export type ComponentTemplateRef = {
  template: ComponentInstanceRef;
  /**
   * A data binding reference to a list within the data model.
   */
  dataBinding: string;
};

/**
 * A reference to a list of components. Can be an explicit list of IDs or a template with a data binding to a list in the data model.
 */
export type ComponentInstanceListRef =
  | ComponentInstanceRef[]
  | ComponentTemplateRef;
/**
 * A reference to a component instance by its unique ID.
 */
export type ComponentInstanceRef = string;
/**
 * A value that can be a literal, a reference to the global data model (starts with '/'), or a reference to a local data context (does not start with '/').
 */
export type DataBinding =
  | string
  | number
  | boolean
  | {
      [k: string]: unknown;
    }
  | unknown[];

/**
 * A schema for defining a UI layout composed of a hierarchy of components, a global style, and a shared data model.
 */
export interface GULF {
  /**
   * The ID of the root component from which rendering should begin.
   */
  root: ComponentInstanceRef;
  /**
   * A flat list of all component instances available for rendering. Components reference each other by ID.
   */
  components: Component[];
  dataModel: DataModel;
}
/**
 * Represents a user-initiated action, like a button click, which can carry both static and dynamically-resolved contextual data.
 */
export interface Action {
  /**
   * A unique name identifying the action to be handled by the application logic (e.g., 'submitForm', 'generateDog').
   */
  action: string;
  /**
   * A plain JSON object of static, literal values to be passed along with the action. This data is fixed and does not change.
   */
  staticContext?: {
    [k: string]: unknown;
  };
  /**
   * A key-value map where each value is a data binding. These bindings are resolved to their current values from the UI state or data model at the exact moment the action is triggered.
   */
  dynamicContext?: {
    [k: string]: string;
  };
  [k: string]: unknown;
}

export type DataModelObjectValue =
  | null
  | undefined
  | number
  | string
  | boolean
  | DataModel
  | DataModelObjectValue[];

export type DataModel = {
  [key: string]: DataModelObjectValue;
};

export type ExpandedGULFValue = {
  data: DataModelObjectValue;
  component: Component;
  children: ExpandedGULF;
};
export type ExpandedGULF = Map<ComponentInstanceRef, ExpandedGULFValue>;
