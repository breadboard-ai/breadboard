{
  "title": "JSON Validator",
  "description": "A very simple example of a validator board: it validates JSON against a schema. All validators share the same shape: `text` in, `text` out (if valid) or `error` out (if invalid).",
  "$schema": "https://raw.githubusercontent.com/breadboard-ai/breadboard/@google-labs/breadboard-schema@1.4.1/packages/schema/breadboard.schema.json",
  "version": "0.0.1",
  "edges": [
    {
      "from": "formatParsingError",
      "to": "outputFailure",
      "out": "result",
      "in": "error"
    },
    {
      "from": "formatValidationError",
      "to": "outputFailure",
      "out": "result",
      "in": "error"
    },
    {
      "from": "parameters",
      "to": "formatValidationError",
      "out": "schema",
      "in": "schema"
    },
    {
      "from": "parameters",
      "to": "validateJson-1",
      "out": "schema",
      "in": "schema"
    },
    {
      "from": "parameters",
      "to": "validateJson-1",
      "out": "text",
      "in": "json"
    },
    {
      "from": "parseErrorType",
      "to": "formatParsingError",
      "out": "parsing",
      "in": "parsing"
    },
    {
      "from": "parseErrorType",
      "to": "formatValidationError",
      "out": "validation",
      "in": "validation"
    },
    {
      "from": "validateJson-1",
      "to": "formatParsingError",
      "out": "$error",
      "in": "$error"
    },
    {
      "from": "validateJson-1",
      "to": "formatValidationError",
      "out": "$error",
      "in": "$error"
    },
    {
      "from": "validateJson-1",
      "to": "outputSuccess",
      "out": "json",
      "in": "text"
    },
    {
      "from": "validateJson-1",
      "to": "parseErrorType",
      "out": "$error",
      "in": "json"
    }
  ],
  "nodes": [
    {
      "id": "parameters",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "schema": {
              "type": "object",
              "title": "Schema",
              "description": "The schema of the JSON to be generated",
              "examples": [
                "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"first_answer\": {\n      \"type\": \"string\",\n      \"description\": \"a first attempt at the answer to the question\"\n    },\n    \"assumptions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"description\": \"one or more assumptions made when making the response above\",\n        \"type\": \"string\"\n      }\n    },\n    \"critique\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"description\": \"how might these assumptions be wrong?\",\n        \"type\": \"string\"\n      }\n    },\n    \"response\": {\n      \"type\": \"string\",\n      \"description\": \"the final response made synthesizing first_answer, assumptions, and critique\"\n    }\n  },\n  \"required\": [\n    \"first_answer\",\n    \"assumptions\",\n    \"critique\",\n    \"response\"\n  ],\n  \"additionalProperties\": false\n}"
              ],
              "format": "multiline"
            },
            "text": {
              "type": "string",
              "title": "JSON",
              "description": "The JSON to validate",
              "examples": [
                "{\n  first_answer: \"to live\",\n  \"guesses\": [\n      \"life is meaningful\",\n      \"there is a single meaning to life\",\n      \"the meaning of life is inherent to life itself\"\n  ],\n  \"critique\": [\n      \"life may not be meaningful\",\n      \"there may be multiple meanings to life\",\n      \"the meaning of life may be extrinsic to life itself\"\n  ],\n  \"response\": \"the meaning of life is a complex question with no easy answer\"\n}"
              ],
              "format": "multiline"
            }
          },
          "required": [
            "text"
          ]
        }
      }
    },
    {
      "id": "outputFailure",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "error": {
              "type": "object",
              "title": "Errors",
              "description": "The validator errors that occurred"
            }
          }
        }
      }
    },
    {
      "id": "outputSuccess",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "object",
              "title": "JSON",
              "description": "The validated JSON"
            }
          }
        }
      }
    },
    {
      "id": "formatParsingError",
      "type": "jsonata",
      "configuration": {
        "expression": "\"JSON Parsing Error: \" & `$error`.error.message"
      }
    },
    {
      "id": "formatValidationError",
      "type": "jsonata",
      "configuration": {
        "expression": "\"JSON Validation Error: \" & `$error`.error.message & \"\nWhen validaing against this schema:\n\n\" & $string(schema, true)"
      }
    },
    {
      "id": "parseErrorType",
      "type": "jsonata",
      "configuration": {
        "expression": "{ error.type: true }",
        "raw": true
      }
    },
    {
      "id": "validateJson-1",
      "type": "validateJson",
      "configuration": {}
    }
  ],
  "kits": [
    {
      "title": "JSON Kit",
      "url": "npm:@google-labs/json-kit"
    }
  ]
}