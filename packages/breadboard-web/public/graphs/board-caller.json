{
  "title": "Board Caller",
  "description": "Takes a tool-calling-capable generator and a list of board URLs, and helps generator call these boards as tools",
  "version": "0.0.6",
  "edges": [
    {
      "from": "callBoardAsTool",
      "to": "hoistOutputs",
      "out": "*",
      "in": ""
    },
    {
      "from": "formatFunctionDeclarations",
      "to": "generate",
      "out": "tools",
      "in": "tools"
    },
    {
      "from": "formatFunctionDeclarations",
      "to": "getBoardArgs",
      "out": "urlMap",
      "in": "urlMap"
    },
    {
      "from": "formatOutput",
      "to": "output",
      "out": "*",
      "in": ""
    },
    {
      "from": "generate",
      "to": "formatOutput",
      "out": "*",
      "in": ""
    },
    {
      "from": "generate",
      "to": "getBoardArgs",
      "out": "toolCalls",
      "in": "toolCalls"
    },
    {
      "from": "getBoardArgs",
      "to": "callBoardAsTool",
      "out": "*",
      "in": ""
    },
    {
      "from": "hoistOutputs",
      "to": "formatOutput",
      "out": "result",
      "in": "result"
    },
    {
      "from": "parameters",
      "to": "formatFunctionDeclarations",
      "out": "boards",
      "in": "boards"
    },
    {
      "from": "parameters",
      "to": "generate",
      "out": "*",
      "in": ""
    },
    {
      "from": "parameters",
      "to": "generate",
      "out": "generator",
      "in": "$board"
    },
    {
      "from": "parameters",
      "to": "getBoardArgs",
      "out": "generator",
      "in": "generator"
    }
  ],
  "nodes": [
    {
      "id": "parameters",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "boards": {
              "type": "array",
              "title": "Tools",
              "description": "URLs of boards to use as tools",
              "examples": [
                "[ \"https://raw.githubusercontent.com/breadboard-ai/breadboard/main/packages/breadboard-web/public/graphs/math.json\", \"https://raw.githubusercontent.com/breadboard-ai/breadboard/main/packages/breadboard-web/public/graphs/search-summarize.json\" ]"
              ],
              "items": {
                "type": "string"
              }
            },
            "context": {
              "type": "array",
              "title": "Context",
              "description": "An array of messages to use as conversation context",
              "default": "[]",
              "items": {
                "type": "object"
              }
            },
            "generator": {
              "type": "string",
              "title": "Generator",
              "description": "The URL of the generator to call",
              "examples": [
                "gemini-generator.json"
              ]
            },
            "text": {
              "type": "string",
              "title": "Text",
              "description": "The text to use with tool calling",
              "examples": [
                "What is the square root of e?"
              ]
            }
          },
          "required": [
            "boards",
            "text"
          ]
        }
      }
    },
    {
      "id": "output",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "array",
              "title": "Context",
              "description": "The conversation context"
            },
            "name": {
              "type": "string",
              "title": "Tool Name",
              "description": "The name of the tool that generated the text"
            },
            "result": {
              "type": "object",
              "title": "Result",
              "description": "The result generated by the tool"
            }
          }
        }
      }
    },
    {
      "id": "callBoardAsTool",
      "type": "invoke",
      "configuration": {}
    },
    {
      "id": "formatFunctionDeclarations",
      "type": "invoke",
      "configuration": {
        "path": "#formatFunctionDeclarations"
      }
    },
    {
      "id": "formatOutput",
      "type": "jsonata",
      "configuration": {
        "expression": "{\n      \"result\": result,\n      \"name\": toolCalls[0].name,\n      \"context\": context\n    }",
        "raw": true
      }
    },
    {
      "id": "generate",
      "type": "invoke",
      "configuration": {
        "useStreaming": false
      }
    },
    {
      "id": "getBoardArgs",
      "type": "jsonata",
      "configuration": {
        "expression": "$merge([{\n        \"$board\": $lookup(urlMap, toolCalls[0].name)\n      },\n      toolCalls[0].args,\n      { \"generator\": generator }\n    ])",
        "raw": true
      }
    },
    {
      "id": "hoistOutputs",
      "type": "jsonata",
      "configuration": {
        "expression": "$ ~> | ** | {}, \"schema\" |"
      }
    }
  ],
  "graphs": {
    "formatFunctionDeclarations": {
      "edges": [
        {
          "from": "formatResults",
          "to": "output-5",
          "out": "*",
          "in": ""
        },
        {
          "from": "map-3",
          "to": "formatResults",
          "out": "list",
          "in": "list"
        },
        {
          "from": "input-1",
          "to": "map-3",
          "out": "boards",
          "in": "list"
        }
      ],
      "nodes": [
        {
          "id": "output-5",
          "type": "output",
          "configuration": {}
        },
        {
          "id": "formatResults",
          "type": "jsonata",
          "configuration": {
            "expression": "{\n          \"tools\": [list.function],\n          \"urlMap\": $merge([list.{ function.name: boardURL }])\n        }",
            "raw": true
          }
        },
        {
          "id": "map-3",
          "type": "map",
          "configuration": {
            "board": {
              "kind": "board",
              "board": {
                "kits": [],
                "edges": [
                  {
                    "from": "boardToFunction",
                    "to": "output-2",
                    "out": "function",
                    "in": "function"
                  },
                  {
                    "from": "input-1",
                    "to": "boardToFunction",
                    "out": "item",
                    "in": "boardURL"
                  },
                  {
                    "from": "input-1",
                    "to": "output-2",
                    "out": "item",
                    "in": "boardURL"
                  }
                ],
                "nodes": [
                  {
                    "id": "output-2",
                    "type": "output",
                    "configuration": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "boardURL": {
                            "type": "string",
                            "title": "boardURL"
                          },
                          "function": {
                            "type": "string",
                            "title": "function"
                          }
                        }
                      }
                    }
                  },
                  {
                    "id": "boardToFunction",
                    "type": "invoke",
                    "configuration": {
                      "$board": "board-as-function.json"
                    }
                  },
                  {
                    "id": "input-1",
                    "type": "input",
                    "configuration": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "item": {
                            "type": "string",
                            "title": "boardURL"
                          }
                        },
                        "required": [
                          "item"
                        ]
                      }
                    }
                  }
                ],
                "graphs": {}
              }
            }
          }
        },
        {
          "id": "input-1",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "boards": {
                  "title": "List",
                  "type": "array",
                  "description": "The list to iterate over."
                }
              },
              "required": [
                "boards"
              ]
            }
          }
        }
      ],
      "graphs": {}
    }
  }
}