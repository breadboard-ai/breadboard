{
  "title": "Ask User",
  "description": "A building block for the nascent agent framework",
  "version": "0.0.1",
  "edges": [
    {
      "from": "appendContext",
      "to": "output-2",
      "out": "context",
      "in": "context"
    },
    {
      "from": "createSchema",
      "to": "appendContext",
      "out": "context",
      "in": "context"
    },
    {
      "from": "createSchema",
      "to": "input",
      "out": "schema",
      "in": "schema"
    },
    {
      "from": "input",
      "to": "appendContext",
      "out": "text",
      "in": "text"
    },
    {
      "from": "input",
      "to": "output-2",
      "out": "text",
      "in": "text"
    },
    {
      "from": "input-1",
      "to": "createSchema",
      "out": "description",
      "in": "description"
    },
    {
      "from": "input-1",
      "to": "createSchema",
      "out": "title",
      "in": "title"
    },
    {
      "from": "input-1",
      "to": "maybeOutputRouter",
      "out": "context",
      "in": "context"
    },
    {
      "from": "maybeOutputRouter",
      "to": "createSchema",
      "out": "context",
      "in": "context"
    },
    {
      "from": "maybeOutputRouter",
      "to": "output",
      "out": "output",
      "in": "output"
    }
  ],
  "nodes": [
    {
      "id": "input",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "title": "Text"
            }
          },
          "required": [
            "text"
          ]
        }
      }
    },
    {
      "id": "input-1",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "object",
              "title": "Context",
              "description": "Incoming conversation context",
              "default": "[]",
              "examples": [
                "[{\"role\":\"model\",\"parts\":[{\"text\":\"Hello, user!\"}]}]"
              ]
            },
            "description": {
              "type": "string",
              "title": "Description",
              "description": "The description of what to ask",
              "default": "User's question or request"
            },
            "title": {
              "type": "string",
              "title": "Title",
              "description": "The title to ask",
              "default": "User"
            }
          },
          "required": []
        }
      }
    },
    {
      "id": "output",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "behavior": [
            "bubble"
          ],
          "properties": {
            "output": {
              "type": "string",
              "title": "Output",
              "description": "The output to display"
            }
          }
        }
      }
    },
    {
      "id": "output-2",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "array",
              "title": "Context"
            },
            "text": {
              "type": "string",
              "title": "Text"
            }
          }
        }
      }
    },
    {
      "id": "appendContext",
      "type": "runJavascript",
      "configuration": {
        "code": "const appendContext = ({context,text})=>{return{context:[...context||[],{role:\"user\",parts:[{text}]}]}};",
        "name": "appendContext",
        "raw": true
      }
    },
    {
      "id": "createSchema",
      "type": "runJavascript",
      "configuration": {
        "code": "const createSchema = ({title,description,context})=>{const schema2={type:\"object\",properties:{text:{title,description,behavior:[\"transient\"]}}};return{schema:schema2,context}};",
        "name": "createSchema",
        "raw": true
      }
    },
    {
      "id": "maybeOutputRouter",
      "type": "runJavascript",
      "configuration": {
        "code": "const maybeOutputRouter = ({context})=>{if(Array.isArray(context)&&context.length>0){const lastItem=context[context.length-1];if(lastItem.role===\"model\"){const output=lastItem.parts.map(item=>item.text).join(\"/n\");return{output,context}}}return{context}};",
        "name": "maybeOutputRouter",
        "raw": true
      }
    }
  ]
}