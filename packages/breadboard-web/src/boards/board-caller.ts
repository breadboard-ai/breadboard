/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

import { Board } from "@google-labs/breadboard";
import Core from "@google-labs/core-kit";
import Starter from "@google-labs/llm-starter";

const board = new Board({
  title: "Board Caller",
  description:
    "Takes a tool-calling-capable generator and a list of board URLs, and helps generator call these boards as tools",
  version: "0.0.6",
});

const starter = board.addKit(Starter);
const core = board.addKit(Core);

const output = board.output({
  $id: "output",
  schema: {
    type: "object",
    properties: {
      result: {
        type: "object",
        title: "Result",
        description: "The result generated by the tool",
      },
      name: {
        type: "string",
        title: "Tool Name",
        description: "The name of the tool that generated the text",
      },
      context: {
        type: "array",
        title: "Context",
        description: "The conversation context",
      },
    },
  },
});

const parameters = board.input({
  $id: "parameters",
  schema: {
    type: "object",
    properties: {
      text: {
        type: "string",
        title: "Text",
        description: "The text to use with tool calling",
        examples: ["What is the square root of e?"],
      },
      context: {
        type: "array",
        title: "Context",
        description: "An array of messages to use as conversation context",
        items: {
          type: "object",
        },
        default: "[]",
      },
      generator: {
        type: "string",
        title: "Generator",
        description: "The URL of the generator to call",
        examples: ["gemini-generator.json"],
      },
      boards: {
        type: "array",
        title: "Tools",
        description: "URLs of boards to use as tools",
        items: {
          type: "string",
        },
        examples: [
          '[ "https://raw.githubusercontent.com/breadboard-ai/breadboard/main/seeds/breadboard-web/public/graphs/math.json", "https://raw.githubusercontent.com/breadboard-ai/breadboard/main/seeds/breadboard-web/public/graphs/search-summarize.json" ]',
        ],
      },
    },
    required: ["text", "boards"],
  },
});

/**
 * Formats a list of boards as function declarations that can be supplied
 * to a generator.
 */
const formatFunctionDeclarations = core.invoke((board, input, output) => {
  const core = board.addKit(Core);

  const turnBoardsToFunctions = core.map((_, input, output) => {
    // for each URL, invoke board-as-function.
    input
      .wire(
        "item->boardURL",
        core
          .invoke({
            $id: "boardToFunction",
            path: "/graphs/board-as-function.json",
          })
          .wire("function->", output)
      )
      .wire("item->boardURL", output);
  });

  const formatResults = starter.jsonata({
    $id: "formatResults",
    expression: `{
      "tools": [function],
      "urlMap": $merge([{ function.name: boardURL }])
  }`,
    raw: true,
  });

  input.wire(
    "boards->list",
    turnBoardsToFunctions.wire("list->json", formatResults.wire("*->", output))
  );
});

const generate = core
  .invoke({ $id: "generate" })
  .wire(
    "<-useStreaming",
    core.passthrough({ $id: "noStreaming", useStreaming: false })
  );

const getBoardArgs = starter.jsonata({
  $id: "getBoardArgs",
  expression: `$merge([{
      "path": $lookup(urlMap, toolCalls[0].name)
    },
    { "generator": generator },
    toolCalls[0].args
  ])`,
  raw: true,
});

const formatOutput = starter
  .jsonata({
    $id: "formatOutput",
    expression: `{ "result": result, "name": toolCalls[0].name, "context": context }`,
    raw: true,
  })
  .wire("<-toolCalls", generate);

parameters
  .wire("text->", generate)
  .wire("context->", generate)
  .wire(
    "boards->",
    formatFunctionDeclarations
      .wire("tools->", generate)
      .wire("urlMap->", getBoardArgs)
  )
  .wire(
    "generator->path",
    generate
      .wire(
        "toolCalls->",
        getBoardArgs
          .wire(
            "*->",
            core.invoke({ $id: "callBoardAsTool" }).wire(
              "*->",
              starter
                .jsonata({
                  $id: "hoistOutputs",
                  expression: `$ ~> | ** | {}, "schema" |`,
                })
                .wire("result->", formatOutput.wire("*->", output))
            )
          )
          .wire("<-generator", parameters)
      )
      .wire("context->", formatOutput)
  );

export default board;
