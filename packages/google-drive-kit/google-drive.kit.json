{
  "title": "Google Drive Kit",
  "description": "Nodes for reading & writing to files in Google Drive, including Docs and Sheets",
  "version": "0.0.1",
  "url": "https://raw.githubusercontent.com/breadboard-ai/breadboard/main/packages/google-drive-kit/google-drive.kit.json",
  "nodes": {
    "getFileContent": {
      "metadata": {
        "title": "Get File Content",
        "description": "Get the content of a file in Google Drive",
        "icon": "google-drive"
      },
      "edges": [
        {
          "from": "connection:google-drive-limited-secret",
          "to": "runJavascript-0",
          "out": "connection:google-drive-limited",
          "in": "token"
        },
        {
          "from": "fetch-0",
          "to": "output-0",
          "out": "response",
          "in": "content"
        },
        {
          "from": "input-0",
          "to": "urlTemplate-0",
          "out": "fileId",
          "in": "fileId"
        },
        {
          "from": "runJavascript-0",
          "to": "fetch-0",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "urlTemplate-0",
          "to": "fetch-0",
          "out": "url",
          "in": "url"
        }
      ],
      "nodes": [
        {
          "id": "input-0",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "fileId": {
                  "type": "string",
                  "behavior": [
                    "google-drive-file-id"
                  ],
                  "title": "File ID",
                  "description": "The ID of the file.\nSee https://developers.google.com/drive/api/reference/rest/v3/files/get#body.PATH_PARAMETERS.file_id"
                }
              },
              "required": [
                "fileId"
              ]
            }
          }
        },
        {
          "id": "output-0",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": [
                    "array",
                    "boolean",
                    "null",
                    "number",
                    "object",
                    "string"
                  ],
                  "title": "Content",
                  "description": "The content of the file"
                }
              },
              "required": [
                "content"
              ]
            }
          }
        },
        {
          "id": "connection:google-drive-limited-secret",
          "type": "secrets",
          "configuration": {
            "keys": [
              "connection:google-drive-limited"
            ]
          }
        },
        {
          "id": "fetch-0",
          "type": "fetch",
          "configuration": {}
        },
        {
          "id": "runJavascript-0",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({token})=>({headers:{Authorization:`Bearer ${token}`}});",
            "inputSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "headers": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "raw": true
          }
        },
        {
          "id": "urlTemplate-0",
          "type": "urlTemplate",
          "configuration": {
            "template": "https://www.googleapis.com/drive/v3/files/{fileId}?alt=media"
          }
        }
      ]
    },
    "listFiles": {
      "metadata": {
        "title": "List Files",
        "description": "List files in Google Drive.\n\nSee https://developers.google.com/drive/api/guides/search-files for more details.",
        "icon": "google-drive"
      },
      "edges": [
        {
          "from": "cast-0",
          "to": "unnest-0",
          "out": "value",
          "in": "nested"
        },
        {
          "from": "connection:google-drive-limited-secret",
          "to": "runJavascript-0",
          "out": "connection:google-drive-limited",
          "in": "token"
        },
        {
          "from": "fetch-0",
          "to": "cast-0",
          "out": "response",
          "in": "value"
        },
        {
          "from": "input-0",
          "to": "urlTemplate-0",
          "out": "query",
          "in": "query"
        },
        {
          "from": "runJavascript-0",
          "to": "fetch-0",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "unnest-0",
          "to": "output-0",
          "out": "files",
          "in": "files"
        },
        {
          "from": "unnest-0",
          "to": "output-0",
          "out": "incompleteSearch",
          "in": "incompleteSearch"
        },
        {
          "from": "unnest-0",
          "to": "output-0",
          "out": "nextPageToken",
          "in": "nextPageToken",
          "optional": true
        },
        {
          "from": "urlTemplate-0",
          "to": "fetch-0",
          "out": "url",
          "in": "url"
        }
      ],
      "nodes": [
        {
          "id": "input-0",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string",
                  "behavior": [
                    "google-drive-query"
                  ],
                  "title": "Query",
                  "description": "A Google Drive search query.\nSee https://developers.google.com/drive/api/guides/search-files for details.",
                  "examples": [
                    "'<folder id>' in parents",
                    "name = 'hello'",
                    "fullText contains 'hello'",
                    "mimeType = 'application/vnd.google-apps.folder'",
                    "sharedWithMe and name contains 'hello'"
                  ]
                }
              },
              "required": [
                "query"
              ]
            }
          }
        },
        {
          "id": "output-0",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "enum": [
                          "drive#file"
                        ]
                      },
                      "mimeType": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resourceKey": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "kind",
                      "mimeType",
                      "id",
                      "name"
                    ],
                    "additionalProperties": false
                  },
                  "title": "Files",
                  "description": "The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.\n\nSee https://developers.google.com/drive/api/reference/rest/v3/files/list#body.FileList.FIELDS.files"
                },
                "incompleteSearch": {
                  "type": "boolean",
                  "title": "Incomplete Search",
                  "description": "Whether the search process was incomplete. If true, then some search results might be missing, since all documents were not searched. This can occur when searching multiple drives with the 'allDrives' corpora, but all corpora couldn't be searched. When this happens, it's suggested that clients narrow their query by choosing a different corpus such as 'user' or 'drive'.\n\nSee https://developers.google.com/drive/api/reference/rest/v3/files/list#body.FileList.FIELDS.incomplete_search"
                },
                "nextPageToken": {
                  "type": "string",
                  "title": "Next Page Token",
                  "description": "The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.\n\nSee https://developers.google.com/drive/api/reference/rest/v3/files/list#body.FileList.FIELDS.next_page_token"
                }
              },
              "required": [
                "files",
                "incompleteSearch"
              ]
            }
          }
        },
        {
          "id": "cast-0",
          "type": "cast",
          "configuration": {
            "type": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "drive#fileList"
                  ]
                },
                "nextPageToken": {
                  "type": "string"
                },
                "incompleteSearch": {
                  "type": "boolean"
                },
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "enum": [
                          "drive#file"
                        ]
                      },
                      "mimeType": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resourceKey": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "kind",
                      "mimeType",
                      "id",
                      "name"
                    ],
                    "additionalProperties": false
                  }
                }
              },
              "required": [
                "kind",
                "incompleteSearch",
                "files"
              ],
              "additionalProperties": false
            }
          }
        },
        {
          "id": "connection:google-drive-limited-secret",
          "type": "secrets",
          "configuration": {
            "keys": [
              "connection:google-drive-limited"
            ]
          }
        },
        {
          "id": "fetch-0",
          "type": "fetch",
          "configuration": {}
        },
        {
          "id": "runJavascript-0",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({token})=>({headers:{Authorization:`Bearer ${token}`}});",
            "inputSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "headers": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "raw": true
          }
        },
        {
          "id": "unnest-0",
          "type": "unnest",
          "configuration": {}
        },
        {
          "id": "urlTemplate-0",
          "type": "urlTemplate",
          "configuration": {
            "template": "https://www.googleapis.com/drive/v3/files?q={query}"
          }
        }
      ]
    },
    "exportFile": {
      "metadata": {
        "title": "Export File",
        "description": "Export a Google Workspace document to the requested MIME type.",
        "icon": "google-drive"
      },
      "edges": [
        {
          "from": "connection:google-drive-limited-secret",
          "to": "runJavascript-0",
          "out": "connection:google-drive-limited",
          "in": "token"
        },
        {
          "from": "fetch-0",
          "to": "output-0",
          "out": "response",
          "in": "content"
        },
        {
          "from": "input-0",
          "to": "urlTemplate-0",
          "out": "fileId",
          "in": "fileId"
        },
        {
          "from": "input-0",
          "to": "urlTemplate-0",
          "out": "mimeType",
          "in": "mimeType"
        },
        {
          "from": "runJavascript-0",
          "to": "fetch-0",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "urlTemplate-0",
          "to": "fetch-0",
          "out": "url",
          "in": "url"
        }
      ],
      "nodes": [
        {
          "id": "input-0",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "fileId": {
                  "type": "string",
                  "behavior": [
                    "google-drive-file-id"
                  ],
                  "title": "File ID",
                  "description": "The ID of the Google Drive file.\nSee https://developers.google.com/drive/api/reference/rest/v3/files/export#body.PATH_PARAMETERS.file_id"
                },
                "mimeType": {
                  "type": "string",
                  "title": "MIME Type",
                  "description": "The MIME type of the format requested for this export.\nSee https://developers.google.com/drive/api/reference/rest/v3/files/export#body.QUERY_PARAMETERS.mime_type"
                }
              },
              "required": [
                "fileId",
                "mimeType"
              ]
            }
          }
        },
        {
          "id": "output-0",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": [
                    "array",
                    "boolean",
                    "null",
                    "number",
                    "object",
                    "string"
                  ],
                  "title": "Content",
                  "description": "The content of the file\nSee https://developers.google.com/drive/api/reference/rest/v3/files/export#response-body"
                }
              },
              "required": [
                "content"
              ]
            }
          }
        },
        {
          "id": "connection:google-drive-limited-secret",
          "type": "secrets",
          "configuration": {
            "keys": [
              "connection:google-drive-limited"
            ]
          }
        },
        {
          "id": "fetch-0",
          "type": "fetch",
          "configuration": {}
        },
        {
          "id": "runJavascript-0",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({token})=>({headers:{Authorization:`Bearer ${token}`}});",
            "inputSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "headers": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "raw": true
          }
        },
        {
          "id": "urlTemplate-0",
          "type": "urlTemplate",
          "configuration": {
            "template": "https://www.googleapis.com/drive/v3/files/{fileId}/export{?mimeType}"
          }
        }
      ]
    },
    "contextToSlides": {
      "metadata": {
        "title": "Context to Slides",
        "description": "Turns LLM Conversation Context into a Google Slides presentation",
        "icon": "google-drive"
      },
      "edges": [
        {
          "from": "connection:google-drive-limited-secret",
          "to": "runJavascript-2",
          "out": "connection:google-drive-limited",
          "in": "token"
        },
        {
          "from": "fetch-0",
          "to": "runJavascript-0",
          "out": "response",
          "in": "response"
        },
        {
          "from": "fetch-1",
          "to": "runJavascript-1",
          "out": "response",
          "in": "presentation"
        },
        {
          "from": "input-0",
          "to": "runJavascript-3",
          "out": "title",
          "in": "context"
        },
        {
          "from": "input-0",
          "to": "runJavascript-4",
          "out": "context",
          "in": "context"
        },
        {
          "from": "runJavascript-0",
          "to": "output-0",
          "out": "url",
          "in": "context"
        },
        {
          "from": "runJavascript-1",
          "to": "runJavascript-4",
          "out": "slideId",
          "in": "slideId"
        },
        {
          "from": "runJavascript-1",
          "to": "urlTemplate-0",
          "out": "presentationId",
          "in": "presentationId"
        },
        {
          "from": "runJavascript-2",
          "to": "fetch-0",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "runJavascript-2",
          "to": "fetch-1",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "runJavascript-3",
          "to": "fetch-1",
          "out": "body",
          "in": "body"
        },
        {
          "from": "runJavascript-4",
          "to": "fetch-0",
          "out": "body",
          "in": "body"
        },
        {
          "from": "urlTemplate-0",
          "to": "fetch-0",
          "out": "url",
          "in": "url"
        }
      ],
      "nodes": [
        {
          "id": "input-0",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "type": "array",
                  "title": "Context in",
                  "description": "The conversation context to convert to a new Google Slides presentation. Only the last item in the context will be used for conversion.",
                  "items": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "additionalProperties": false,
                    "behavior": [
                      "llm-content"
                    ]
                  }
                },
                "title": {
                  "type": "array",
                  "title": "Title",
                  "description": "The title of the new Google Slide presentatio",
                  "items": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "additionalProperties": false,
                    "behavior": [
                      "llm-content",
                      "config"
                    ]
                  }
                }
              },
              "required": [
                "context",
                "title"
              ]
            }
          }
        },
        {
          "id": "output-0",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "type": "string",
                  "title": "URL",
                  "description": "The URL of the newly created presentation"
                }
              },
              "required": [
                "context"
              ]
            }
          }
        },
        {
          "id": "connection:google-drive-limited-secret",
          "type": "secrets",
          "configuration": {
            "keys": [
              "connection:google-drive-limited"
            ]
          }
        },
        {
          "id": "fetch-0",
          "type": "fetch",
          "configuration": {
            "method": "POST"
          },
          "metadata": {
            "title": "Call Batch Update API",
            "description": "Populating the slides."
          }
        },
        {
          "id": "fetch-1",
          "type": "fetch",
          "configuration": {
            "method": "POST",
            "url": "https://slides.googleapis.com/v1/presentations"
          },
          "metadata": {
            "title": "Call Create Slides API",
            "description": "Creating a new Slides presentation"
          }
        },
        {
          "id": "runJavascript-0",
          "type": "runJavascript",
          "configuration": {
            "code": "\"use strict\";\n// src/js-components/get-presentation-url.ts\n/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction run(inputs) {\n  const response = inputs.response;\n  return {\n    url: `https://docs.google.com/presentation/d/${response.presentationId}/edit?usp=sharing`\n  };\n}\n",
            "inputSchema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/def-0"
                }
              },
              "required": [
                "response"
              ],
              "definitions": {
                "def-0": {
                  "description": "All Breadboard values must be JSON serializable, and this is the set of\nJSON serializable types.",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/def-0"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/definitions/def-0"
                      }
                    },
                    {
                      "type": [
                        "null",
                        "string",
                        "number",
                        "boolean"
                      ]
                    }
                  ]
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                }
              },
              "required": [
                "url"
              ]
            },
            "raw": true
          },
          "metadata": {
            "title": "Get Presentation URL",
            "description": "Extracting presentation URL from response"
          }
        },
        {
          "id": "runJavascript-1",
          "type": "runJavascript",
          "configuration": {
            "code": "\"use strict\";\n// src/js-components/get-deck-metadata.ts\n/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction run(inputs) {\n  const presentation = inputs.presentation;\n  return {\n    presentationId: presentation.presentationId,\n    slideId: presentation.slides[0]?.objectId || \"Slide_0\"\n  };\n}\n",
            "inputSchema": {
              "type": "object",
              "properties": {
                "presentation": {
                  "$ref": "#/definitions/def-0"
                }
              },
              "required": [
                "presentation"
              ],
              "definitions": {
                "def-0": {
                  "description": "All Breadboard values must be JSON serializable, and this is the set of\nJSON serializable types.",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/def-0"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/definitions/def-0"
                      }
                    },
                    {
                      "type": [
                        "null",
                        "string",
                        "number",
                        "boolean"
                      ]
                    }
                  ]
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "presentationId": {
                  "type": "string"
                },
                "slideId": {
                  "type": "string"
                }
              },
              "required": [
                "presentationId",
                "slideId"
              ]
            },
            "raw": true
          },
          "metadata": {
            "title": "Get Presentation Metadata",
            "description": "Get metadata of the newly created slide presentation"
          }
        },
        {
          "id": "runJavascript-2",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({token})=>({headers:{Authorization:`Bearer ${token}`}});",
            "inputSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "headers": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "raw": true
          }
        },
        {
          "id": "runJavascript-3",
          "type": "runJavascript",
          "configuration": {
            "code": "\"use strict\";\n// ../types/dist/src/index.js\n/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// src/js-components/context-to-title.ts\n/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction run(inputs) {\n  let context = inputs.context;\n  const result = {\n    body: {\n      title: \"Untitled Slide Deck\"\n    }\n  };\n  if (typeof context === \"string\") {\n    result.body.title = context;\n    return result;\n  }\n  if (!Array.isArray(context)) {\n    context = [context];\n  }\n  const last = context.at(-1);\n  if (!last || !last.parts || !last.parts.length) {\n    return result;\n  }\n  result.body.title = last.parts.map((part) => \"text\" in part ? part.text : \"\").join(\" \");\n  return result;\n}\n",
            "inputSchema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/def-0"
                }
              },
              "required": [
                "context"
              ],
              "definitions": {
                "def-0": {
                  "description": "All Breadboard values must be JSON serializable, and this is the set of\nJSON serializable types.",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/def-0"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/definitions/def-0"
                      }
                    },
                    {
                      "type": [
                        "null",
                        "string",
                        "number",
                        "boolean"
                      ]
                    }
                  ]
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "body": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "title"
                  ]
                }
              },
              "required": [
                "body"
              ]
            },
            "raw": true
          },
          "metadata": {
            "title": "To Title",
            "description": "Converting LLM Content to New Slide Title"
          }
        },
        {
          "id": "runJavascript-4",
          "type": "runJavascript",
          "configuration": {
            "code": "\"use strict\";\n// ../types/dist/src/index.js\n/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// src/util/markdown.ts\n/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction parseMarkdown(text) {\n  const lines = text.split(/\\n/);\n  const result = [];\n  const cursor = { pos: 0 };\n  lines.map((line) => line.trimEnd()).forEach((line) => {\n    if (!line) {\n      return;\n    }\n    const heading = parseHeading(cursor, line);\n    if (heading) {\n      result.push(heading);\n      return;\n    }\n    const bullet = parseBullet(cursor, line);\n    if (bullet) {\n      result.push(bullet);\n      return;\n    }\n    result.push({\n      type: \"text\",\n      text: line,\n      ...updateCursor(cursor, line.length)\n    });\n  });\n  return result;\n}\nfunction updateCursor(cursor, len) {\n  const start = cursor.pos;\n  const end = (cursor.pos += len) - 1;\n  return { start, end };\n}\nfunction parseHeading(cursor, line) {\n  const match = line.match(/^(?<heading>#{1,6})\\s+(?<text>.+)$/);\n  if (!match) {\n    return null;\n  }\n  const heading = match.groups?.heading?.trim();\n  const text = match.groups?.text?.trim();\n  if (!heading || text === void 0) {\n    return null;\n  }\n  return {\n    type: \"heading\",\n    level: heading.length,\n    text,\n    ...updateCursor(cursor, text.length)\n  };\n}\nfunction parseBullet(cursor, line) {\n  const match = line.match(/^(?<indent>\\s*)[-+*]\\s+(?<text>.+)$/);\n  if (!match) {\n    return null;\n  }\n  const indent = match?.groups?.indent;\n  const text = match?.groups?.text?.trim();\n  if (indent === void 0 || text === void 0) {\n    return null;\n  }\n  return {\n    type: \"bullet\",\n    level: indent.length,\n    text,\n    ...updateCursor(cursor, text.length)\n  };\n}\n\n// src/js-components/context-to-slides.ts\n/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction run(inputs) {\n  const requests = contextToSlides(\n    inputs.context,\n    inputs.slideId\n  );\n  return {\n    body: { requests }\n  };\n}\nfunction contextToSlides(context, slideToDelete) {\n  const requests = [\n    {\n      deleteObject: {\n        objectId: slideToDelete\n      }\n    }\n  ];\n  const last = context.at(-1);\n  if (!last || !last.parts) {\n    return requests;\n  }\n  let slideId = 0;\n  last.parts.forEach((part) => {\n    if (\"text\" in part) {\n      const { prevSlideId, requests: newRequests } = textToSlideRequests(\n        slideId,\n        part.text\n      );\n      slideId = prevSlideId;\n      requests.push(...newRequests);\n    } else if (\"storedData\" in part) {\n      const { handle } = part.storedData;\n      if (handle) {\n        const id = `Slide-${++slideId}`;\n        requests.push(createSlide(id, \"\", \"BLANK\"), createImage(id, handle));\n      }\n    }\n  });\n  return requests;\n  function insertText(objectId, text, insertionIndex) {\n    return { insertText: { objectId, text, insertionIndex } };\n  }\n  function createParagraphBullets(objectId, textRange) {\n    return { createParagraphBullets: { objectId, textRange } };\n  }\n  function createImage(objectId, url) {\n    return {\n      createImage: {\n        url,\n        elementProperties: {\n          pageObjectId: objectId\n        }\n      }\n    };\n  }\n  function createSlide(slideId2, placeholderId, layout) {\n    const result = {\n      objectId: slideId2,\n      slideLayoutReference: { predefinedLayout: layout },\n      placeholderIdMappings: []\n    };\n    switch (layout) {\n      case \"TITLE\": {\n        result.placeholderIdMappings.push({\n          layoutPlaceholder: { type: \"CENTERED_TITLE\", index: 0 },\n          objectId: `${slideId2}-title`\n        });\n        result.placeholderIdMappings.push({\n          layoutPlaceholder: { type: \"SUBTITLE\", index: 0 },\n          objectId: placeholderId\n        });\n        break;\n      }\n      case \"TITLE_AND_BODY\": {\n        result.placeholderIdMappings.push({\n          layoutPlaceholder: { type: \"TITLE\", index: 0 },\n          objectId: `${slideId2}-title`\n        });\n        result.placeholderIdMappings.push({\n          layoutPlaceholder: { type: \"BODY\", index: 0 },\n          objectId: placeholderId\n        });\n        break;\n      }\n    }\n    return { createSlide: result };\n  }\n  function textToSlideRequests(startId, text) {\n    const lines = parseMarkdown(text);\n    const requests2 = [];\n    const textLines = [];\n    let prevPlaceholderId = null;\n    let prevSlideId = startId;\n    let offset = 0;\n    lines.forEach((line) => {\n      switch (line.type) {\n        case \"bullet\": {\n          addToBody(line);\n          break;\n        }\n        case \"heading\": {\n          finalizeSlide();\n          const { level, text: text2 } = line;\n          if (level == 1) {\n            if (!text2) {\n              return;\n            }\n            const slideId2 = createObjectId();\n            prevPlaceholderId = `${slideId2}-subtitle`;\n            requests2.push(\n              createSlide(slideId2, prevPlaceholderId, \"TITLE\"),\n              insertText(`${slideId2}-title`, text2)\n            );\n          } else {\n            const slideId2 = createObjectId();\n            prevPlaceholderId = `${slideId2}-body`;\n            requests2.push(\n              createSlide(slideId2, prevPlaceholderId, \"TITLE_AND_BODY\"),\n              insertText(`${slideId2}-title`, text2)\n            );\n          }\n          offset = line.end;\n          break;\n        }\n        case \"text\": {\n          addToBody(line);\n          break;\n        }\n      }\n    });\n    if (textLines.length > 0 && prevPlaceholderId) {\n      finalizeSlide();\n    }\n    return { requests: requests2, prevSlideId };\n    function createObjectId() {\n      return `Slide-${++prevSlideId}`;\n    }\n    function addToBody(line) {\n      if (prevPlaceholderId) {\n        textLines.push(line);\n      }\n    }\n    function finalizeSlide() {\n      if (!prevPlaceholderId) return;\n      requests2.push(\n        insertText(\n          prevPlaceholderId,\n          textLines.map((line) => line.text).join(\"\\n\")\n        )\n      );\n      let bulletStart = -1;\n      let bulletEnd = 0;\n      textLines.forEach((line) => {\n        if (bulletStart === -1) {\n          if (line.type === \"bullet\") bulletStart = line.start;\n        } else {\n          if (line.type === \"text\") bulletEnd = line.start - 1;\n        }\n      });\n      if (bulletStart !== -1) {\n        if (bulletEnd === 0) {\n          bulletEnd = textLines.at(-1).end;\n        }\n        const textRange = {\n          startIndex: bulletStart - offset,\n          endIndex: bulletEnd - offset,\n          type: \"FIXED_RANGE\"\n        };\n        requests2.push(createParagraphBullets(prevPlaceholderId, textRange));\n      }\n      textLines.length = 0;\n    }\n  }\n}\nfunction isDeleteObjectRequest(request) {\n  return \"deleteObject\" in request;\n}\nfunction isCreateSlideRequest(request) {\n  return \"createSlide\" in request;\n}\nfunction isInsertTextRequest(request) {\n  return \"insertText\" in request;\n}\nfunction isCreateImageRequest(request) {\n  return \"createImage\" in request;\n}\n",
            "inputSchema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/def-0"
                },
                "slideId": {
                  "type": "string"
                }
              },
              "required": [
                "context",
                "slideId"
              ],
              "definitions": {
                "def-0": {
                  "description": "All Breadboard values must be JSON serializable, and this is the set of\nJSON serializable types.",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/def-0"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/definitions/def-0"
                      }
                    },
                    {
                      "type": [
                        "null",
                        "string",
                        "number",
                        "boolean"
                      ]
                    }
                  ]
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "body": {
                  "$ref": "#/definitions/def-0"
                }
              },
              "required": [
                "body"
              ],
              "definitions": {
                "def-0": {
                  "description": "All Breadboard values must be JSON serializable, and this is the set of\nJSON serializable types.",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/def-0"
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/definitions/def-0"
                      }
                    },
                    {
                      "type": [
                        "null",
                        "string",
                        "number",
                        "boolean"
                      ]
                    }
                  ]
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "To Slide Requests",
            "description": "Converting LLM Content to Slide Requests"
          }
        },
        {
          "id": "urlTemplate-0",
          "type": "urlTemplate",
          "configuration": {
            "template": "https://slides.googleapis.com/v1/presentations/{presentationId}:batchUpdate"
          }
        }
      ]
    },
    "getBreadboardFolder": {
      "metadata": {
        "title": "Get Breadboard Folder",
        "description": "Gets (or creates if doesn't exist) a dedicated \"Breadboard\" folder in Google Drive. This folder can be used for story various Breadboard-specifc assets and boards.",
        "icon": "google-drive"
      },
      "edges": [
        {
          "from": "cast-0",
          "to": "runJavascript-0",
          "out": "value",
          "in": "response"
        },
        {
          "from": "cast-1",
          "to": "runJavascript-3",
          "out": "value",
          "in": "createFolderResponse"
        },
        {
          "from": "connection:google-drive-limited-secret",
          "to": "runJavascript-2",
          "out": "connection:google-drive-limited",
          "in": "token"
        },
        {
          "from": "fetch-0",
          "to": "cast-0",
          "out": "response",
          "in": "value"
        },
        {
          "from": "fetch-1",
          "to": "cast-1",
          "out": "response",
          "in": "value"
        },
        {
          "from": "input-0",
          "to": "runJavascript-4",
          "out": "folderName",
          "in": "folderName"
        },
        {
          "from": "runJavascript-0",
          "to": "output-0",
          "out": "id",
          "in": "id"
        },
        {
          "from": "runJavascript-0",
          "to": "runJavascript-4",
          "out": "notFound",
          "in": "notFound"
        },
        {
          "from": "runJavascript-1",
          "to": "urlTemplate-0",
          "out": "query",
          "in": "query"
        },
        {
          "from": "runJavascript-2",
          "to": "fetch-0",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "runJavascript-2",
          "to": "fetch-1",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "runJavascript-3",
          "to": "output-1",
          "out": "id",
          "in": "id"
        },
        {
          "from": "runJavascript-4",
          "to": "fetch-1",
          "out": "body",
          "in": "body"
        },
        {
          "from": "urlTemplate-0",
          "to": "fetch-0",
          "out": "url",
          "in": "url"
        }
      ],
      "nodes": [
        {
          "id": "input-0",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "folderName": {
                  "type": "string",
                  "behavior": [
                    "config"
                  ],
                  "title": "Name",
                  "description": "The name of the folder. \"Breadboard\" will be used if not specified.",
                  "default": "Breadboard"
                }
              },
              "required": []
            }
          }
        },
        {
          "id": "output-0",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ]
            }
          },
          "metadata": {
            "title": "Get Folder Output",
            "description": "Outputting ID of the existing folder"
          }
        },
        {
          "id": "output-1",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ]
            }
          },
          "metadata": {
            "title": "Create Folder Output",
            "description": "Outputtting ID of the newly created folder"
          }
        },
        {
          "id": "cast-0",
          "type": "cast",
          "configuration": {
            "type": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "drive#fileList"
                  ]
                },
                "nextPageToken": {
                  "type": "string"
                },
                "incompleteSearch": {
                  "type": "boolean"
                },
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "enum": [
                          "drive#file"
                        ]
                      },
                      "mimeType": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resourceKey": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "kind",
                      "mimeType",
                      "id",
                      "name"
                    ],
                    "additionalProperties": false
                  }
                }
              },
              "required": [
                "kind",
                "incompleteSearch",
                "files"
              ],
              "additionalProperties": false
            }
          }
        },
        {
          "id": "cast-1",
          "type": "cast",
          "configuration": {
            "type": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "drive#file"
                  ]
                },
                "mimeType": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "resourceKey": {
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "mimeType",
                "id",
                "name"
              ],
              "additionalProperties": false
            }
          }
        },
        {
          "id": "connection:google-drive-limited-secret",
          "type": "secrets",
          "configuration": {
            "keys": [
              "connection:google-drive-limited"
            ]
          }
        },
        {
          "id": "fetch-0",
          "type": "fetch",
          "configuration": {},
          "metadata": {
            "title": "List Files",
            "description": "Calling the List Files API"
          }
        },
        {
          "id": "fetch-1",
          "type": "fetch",
          "configuration": {
            "method": "POST",
            "url": "https://www.googleapis.com/drive/v3/files"
          },
          "metadata": {
            "title": "Create Folder",
            "description": "Calling the File Create API"
          }
        },
        {
          "id": "runJavascript-0",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({response})=>{const first=response.files?.at(0);if(!first){return{notFound:true}}return{id:first.id}};",
            "inputSchema": {
              "type": "object",
              "properties": {
                "response": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": [
                        "drive#fileList"
                      ]
                    },
                    "nextPageToken": {
                      "type": "string"
                    },
                    "incompleteSearch": {
                      "type": "boolean"
                    },
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "drive#file"
                            ]
                          },
                          "mimeType": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "resourceKey": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "kind",
                          "mimeType",
                          "id",
                          "name"
                        ],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": [
                    "kind",
                    "incompleteSearch",
                    "files"
                  ],
                  "additionalProperties": false
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "notFound": {
                  "type": "boolean"
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Route from List",
            "description": "Deciding whether to create a new folder"
          }
        },
        {
          "id": "runJavascript-1",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ()=>{return{query:`appProperties has { key = 'breadboard' and value = 'root' } and trashed = false`}};",
            "inputSchema": {
              "type": "object",
              "properties": {}
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Create List Query",
            "description": "Creating a query to list the files."
          }
        },
        {
          "id": "runJavascript-2",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({token})=>({headers:{Authorization:`Bearer ${token}`}});",
            "inputSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "headers": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "raw": true
          }
        },
        {
          "id": "runJavascript-3",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({createFolderResponse:createFolderResponse2})=>{return{id:createFolderResponse2.id}};",
            "inputSchema": {
              "type": "object",
              "properties": {
                "createFolderResponse": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": [
                        "drive#file"
                      ]
                    },
                    "mimeType": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "resourceKey": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "kind",
                    "mimeType",
                    "id",
                    "name"
                  ],
                  "additionalProperties": false
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Get ID",
            "description": "Retrieving ID of the newly created folder"
          }
        },
        {
          "id": "runJavascript-4",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({folderName:folderName2})=>{folderName2??=\"Breadboard\";return{body:{name:folderName2,mimeType:\"application/vnd.google-apps.folder\",appProperties:{breadboard:\"root\"}}}};",
            "inputSchema": {
              "type": "object",
              "properties": {
                "notFound": {
                  "type": "boolean"
                },
                "folderName": {
                  "type": "string",
                  "behavior": [
                    "config"
                  ]
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "body": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": false
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Make Body",
            "description": "Make body of the \"Create Folder\" API call"
          }
        },
        {
          "id": "urlTemplate-0",
          "type": "urlTemplate",
          "configuration": {
            "template": "https://www.googleapis.com/drive/v3/files?q={query}"
          }
        }
      ]
    },
    "saveContextToDrive": {
      "metadata": {
        "title": "Save Context To Drive",
        "description": "Saves LLM Conversation Context to Google Drive.",
        "icon": "google-drive"
      },
      "edges": [
        {
          "from": "cast-0",
          "to": "passthrough-0",
          "out": "value",
          "in": "saveContextResponse"
        },
        {
          "from": "cast-1",
          "to": "runJavascript-2",
          "out": "value",
          "in": "createFolderResponse"
        },
        {
          "from": "cast-2",
          "to": "runJavascript-5",
          "out": "value",
          "in": "response"
        },
        {
          "from": "connection:google-drive-limited-secret",
          "to": "runJavascript-0",
          "out": "connection:google-drive-limited",
          "in": "token"
        },
        {
          "from": "connection:google-drive-limited-secret",
          "to": "runJavascript-3",
          "out": "connection:google-drive-limited",
          "in": "token"
        },
        {
          "from": "fetch-0",
          "to": "cast-0",
          "out": "response",
          "in": "value"
        },
        {
          "from": "fetch-1",
          "to": "cast-1",
          "out": "response",
          "in": "value"
        },
        {
          "from": "fetch-2",
          "to": "cast-2",
          "out": "response",
          "in": "value"
        },
        {
          "from": "input-0",
          "to": "passthrough-0",
          "out": "context",
          "in": "context"
        },
        {
          "from": "input-0",
          "to": "runJavascript-1",
          "out": "context",
          "in": "context"
        },
        {
          "from": "input-0",
          "to": "runJavascript-1",
          "out": "key",
          "in": "key"
        },
        {
          "from": "input-0",
          "to": "runJavascript-4",
          "out": "breadboardFolderId",
          "in": "rootId"
        },
        {
          "from": "input-0",
          "to": "runJavascript-6",
          "out": "breadboardFolderId",
          "in": "rootId"
        },
        {
          "from": "passthrough-0",
          "to": "output-0",
          "out": "context",
          "in": "context"
        },
        {
          "from": "runJavascript-0",
          "to": "fetch-0",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "runJavascript-1",
          "to": "fetch-0",
          "out": "body",
          "in": "body"
        },
        {
          "from": "runJavascript-2",
          "to": "runJavascript-1",
          "out": "id",
          "in": "id"
        },
        {
          "from": "runJavascript-3",
          "to": "fetch-1",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "runJavascript-3",
          "to": "fetch-2",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "runJavascript-4",
          "to": "fetch-1",
          "out": "body",
          "in": "body"
        },
        {
          "from": "runJavascript-5",
          "to": "runJavascript-1",
          "out": "id",
          "in": "id"
        },
        {
          "from": "runJavascript-5",
          "to": "runJavascript-4",
          "out": "notFound",
          "in": "notFound"
        },
        {
          "from": "runJavascript-6",
          "to": "urlTemplate-0",
          "out": "query",
          "in": "query"
        },
        {
          "from": "urlTemplate-0",
          "to": "fetch-2",
          "out": "url",
          "in": "url"
        }
      ],
      "nodes": [
        {
          "id": "input-0",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "breadboardFolderId": {
                  "type": "string",
                  "title": "Root ID",
                  "description": "The Drive id of the Breadboard folder that is used as root for storing data. Use \"Get Breadboard Folder\" component to obtain it"
                },
                "context": {
                  "type": "array",
                  "title": "Context in",
                  "description": "The conversation context to save to Google Drive.",
                  "items": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "additionalProperties": false,
                    "behavior": [
                      "llm-content"
                    ]
                  }
                },
                "key": {
                  "type": "string",
                  "behavior": [
                    "config"
                  ],
                  "title": "Key",
                  "description": "A unique key associated with this context, used to later load it from Google Drive."
                }
              },
              "required": [
                "breadboardFolderId",
                "context",
                "key"
              ]
            }
          }
        },
        {
          "id": "output-0",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "type": [
                    "array",
                    "boolean",
                    "null",
                    "number",
                    "object",
                    "string"
                  ],
                  "title": "Context out",
                  "description": "LLM Conversation Context that was passed in"
                }
              },
              "required": [
                "context"
              ]
            }
          }
        },
        {
          "id": "cast-0",
          "type": "cast",
          "configuration": {
            "type": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "drive#file"
                  ]
                },
                "mimeType": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "resourceKey": {
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "mimeType",
                "id",
                "name"
              ],
              "additionalProperties": false
            }
          }
        },
        {
          "id": "cast-1",
          "type": "cast",
          "configuration": {
            "type": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "drive#file"
                  ]
                },
                "mimeType": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "resourceKey": {
                  "type": "string"
                }
              },
              "required": [
                "kind",
                "mimeType",
                "id",
                "name"
              ],
              "additionalProperties": false
            }
          }
        },
        {
          "id": "cast-2",
          "type": "cast",
          "configuration": {
            "type": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "drive#fileList"
                  ]
                },
                "nextPageToken": {
                  "type": "string"
                },
                "incompleteSearch": {
                  "type": "boolean"
                },
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "enum": [
                          "drive#file"
                        ]
                      },
                      "mimeType": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resourceKey": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "kind",
                      "mimeType",
                      "id",
                      "name"
                    ],
                    "additionalProperties": false
                  }
                }
              },
              "required": [
                "kind",
                "incompleteSearch",
                "files"
              ],
              "additionalProperties": false
            }
          }
        },
        {
          "id": "connection:google-drive-limited-secret",
          "type": "secrets",
          "configuration": {
            "keys": [
              "connection:google-drive-limited"
            ]
          }
        },
        {
          "id": "connection:google-drive-limited-secret",
          "type": "secrets",
          "configuration": {
            "keys": [
              "connection:google-drive-limited"
            ]
          }
        },
        {
          "id": "fetch-0",
          "type": "fetch",
          "configuration": {
            "method": "POST",
            "url": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart"
          },
          "metadata": {
            "title": "Save context",
            "description": "Calling the File Create API"
          }
        },
        {
          "id": "fetch-1",
          "type": "fetch",
          "configuration": {
            "method": "POST",
            "url": "https://www.googleapis.com/drive/v3/files"
          },
          "metadata": {
            "title": "Create \"saved\" Folder",
            "description": "Calling the File Create API"
          }
        },
        {
          "id": "fetch-2",
          "type": "fetch",
          "configuration": {},
          "metadata": {
            "title": "Search for the \"saved\" folder",
            "description": "Search for the \"saved\" folder"
          }
        },
        {
          "id": "passthrough-0",
          "type": "passthrough",
          "configuration": {}
        },
        {
          "id": "runJavascript-0",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({token})=>({headers:{Authorization:`Bearer ${token}`,[\"Content-Type\"]:`multipart/related; boundary=BBBBBBBBBBB`}});",
            "inputSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "headers": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "raw": true
          }
        },
        {
          "id": "runJavascript-1",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({id,key:key2,context:context2})=>{const boundary=\"BBBBBBBBBBB\";const metadata={name:key2,mimeType:\"application/json\",parents:[id]};const multipartBody=`--${boundary}\nContent-Type: application/json; charset=UTF-8\n\n${JSON.stringify(metadata,null,2)}\n--${boundary}\nContent-Type: application/json; charset=UTF-8\n\n${JSON.stringify(context2,null,2)}\n--${boundary}--`;return{body:multipartBody}};",
            "inputSchema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": [
                    "string",
                    "string"
                  ]
                },
                "key": {
                  "type": "string",
                  "behavior": [
                    "config"
                  ]
                },
                "context": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "additionalProperties": false,
                    "behavior": [
                      "llm-content"
                    ]
                  }
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "body": {
                  "type": "string"
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Make the request body to save context",
            "description": "Make the request body to save context"
          }
        },
        {
          "id": "runJavascript-2",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({createFolderResponse:createFolderResponse2})=>{return{id:createFolderResponse2.id}};",
            "inputSchema": {
              "type": "object",
              "properties": {
                "createFolderResponse": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": [
                        "drive#file"
                      ]
                    },
                    "mimeType": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "resourceKey": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "kind",
                    "mimeType",
                    "id",
                    "name"
                  ],
                  "additionalProperties": false
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Get ID",
            "description": "Retrieving ID of the newly created folder"
          }
        },
        {
          "id": "runJavascript-3",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({token})=>({headers:{Authorization:`Bearer ${token}`}});",
            "inputSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "headers": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "raw": true
          }
        },
        {
          "id": "runJavascript-4",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({folderName,rootId:rootId2})=>{return{body:{name:folderName,mimeType:\"application/vnd.google-apps.folder\",parents:[rootId2]}}};",
            "folderName": "saved",
            "inputSchema": {
              "type": "object",
              "properties": {
                "notFound": {
                  "type": "boolean"
                },
                "folderName": {
                  "type": "string"
                },
                "rootId": {
                  "type": "string"
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "body": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": false
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Make request body to create saved folder",
            "description": "Make request body to create saved folder"
          }
        },
        {
          "id": "runJavascript-5",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({response})=>{const first=response.files?.at(0);if(!first){return{notFound:true}}return{id:first.id}};",
            "inputSchema": {
              "type": "object",
              "properties": {
                "response": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": [
                        "drive#fileList"
                      ]
                    },
                    "nextPageToken": {
                      "type": "string"
                    },
                    "incompleteSearch": {
                      "type": "boolean"
                    },
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "drive#file"
                            ]
                          },
                          "mimeType": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "resourceKey": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "kind",
                          "mimeType",
                          "id",
                          "name"
                        ],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": [
                    "kind",
                    "incompleteSearch",
                    "files"
                  ],
                  "additionalProperties": false
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "notFound": {
                  "type": "boolean"
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Route from List",
            "description": "Deciding whether to create a new folder"
          }
        },
        {
          "id": "runJavascript-6",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({rootId:rootId2})=>{return{query:`\"${rootId2}\" in parents and mimeType = \"application/vnd.google-apps.folder\" and name = \"saved\" and trashed = false`}};",
            "inputSchema": {
              "type": "object",
              "properties": {
                "rootId": {
                  "type": "string"
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Query \"Saves\" Folder",
            "description": "Making a query to find the \"saved\" folder"
          }
        },
        {
          "id": "urlTemplate-0",
          "type": "urlTemplate",
          "configuration": {
            "template": "https://www.googleapis.com/drive/v3/files?q={query}"
          },
          "metadata": {
            "title": "Make Find Saves URL Template",
            "description": "Make Find Saves URL Template"
          }
        }
      ]
    },
    "loadContextFromDrive": {
      "metadata": {
        "title": "Load Context from Drive",
        "description": "Loads previously saved LLM Conversation context from Google Drive",
        "icon": "google-drive"
      },
      "edges": [
        {
          "from": "cast-0",
          "to": "runJavascript-0",
          "out": "value",
          "in": "response"
        },
        {
          "from": "cast-1",
          "to": "runJavascript-3",
          "out": "value",
          "in": "response"
        },
        {
          "from": "cast-2",
          "to": "output-2",
          "out": "value",
          "in": "context"
        },
        {
          "from": "connection:google-drive-limited-secret",
          "to": "runJavascript-2",
          "out": "connection:google-drive-limited",
          "in": "token"
        },
        {
          "from": "fetch-0",
          "to": "cast-0",
          "out": "response",
          "in": "value"
        },
        {
          "from": "fetch-1",
          "to": "cast-1",
          "out": "response",
          "in": "value"
        },
        {
          "from": "fetch-2",
          "to": "cast-2",
          "out": "response",
          "in": "value"
        },
        {
          "from": "input-0",
          "to": "runJavascript-0",
          "out": "key",
          "in": "key"
        },
        {
          "from": "input-0",
          "to": "runJavascript-1",
          "out": "rootId",
          "in": "rootId"
        },
        {
          "from": "runJavascript-0",
          "to": "output-0",
          "out": "context",
          "in": "notFound"
        },
        {
          "from": "runJavascript-0",
          "to": "urlTemplate-1",
          "out": "query",
          "in": "query"
        },
        {
          "from": "runJavascript-1",
          "to": "urlTemplate-0",
          "out": "query",
          "in": "query"
        },
        {
          "from": "runJavascript-2",
          "to": "fetch-0",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "runJavascript-2",
          "to": "fetch-1",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "runJavascript-2",
          "to": "fetch-2",
          "out": "headers",
          "in": "headers"
        },
        {
          "from": "runJavascript-3",
          "to": "output-1",
          "out": "context",
          "in": "notFound"
        },
        {
          "from": "runJavascript-3",
          "to": "urlTemplate-2",
          "out": "id",
          "in": "id"
        },
        {
          "from": "urlTemplate-0",
          "to": "fetch-0",
          "out": "url",
          "in": "url"
        },
        {
          "from": "urlTemplate-1",
          "to": "fetch-1",
          "out": "url",
          "in": "url"
        },
        {
          "from": "urlTemplate-2",
          "to": "fetch-2",
          "out": "url",
          "in": "url"
        }
      ],
      "nodes": [
        {
          "id": "input-0",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "behavior": [
                    "config"
                  ],
                  "title": "Key",
                  "description": "A unique key that was used to save LLM Conversation context to Google Drive."
                },
                "rootId": {
                  "type": "string",
                  "title": "Root ID",
                  "description": "The Drive id of the Breadboard folder that is used as root for storing data. Use \"Get Breadboard Folder\" component to obtain it"
                }
              },
              "required": [
                "key",
                "rootId"
              ]
            }
          }
        },
        {
          "id": "output-0",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "notFound": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "additionalProperties": true,
                    "behavior": [
                      "llm-content"
                    ]
                  },
                  "title": "Not Found"
                }
              },
              "required": [
                "notFound"
              ]
            }
          },
          "metadata": {
            "title": "Breadboard root not found",
            "description": "Breadboard root not found"
          }
        },
        {
          "id": "output-1",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "notFound": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "additionalProperties": true,
                    "behavior": [
                      "llm-content"
                    ]
                  },
                  "title": "Not Found"
                }
              },
              "required": [
                "notFound"
              ]
            }
          },
          "metadata": {
            "title": "Saved file not found",
            "description": "Saved file not found"
          }
        },
        {
          "id": "output-2",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "additionalProperties": true,
                    "behavior": [
                      "llm-content"
                    ]
                  },
                  "title": "Context out"
                }
              },
              "required": [
                "context"
              ]
            }
          },
          "metadata": {
            "title": "Output loaded context",
            "description": "Output loaded context"
          }
        },
        {
          "id": "cast-0",
          "type": "cast",
          "configuration": {
            "type": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "drive#fileList"
                  ]
                },
                "nextPageToken": {
                  "type": "string"
                },
                "incompleteSearch": {
                  "type": "boolean"
                },
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "enum": [
                          "drive#file"
                        ]
                      },
                      "mimeType": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resourceKey": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "kind",
                      "mimeType",
                      "id",
                      "name"
                    ],
                    "additionalProperties": false
                  }
                }
              },
              "required": [
                "kind",
                "incompleteSearch",
                "files"
              ],
              "additionalProperties": false
            }
          }
        },
        {
          "id": "cast-1",
          "type": "cast",
          "configuration": {
            "type": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "drive#fileList"
                  ]
                },
                "nextPageToken": {
                  "type": "string"
                },
                "incompleteSearch": {
                  "type": "boolean"
                },
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "kind": {
                        "type": "string",
                        "enum": [
                          "drive#file"
                        ]
                      },
                      "mimeType": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "resourceKey": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "kind",
                      "mimeType",
                      "id",
                      "name"
                    ],
                    "additionalProperties": false
                  }
                }
              },
              "required": [
                "kind",
                "incompleteSearch",
                "files"
              ],
              "additionalProperties": false
            }
          }
        },
        {
          "id": "cast-2",
          "type": "cast",
          "configuration": {
            "type": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {},
                "required": [],
                "additionalProperties": true,
                "behavior": [
                  "llm-content"
                ]
              }
            }
          }
        },
        {
          "id": "connection:google-drive-limited-secret",
          "type": "secrets",
          "configuration": {
            "keys": [
              "connection:google-drive-limited"
            ]
          }
        },
        {
          "id": "fetch-0",
          "type": "fetch",
          "configuration": {},
          "metadata": {
            "title": "Search for the \"saved\" folder",
            "description": "Search for the \"saved\" folder"
          }
        },
        {
          "id": "fetch-1",
          "type": "fetch",
          "configuration": {},
          "metadata": {
            "title": "Search for the saved file",
            "description": "Search for the saved file"
          }
        },
        {
          "id": "fetch-2",
          "type": "fetch",
          "configuration": {},
          "metadata": {
            "title": "Get saved file",
            "description": "Get saved file"
          }
        },
        {
          "id": "runJavascript-0",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({response,key:key2})=>{const first=response.files?.at(0);if(!first){return{context:[]}}return{query:`\"${first.id}\" in parents and mimeType = \"application/json\" and name = \"${key2}\" and trashed = false`}};",
            "inputSchema": {
              "type": "object",
              "properties": {
                "response": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": [
                        "drive#fileList"
                      ]
                    },
                    "nextPageToken": {
                      "type": "string"
                    },
                    "incompleteSearch": {
                      "type": "boolean"
                    },
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "drive#file"
                            ]
                          },
                          "mimeType": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "resourceKey": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "kind",
                          "mimeType",
                          "id",
                          "name"
                        ],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": [
                    "kind",
                    "incompleteSearch",
                    "files"
                  ],
                  "additionalProperties": false
                },
                "key": {
                  "type": "string",
                  "behavior": [
                    "config"
                  ]
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                },
                "context": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "additionalProperties": true,
                    "behavior": [
                      "llm-content"
                    ]
                  }
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Route from List",
            "description": "Deciding if to load or skip"
          }
        },
        {
          "id": "runJavascript-1",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({rootId:rootId2})=>{return{query:`\"${rootId2}\" in parents and mimeType = \"application/vnd.google-apps.folder\" and name = \"saved\" and trashed = false`}};",
            "inputSchema": {
              "type": "object",
              "properties": {
                "rootId": {
                  "type": "string"
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Query \"Saves\" Folder",
            "description": "Making a query to find the \"saved\" folder"
          }
        },
        {
          "id": "runJavascript-2",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({token})=>({headers:{Authorization:`Bearer ${token}`}});",
            "inputSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "headers": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "raw": true
          }
        },
        {
          "id": "runJavascript-3",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = ({response})=>{const first=response.files?.at(0);if(!first){return{context:[]}}return{id:first.id}};",
            "inputSchema": {
              "type": "object",
              "properties": {
                "response": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": [
                        "drive#fileList"
                      ]
                    },
                    "nextPageToken": {
                      "type": "string"
                    },
                    "incompleteSearch": {
                      "type": "boolean"
                    },
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "drive#file"
                            ]
                          },
                          "mimeType": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "resourceKey": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "kind",
                          "mimeType",
                          "id",
                          "name"
                        ],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": [
                    "kind",
                    "incompleteSearch",
                    "files"
                  ],
                  "additionalProperties": false
                }
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "context": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {},
                    "required": [],
                    "additionalProperties": true,
                    "behavior": [
                      "llm-content"
                    ]
                  }
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Route from List of saved files",
            "description": "Route from List of saved files"
          }
        },
        {
          "id": "urlTemplate-0",
          "type": "urlTemplate",
          "configuration": {
            "template": "https://www.googleapis.com/drive/v3/files?q={query}"
          },
          "metadata": {
            "title": "Make Find \"saved\" folder URL template",
            "description": "Make Find \"saved\" folder URL template"
          }
        },
        {
          "id": "urlTemplate-1",
          "type": "urlTemplate",
          "configuration": {
            "template": "https://www.googleapis.com/drive/v3/files?q={query}&orderBy=createdTime+desc"
          },
          "metadata": {
            "title": "Make Find saved file URL template",
            "description": "Make Find saved file URL template"
          }
        },
        {
          "id": "urlTemplate-2",
          "type": "urlTemplate",
          "configuration": {
            "template": "https://www.googleapis.com/drive/v3/files/{id}?alt=media"
          },
          "metadata": {
            "title": "Make template to retrieve saved file",
            "description": "Make template to retrieve saved file"
          }
        }
      ]
    }
  }
}