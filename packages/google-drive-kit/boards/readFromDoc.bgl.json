{
  "title": "Read From Doc",
  "description": "Loads a Google Drive document, converts it to Markdown, and returns it as a single-turn conversation context.",
  "version": "0.0.1",
  "nodes": [
    {
      "type": "input",
      "id": "input",
      "configuration": {
        "schema": {
          "properties": {
            "documentid": {
              "type": "string",
              "title": "Document",
              "behavior": [
                "google-drive-file-id",
                "config"
              ],
              "description": "Pick the document to read from."
            }
          },
          "type": "object",
          "required": []
        }
      },
      "metadata": {
        "visual": {
          "x": -154,
          "y": -224,
          "collapsed": "expanded"
        },
        "logLevel": "debug"
      }
    },
    {
      "type": "output",
      "id": "output",
      "configuration": {
        "schema": {
          "properties": {
            "context": {
              "type": "array",
              "title": "Context",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              },
              "default": "null"
            }
          },
          "type": "object",
          "required": []
        }
      },
      "metadata": {
        "visual": {
          "x": 490,
          "y": -218,
          "collapsed": "expanded"
        }
      }
    },
    {
      "id": "runModule-82b2b71c",
      "type": "runModule",
      "metadata": {
        "visual": {
          "x": 125,
          "y": -240,
          "collapsed": "expanded"
        },
        "title": "Read From Doc",
        "logLevel": "debug"
      },
      "configuration": {
        "$module": "main"
      }
    }
  ],
  "edges": [
    {
      "from": "input",
      "to": "runModule-82b2b71c",
      "out": "documentid",
      "in": "id"
    },
    {
      "from": "runModule-82b2b71c",
      "to": "output",
      "out": "context",
      "in": "context"
    }
  ],
  "modules": {
    "main": {
      "code": "import { connect, exportFile, unwrap } from \"./api\";\n\nexport { invoke as default, describe };\n\nasync function invoke({ id }) {\n  let { id: fileId, preview } = id || {};\n  if (!fileId) {\n    return error(\"Please provide Google Drive File ID\");\n  }\n  const token = await connect({\n    title: \"Get API Token\",\n    description: \"Requesting Google Drive API Auth token\",\n  });\n  const text = unwrap(\n    await exportFile(token, fileId, \"text/markdown\", {\n      title: `Convert ${preview} to Markdown`,\n      description: `Converting ${preview} to Markdown`,\n    }),\n    `Unable to export file \"${preview}\" and/or convert it to Markdown`\n  );\n  return { context: [{ parts: [{ text }], role: \"user\" }] };\n}\n\nasync function describe() {\n  return {\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        id: {\n          type: \"string\",\n          title: \"File ID\",\n          behavior: [\"google-drive-file-id\"],\n        },\n      },\n    },\n    outputSchema: {\n      type: \"object\",\n      properties: {\n        context: {\n          type: \"array\",\n          items: { type: \"object\", behavior: [\"llm-content\"] },\n          title: \"Context out\",\n        },\n      },\n    },\n  };\n}\n\nfunction error($error) {\n  return { $error };\n}\n",
      "metadata": {
        "runnable": true
      }
    },
    "api": {
      "code": "import fetch from \"@fetch\";\nimport secrets from \"@secrets\";\n\nconst connectionId = \"connection:google-drive-limited\";\n\nexport {\n  connect,\n  get,\n  exportFile,\n  create,\n  del,\n  query,\n  createMultipart,\n  getDoc,\n  updateDoc,\n  unwrap,\n};\n\nasync function get(token, id, metadata) {\n  if (!token) {\n    return error(\"Authentication token is required.\");\n  }\n  if (!id) {\n    return error(\"Please supply file id.\");\n  }\n  return api(\n    metadata,\n    token,\n    `https://www.googleapis.com/drive/v3/files/${id}`,\n    \"GET\"\n  );\n}\n\nasync function exportFile(token, id, mimeType, metadata) {\n  if (!token) {\n    return error(\"Authentication token is required.\");\n  }\n  if (!id) {\n    return error(\"Please supply file id.\");\n  }\n  return api(\n    metadata,\n    token,\n    `https://www.googleapis.com/drive/v3/files/${id}/export?mimeType=${encodeURIComponent(mimeType)}`,\n    \"GET\"\n  );\n}\n\nasync function create(token, body, metadata) {\n  if (!token) {\n    return error(\"Authentication token is required.\");\n  }\n  if (!body) {\n    return error(\"Please supply the body of the file to create.\");\n  }\n\n  return api(\n    metadata,\n    token,\n    \"https://www.googleapis.com/drive/v3/files\",\n    \"POST\",\n    body\n  );\n}\n\nasync function query(token, query, metadata) {\n  if (!token) {\n    return error(\"Authentication token is required.\");\n  }\n  if (!query) {\n    return error(\"Please supply the query.\");\n  }\n\n  return api(\n    metadata,\n    token,\n    `https://www.googleapis.com/drive/v3/files?q=${encodeURIComponent(query)}`,\n    \"GET\"\n  );\n}\n\nasync function del(token, id, metadata) {\n  if (!token) {\n    return error(\"Authentication token is required.\");\n  }\n  if (!id) {\n    return error(\"Please supply the id of the file to delete\");\n  }\n\n  return api(\n    metadata,\n    token,\n    `https://www.googleapis.com/drive/v3/files/${id}`,\n    \"DELETE\"\n  );\n}\n\nasync function getDoc(token, id, metadata) {\n  if (!token) {\n    return error(\"Authentication token is required.\");\n  }\n  if (!id) {\n    return error(\"Please supply the doc id to get.\");\n  }\n  return api(\n    metadata,\n    token,\n    `https://docs.googleapis.com/v1/documents/${id}`,\n    \"GET\"\n  );\n}\n\nasync function updateDoc(token, id, body, metadata) {\n  if (!token) {\n    return error(\"Authentication token is required.\");\n  }\n  if (!id) {\n    return error(\"Please supply the id of the doc to update.\");\n  }\n  if (!body) {\n    return error(\"Please supply the body of the doc update request.\");\n  }\n  return api(\n    metadata,\n    token,\n    `https://docs.googleapis.com/v1/documents/${id}:batchUpdate`,\n    \"POST\",\n    body\n  );\n}\n\nasync function connect(metadata) {\n  const { [connectionId]: token } = await secrets({\n    ...meta(metadata),\n    keys: [connectionId],\n  });\n  return token;\n}\n\nasync function createMultipart(token, metadata, body, mimeType, $metadata) {\n  const boundary = \"BB-BB-BB-BB-BB-BB\";\n  const url = `https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart`;\n  const request = {\n    ...meta($metadata),\n    url,\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      [\"Content-Type\"]: `multipart/related; boundary=${boundary}`,\n    },\n    body: `--${boundary}\nContent-Type: application/json; charset=UTF-8\n\n${JSON.stringify(metadata, null, 2)}\n--${boundary}\nContent-Type: ${mimeType}; charset=UTF-8\n\n${body}\n--${boundary}--`,\n  };\n  const { response, $error } = await fetch(request);\n  if ($error) {\n    return { success: false, error: $error };\n  }\n  return { success: true, info: response };\n}\n\nasync function api(metadata, token, url, method, body = null) {\n  const request = {\n    ...meta(metadata),\n    url,\n    method,\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  if (body) {\n    request.body = body;\n  }\n  const { response, $error } = await fetch(request);\n  if ($error) {\n    return { success: false, error: $error };\n  }\n  return { success: true, info: response };\n}\n\nfunction unwrap(result, message = \"Error\") {\n  if (result.error) {\n    throw new Error(`${message}:\\n${JSON.stringify(result.error)}`);\n  }\n  return result.info;\n}\n\nfunction error(message) {\n  return {\n    success: false,\n    error: message,\n  };\n}\n\nfunction meta({ title, description } = {}) {\n  if (!(title || description)) return {};\n  const $metadata = {};\n  if (title) {\n    $metadata.title = title;\n  }\n  if (description) {\n    $metadata.description = description;\n  }\n  return { $metadata };\n}\n",
      "metadata": {
        "runnable": false
      }
    }
  },
  "metadata": {
    "tags": [],
    "icon": "google-drive"
  }
}