openapi: 3.1.0
info:
  title: Board Server API
  version: 1.0.0
  description: API for managing and interacting with boards
  license:
    name: Apache 2.0
    identifier: Apache-2.0
servers:
  - url: http://localhost:3000
paths:
  /boards:
    get:
      summary: List boards
      operationId: boardserver.boards.list
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BoardListEntry"
  /boards/@{account}/{boardName}.json:
    parameters:
      - $ref: "#/components/parameters/AccountParam"
      - $ref: "#/components/parameters/BoardNameParam"
    get:
      summary: Get a board
      operationId: boardserver.boards.get
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
    post:
      summary: Create or update a board
      operationId: boardserver.boards.post
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Board"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoardCreationResponse"
  /boards/@{account}/{boardName}.app:
    parameters:
      - $ref: "#/components/parameters/AccountParam"
      - $ref: "#/components/parameters/BoardNameParam"
    get:
      summary: Serve frontend app
      operationId: boardserver.boards.serve
      responses:
        "200":
          description: Successful response
          content:
            text/html:
              schema:
                type: string
  /boards/@{account}/{boardName}.api:
    parameters:
      - $ref: "#/components/parameters/AccountParam"
      - $ref: "#/components/parameters/BoardNameParam"
    get:
      summary: Serve API explorer
      operationId: boardserver.boards.api.get
      responses:
        "200":
          description: Successful response
          content:
            text/html:
              schema:
                type: string
  /boards/@{account}/{boardName}.api/invoke:
    parameters:
      - $ref: "#/components/parameters/AccountParam"
      - $ref: "#/components/parameters/BoardNameParam"
    post:
      summary: Invoke API
      operationId: boardserver.boards.api.invoke
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiInvokeRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
  /boards/@{account}/{boardName}.api/describe:
    parameters:
      - $ref: "#/components/parameters/AccountParam"
      - $ref: "#/components/parameters/BoardNameParam"
    get:
      summary: Get API description
      operationId: boardserver.boards.api.describe
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiDescription"
  /boards/@{account}/{boardName}.api/run:
    parameters:
      - $ref: "#/components/parameters/AccountParam"
      - $ref: "#/components/parameters/BoardNameParam"
    post:
      summary: Execute the board
      operationId: boardserver.boards.api.run
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiInvokeRequest"
      responses:
        "200":
          description: Successful response
          content:
            text/event-stream:
              schema:
                type: string
  /boards/@{account}/{boardName}.invite:
    parameters:
      - $ref: "#/components/parameters/AccountParam"
      - $ref: "#/components/parameters/BoardNameParam"
    get:
      summary: List invites
      operationId: boardserver.boards.invite
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteListResponse"
    post:
      summary: Create or delete an invite
      operationId: boardserver.boards.invites.post
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteResponse"
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: API_KEY
  parameters:
    AccountParam:
      name: account
      in: path
      required: true
      schema:
        type: string
    BoardNameParam:
      name: boardName
      in: path
      required: true
      schema:
        type: string
  schemas:
    BoardListEntry:
      type: object
      properties:
        title:
          type: string
        path:
          type: string
        username:
          type: string
        readonly:
          type: boolean
        mine:
          type: boolean
        tags:
          type: array
          items:
            type: string
    Board:
      type: object
      required:
        - edges
        - nodes
      properties:
        url:
          type: string
        title:
          type: string
        description:
          type: string
        version:
          type: string
        edges:
          type: array
          items:
            $ref: "#/components/schemas/Edge"
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/Node"
        kits:
          type: array
          items:
            $ref: "#/components/schemas/Kit"
        graphs:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Board"
        args:
          type: object
          additionalProperties: true
    Edge:
      type: object
      required:
        - from
        - to
      properties:
        from:
          type: string
        to:
          type: string
        in:
          type: string
        out:
          type: string
        optional:
          type: boolean
        constant:
          type: boolean
    Node:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
        configuration:
          type: object
          additionalProperties: true
        metadata:
          $ref: "#/components/schemas/NodeMetaData"
    NodeMetaData:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        visual:
          type: object
          additionalProperties: true
        logLevel:
          type: string
          enum:
            - debug
            - info
        tags:
          type: array
          items:
            oneOf:
              - type: string
                enum:
                  - start
              - $ref: "#/components/schemas/StartTag"
    StartTag:
      type: object
      required:
        - type
      properties:
        type:
          type: string
        label:
          $ref: "#/components/schemas/StartLabel"
    StartLabel:
      type: string
      enum:
        - default
        - describe
    Kit:
      type: object
      required:
        - url
      properties:
        url:
          type: string
        title:
          type: string
        description:
          type: string
        version:
          type: string
        tags:
          type: array
          items:
            type: string
            enum:
              - deprecated
              - experimental
    Schema:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        type:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Schema"
        required:
          type: array
          items:
            type: string
        format:
          type: string
        behavior:
          type: string
          enum:
            - deprecated
            - transient
            - bubble
            - board
            - stream
            - error
            - config
            - llm-content
            - json-schema
            - ports-spec
            - image
            - code
            - google-drive-query
            - google-drive-file-id
        transient:
          type: boolean
        enum:
          type: array
          items:
            type: string
        default:
          type: string
        additionalProperties:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/Schema"
        items:
          oneOf:
            - $ref: "#/components/schemas/Schema"
            - type: array
              items:
                $ref: "#/components/schemas/Schema"
        minItems:
          type: integer
        examples:
          type: array
          items:
            type: string
    ApiDescription:
      type: object
      properties:
        inputSchema:
          type: object
        outputSchema:
          type: object
        title:
          type: string
        description:
          type: string
        metadata:
          $ref: "#/components/schemas/ApiMetadata"
    ApiMetadata:
      type: object
      properties:
        icon:
          type: string
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
    Comment:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        metadata:
          $ref: "#/components/schemas/NodeMetaData"
    BoardCreationResponse:
      type: object
      properties:
        created:
          type: string
    ApiInvokeRequest:
      type: object
      properties:
        $key:
          type: string
    InviteListResponse:
      type: object
      properties:
        invites:
          type: array
          items:
            type: string
    InviteRequest:
      type: object
      properties:
        delete:
          type: string
    InviteResponse:
      type: object
      oneOf:
        - type: object
          properties:
            invite:
              type: string
        - type: object
          properties:
            deleted:
              type: string
        - type: object
          properties:
            error:
              type: string
