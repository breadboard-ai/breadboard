{
  "title": "Simple JSON prompt",
  "description": "Asks a question and then asks for a JSON object as an answer. The JSON object is validated against a schema.",
  "version": "0.0.1",
  "edges": [
    {
      "from": "lambda-3",
      "to": "invoke-2",
      "out": "board",
      "in": "lambda"
    },
    {
      "from": "invoke-2",
      "to": "analysis",
      "out": "completion",
      "in": "text"
    },
    {
      "from": "promptTemplate-1",
      "to": "invoke-2",
      "out": "prompt",
      "in": "text"
    },
    {
      "from": "scene",
      "to": "promptTemplate-1",
      "out": "text",
      "in": "scene"
    }
  ],
  "nodes": [
    {
      "id": "scene",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "title": "Question",
              "description": "Describe a scene with multiple people, the LLM will try to map out the relationships between the people"
            }
          },
          "required": [
            "scene"
          ]
        }
      }
    },
    {
      "id": "promptTemplate-1",
      "type": "promptTemplate",
      "configuration": {
        "template": "You are a tool that given a scene understands the relationship between people and describes them in the following JSON schema. Age is optional, don't make it up. Only use the relations in the schema:\n\n{{schema}}\n\nScene:\n{{scene}}\n",
        "schema": "{\"type\":\"object\",\"properties\":{\"people\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"age\":{\"type\":\"integer\",\"minimum\":0}},\"required\":[\"name\"]}},\"relationships\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"enum\":[\"friend\",\"parent\",\"child\",\"sibling\",\"spouse\",\"other\"]},\"person1Name\":{\"type\":\"string\"},\"person2Name\":{\"type\":\"string\"}},\"required\":[\"type\",\"person1Name\",\"person2Name\"]}}}}"
      }
    },
    {
      "id": "invoke-2",
      "type": "invoke",
      "configuration": {
        "path": "./retry.json"
      }
    },
    {
      "id": "lambda-3",
      "type": "lambda",
      "configuration": {
        "board": {
          "kind": "board",
          "board": {
            "edges": [
              {
                "from": "secrets-3",
                "to": "palm-generateText-4",
                "constant": true,
                "out": "PALM_KEY",
                "in": "PALM_KEY"
              },
              {
                "from": "input-1",
                "to": "palm-generateText-4",
                "out": "text",
                "in": "text"
              },
              {
                "from": "palm-generateText-4",
                "to": "validateJson-5",
                "out": "completion",
                "in": "json"
              },
              {
                "from": "input-1",
                "to": "validateJson-5",
                "out": "schema",
                "in": "schema"
              },
              {
                "from": "validateJson-5",
                "to": "runJavascript-6",
                "out": "json",
                "in": "json"
              },
              {
                "from": "input-1",
                "to": "runJavascript-6",
                "out": "text",
                "in": "text"
              },
              {
                "from": "runJavascript-6",
                "to": "output-2",
                "out": "json",
                "in": "completion"
              },
              {
                "from": "palm-generateText-4",
                "to": "validateJson-5",
                "out": "completion",
                "in": "completion"
              },
              {
                "from": "palm-generateText-4",
                "to": "runJavascript-6",
                "out": "completion",
                "in": "completion"
              }
            ],
            "nodes": [
              {
                "id": "input-1",
                "type": "input"
              },
              {
                "id": "output-2",
                "type": "output"
              },
              {
                "id": "secrets-3",
                "type": "secrets",
                "configuration": {
                  "keys": [
                    "PALM_KEY"
                  ]
                }
              },
              {
                "id": "palm-generateText-4",
                "type": "palm-generateText",
                "configuration": {}
              },
              {
                "id": "validateJson-5",
                "type": "validateJson",
                "configuration": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "people": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "age": {
                              "type": "integer",
                              "minimum": 0
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "relationships": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "friend",
                                "parent",
                                "child",
                                "sibling",
                                "spouse",
                                "other"
                              ]
                            },
                            "person1Name": {
                              "type": "string"
                            },
                            "person2Name": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "person1Name",
                            "person2Name"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "id": "runJavascript-6",
                "type": "runJavascript",
                "configuration": {
                  "name": "checker",
                  "code": "function checker({ text, json, }) {\n    // See whether age appears in the text. This is an overly simple check that\n    // doesn't even allow for \"fourteen\" instead of 14. For a real implementation,\n    // use an LLM to fact check itself.\n    const notFound = json.people.filter((person) => person.age && text.indexOf(`${person.age}`) === -1);\n    if (notFound.length > 0)\n        return {\n            $error: {\n                kind: \"error\",\n                error: {\n                    message: `Age not found in scene for ${notFound\n                        .map((person) => person.name)\n                        .join(\", \")}.`,\n                },\n            },\n        };\n    else\n        return { json };\n}",
                  "raw": true
                }
              }
            ],
            "kits": [
              {
                "url": "npm:@google-labs/llm-starter"
              },
              {
                "url": "npm:@google-labs/palm-kit"
              },
              {
                "url": "npm:@google-labs/json-kit"
              }
            ]
          }
        }
      }
    },
    {
      "id": "analysis",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "title": "Graph of people and relationships",
              "description": "JSON object describing the scene"
            }
          },
          "required": [
            "text"
          ]
        }
      }
    }
  ],
  "kits": [
    {
      "url": "npm:@google-labs/llm-starter"
    },
    {
      "url": "npm:@google-labs/core-kit"
    },
    {
      "url": "npm:@google-labs/json-kit"
    },
    {
      "url": "npm:@google-labs/palm-kit"
    }
  ]
}