/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

import type { Definition, Value } from "@breadboard-ai/build";
import { unsafeType, type JsonSerializable } from "@breadboard-ai/build";
import { runJavascript } from "@google-labs/core-kit";
import type { JSONSchema4, JSONSchema7 } from "json-schema";

export interface MakeCodeComponentParams {
  code: string;
  inputSchema: JSONSchema7;
  outputSchema: JSONSchema7;
}

/**
 * Instantiates a `runJavascript` component instance suitable for use with the
 * Build API.
 *
 * This function is intended for use only by the modules that are generated by
 * build-code.
 */
export function makeRunJavascriptComponent<
  I extends Record<string, JsonSerializable | undefined>,
  O extends Record<string, JsonSerializable | undefined>,
>({ code, inputSchema, outputSchema }: MakeCodeComponentParams) {
  type ThisDefinition = Definition<
    I,
    O,
    undefined,
    undefined,
    never,
    false,
    false,
    false,
    never
  >;
  type ThisArgs = Parameters<ThisDefinition>[0];
  type ThisInstance = ReturnType<ThisDefinition>;
  return (args: ThisArgs): ThisInstance => {
    const instance = runJavascript({
      ...(args as Record<string, Value>),
      code,
      name: "run",
      raw: true,
      // TODO(aomarks) Upgrade to the JSONSchema7 type everywhere.
      inputSchema: inputSchema as object as JSONSchema4,
      outputSchema: outputSchema as object as JSONSchema4,
    });
    // TODO(aomarks) We should have a proper API for this. We're initializing
    // the ports and setting their schemas.
    for (const [name, schema] of Object.entries(
      outputSchema.properties ?? {}
    )) {
      const port = instance.unsafeOutput(name);
      (port as Writable<typeof port>).type = unsafeType(
        schema as object as JSONSchema4
      );
      (instance.outputs as Record<string, Value>)[name] = port;
    }
    return instance as object as ThisInstance;
  };
}

type Writable<T> = { -readonly [P in keyof T]: T[P] };
