{
  "title": "Gemini Pro Generator",
  "description": "The text generator board powered by the Gemini Pro model",
  "$schema": "https://raw.githubusercontent.com/breadboard-ai/breadboard/@google-labs/breadboard-schema@1.4.1/packages/schema/breadboard.schema.json",
  "version": "0.0.2",
  "edges": [
    {
      "from": "choose-method",
      "to": "make-url",
      "out": "method",
      "in": "method"
    },
    {
      "from": "choose-method",
      "to": "make-url",
      "out": "sseOption",
      "in": "sseOption"
    },
    {
      "from": "collect-errors",
      "to": "count-retries",
      "out": "error",
      "in": "error"
    },
    {
      "from": "collect-errors",
      "to": "count-retries",
      "out": "retry",
      "in": "retry"
    },
    {
      "from": "count-retries",
      "to": "collect-errors",
      "out": "retry",
      "in": "retry"
    },
    {
      "from": "count-retries",
      "to": "make-body",
      "out": "context",
      "in": "context"
    },
    {
      "from": "count-retries",
      "to": "make-body",
      "out": "model",
      "in": "model"
    },
    {
      "from": "count-retries",
      "to": "make-body",
      "out": "responseMimeType",
      "in": "responseMimeType"
    },
    {
      "from": "count-retries",
      "to": "make-body",
      "out": "safetySettings",
      "in": "safetySettings"
    },
    {
      "from": "count-retries",
      "to": "make-body",
      "out": "stopSequences",
      "in": "stopSequences"
    },
    {
      "from": "count-retries",
      "to": "make-body",
      "out": "systemInstruction",
      "in": "systemInstruction"
    },
    {
      "from": "count-retries",
      "to": "make-body",
      "out": "text",
      "in": "text"
    },
    {
      "from": "count-retries",
      "to": "make-body",
      "out": "tools",
      "in": "tools"
    },
    {
      "from": "fetch-gemini-api",
      "to": "collect-errors",
      "out": "$error",
      "in": "error"
    },
    {
      "from": "fetch-gemini-api",
      "to": "format-response",
      "out": "response",
      "in": "response"
    },
    {
      "from": "format-response",
      "to": "collect-errors",
      "out": "$error",
      "in": "error"
    },
    {
      "from": "format-response",
      "to": "content-output",
      "out": "context",
      "in": "context"
    },
    {
      "from": "format-response",
      "to": "content-output",
      "out": "text",
      "in": "text"
    },
    {
      "from": "format-response",
      "to": "tool-call-output",
      "out": "context",
      "in": "context"
    },
    {
      "from": "format-response",
      "to": "tool-call-output",
      "out": "toolCalls",
      "in": "toolCalls"
    },
    {
      "from": "GEMINI_KEY-secret",
      "to": "make-url",
      "out": "GEMINI_KEY",
      "in": "GEMINI_KEY"
    },
    {
      "from": "inputs",
      "to": "choose-method",
      "out": "useStreaming",
      "in": "useStreaming"
    },
    {
      "from": "inputs",
      "to": "count-retries",
      "out": "context",
      "in": "context",
      "constant": true
    },
    {
      "from": "inputs",
      "to": "count-retries",
      "out": "model",
      "in": "model",
      "constant": true
    },
    {
      "from": "inputs",
      "to": "count-retries",
      "out": "responseMimeType",
      "in": "responseMimeType",
      "constant": true
    },
    {
      "from": "inputs",
      "to": "count-retries",
      "out": "retry",
      "in": "retry"
    },
    {
      "from": "inputs",
      "to": "count-retries",
      "out": "safetySettings",
      "in": "safetySettings",
      "constant": true
    },
    {
      "from": "inputs",
      "to": "count-retries",
      "out": "stopSequences",
      "in": "stopSequences",
      "constant": true
    },
    {
      "from": "inputs",
      "to": "count-retries",
      "out": "systemInstruction",
      "in": "systemInstruction",
      "constant": true
    },
    {
      "from": "inputs",
      "to": "count-retries",
      "out": "text",
      "in": "text",
      "constant": true
    },
    {
      "from": "inputs",
      "to": "count-retries",
      "out": "tools",
      "in": "tools",
      "constant": true
    },
    {
      "from": "inputs",
      "to": "fetch-gemini-api",
      "out": "useStreaming",
      "in": "stream",
      "constant": true
    },
    {
      "from": "inputs",
      "to": "make-url",
      "out": "model",
      "in": "model"
    },
    {
      "from": "make-body",
      "to": "fetch-gemini-api",
      "out": "result",
      "in": "body"
    },
    {
      "from": "make-url",
      "to": "fetch-gemini-api",
      "out": "url",
      "in": "url",
      "constant": true
    }
  ],
  "nodes": [
    {
      "id": "inputs",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "array",
              "title": "Context",
              "description": "An array of messages to use as conversation context",
              "default": "[]",
              "examples": [
                "[\n  {\n    \"role\": \"user\",\n    \"parts\": [\n      {\n        \"text\": \"You are a pirate. Please talk like a pirate.\"\n      }\n    ]\n  },\n  {\n    \"role\": \"model\",\n    \"parts\": [\n      {\n        \"text\": \"Arr, matey!\"\n      }\n    ]\n  }\n]"
              ],
              "items": {
                "behavior": [
                  "llm-content"
                ],
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "model",
                      "user",
                      "tool",
                      "$metadata"
                    ]
                  },
                  "parts": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "text"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "inlineData": {
                              "type": "object",
                              "properties": {
                                "mimeType": {
                                  "type": "string",
                                  "enum": [
                                    "image/png",
                                    "image/jpeg",
                                    "image/heic",
                                    "image/heif",
                                    "image/webp"
                                  ]
                                },
                                "data": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "mimeType",
                                "data"
                              ],
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "inlineData"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "function_call": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "name",
                                "args"
                              ],
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "function_call"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "function_response": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "response": {
                                  "type": [
                                    "array",
                                    "boolean",
                                    "null",
                                    "number",
                                    "object",
                                    "string"
                                  ]
                                }
                              },
                              "required": [
                                "name",
                                "response"
                              ],
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "function_response"
                          ],
                          "additionalProperties": false
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "role",
                  "parts"
                ],
                "additionalProperties": false
              }
            },
            "model": {
              "type": "string",
              "title": "Model",
              "description": "The model to use for generation",
              "examples": [
                "gemini-1.5-pro-latest"
              ],
              "enum": [
                "gemini-pro",
                "gemini-ultra",
                "gemini-1.5-pro-latest"
              ]
            },
            "responseMimeType": {
              "type": "string",
              "title": "Response MIME Type",
              "description": "Output response mimetype of the generated text.",
              "default": "text/plain",
              "examples": [
                "text/plain"
              ],
              "enum": [
                "text/plain",
                "application/json"
              ]
            },
            "retry": {
              "type": "number",
              "title": "Retry Count",
              "description": "The number of times to retry the LLM call in case of failure",
              "default": "1"
            },
            "safetySettings": {
              "type": "array",
              "title": "Safety Settings",
              "description": "The safety settings object (see https://ai.google.dev/api/rest/v1beta/SafetySetting for more information)",
              "default": "[]",
              "items": {
                "type": "object",
                "properties": {
                  "category": {
                    "type": "string"
                  },
                  "threshold": {
                    "type": "string"
                  }
                },
                "required": [
                  "category",
                  "threshold"
                ],
                "additionalProperties": false
              }
            },
            "stopSequences": {
              "type": "array",
              "title": "Stop Sequences",
              "description": "An array of strings that will stop the output",
              "default": "[]",
              "items": {
                "type": "string"
              }
            },
            "systemInstruction": {
              "type": "string",
              "title": "System Instruction",
              "description": "Give the model additional context to understand the task, provide more customized responses, and adhere to specific guidelines over the full user interaction.",
              "default": "",
              "examples": [
                "You are a brilliant poet, specializing in two-line rhyming poems. You also happened to be a cat."
              ]
            },
            "text": {
              "type": "string",
              "title": "Text",
              "description": "The text to generate",
              "default": "",
              "examples": [
                "What is the square root of pi?"
              ]
            },
            "tools": {
              "type": "array",
              "title": "Tools",
              "description": "An array of functions to use for tool-calling",
              "default": "[]",
              "examples": [
                "[\n  {\n    \"name\": \"The_Calculator_Board\",\n    \"description\": \"A simple AI pattern that leans on the power of the LLMs to generate language to solve math problems.\",\n    \"parameters\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"text\": {\n          \"type\": \"string\",\n          \"description\": \"Ask a math question\"\n        }\n      },\n      \"required\": [\n        \"text\"\n      ]\n    }\n  },\n  {\n    \"name\": \"The_Search_Summarizer_Board\",\n    \"description\": \"A simple AI pattern that first uses Google Search to find relevant bits of information and then summarizes them using LLM.\",\n    \"parameters\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"text\": {\n          \"type\": \"string\",\n          \"description\": \"What would you like to search for?\"\n        }\n      },\n      \"required\": [\n        \"text\"\n      ]\n    }\n  }\n]"
              ],
              "items": {
                "behavior": [
                  "board"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "parameters": {
                    "type": "object"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "parameters"
                ],
                "additionalProperties": false
              }
            },
            "useStreaming": {
              "type": "boolean",
              "title": "Stream",
              "description": "Whether to stream the output",
              "default": "false"
            }
          },
          "required": []
        }
      },
      "metadata": {
        "title": "Input Parameters",
        "description": "Collecting input parameters"
      }
    },
    {
      "id": "content-output",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "object",
              "title": "Context",
              "description": "The conversation context",
              "properties": {
                "parts": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "text"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "functionCall": {
                            "type": [
                              "array",
                              "boolean",
                              "null",
                              "number",
                              "object",
                              "string"
                            ]
                          }
                        },
                        "required": [
                          "functionCall"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  }
                }
              },
              "required": [
                "parts"
              ],
              "additionalProperties": false
            },
            "text": {
              "type": "string",
              "title": "Text",
              "description": "The generated text"
            }
          },
          "required": [
            "context",
            "text"
          ]
        }
      },
      "metadata": {
        "title": "Content Output",
        "description": "Outputting content"
      }
    },
    {
      "id": "tool-call-output",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "object",
              "title": "Context",
              "description": "The conversation context",
              "properties": {
                "parts": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "text"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "functionCall": {
                            "type": [
                              "array",
                              "boolean",
                              "null",
                              "number",
                              "object",
                              "string"
                            ]
                          }
                        },
                        "required": [
                          "functionCall"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  }
                }
              },
              "required": [
                "parts"
              ],
              "additionalProperties": false
            },
            "toolCalls": {
              "type": "array",
              "title": "Tool Calls",
              "description": "The generated tool calls",
              "items": {
                "type": "object",
                "properties": {},
                "required": [],
                "additionalProperties": true
              }
            }
          },
          "required": [
            "context",
            "toolCalls"
          ]
        }
      },
      "metadata": {
        "title": "Tool Call Output",
        "description": "Outputting a tool call"
      }
    },
    {
      "id": "choose-method",
      "type": "runJavascript",
      "configuration": {
        "code": "const choose_method = ({ useStreaming }) => {\n    const method = useStreaming ? \"streamGenerateContent\" : \"generateContent\";\n    const sseOption = useStreaming ? \"&alt=sse\" : \"\";\n    return { method, sseOption };\n};",
        "name": "choose_method",
        "raw": true
      },
      "metadata": {
        "title": "Choose Method",
        "description": "Choosing the right Gemini API method"
      }
    },
    {
      "id": "collect-errors",
      "type": "passthrough",
      "configuration": {},
      "metadata": {
        "title": "Collect Errors",
        "description": "Collecting the error from Gemini API"
      }
    },
    {
      "id": "count-retries",
      "type": "runJavascript",
      "configuration": {
        "code": "const count_retries = ({ retry, error, ...rest }) => {\n    retry = retry || 0;\n    const errorCode = error?.error?.code;\n    if (errorCode) {\n        // Retry won't help with 404, 429 or 400, because these are either the\n        // caller's problem or in case of 429, retries are actually doing more harm\n        // than good.\n        const retryWontHelp = errorCode == 400 || errorCode == 429 || errorCode == 404;\n        if (retryWontHelp) {\n            // TODO(aomarks) We don't have `code` in the general $error type, and we\n            // probably shouldn't since there are all kind of possible error shapes.\n            // There should probably be a way to set the schema for $error to any\n            // sub-type of the general one on a node-by-node basis. For now we just\n            // cast to pretend `code` isn't there.\n            return { $error: error };\n        }\n        // The \"-1\" value is something that responseFormatter sends when empty\n        // response is encountered.\n        if (errorCode == -1) {\n            return { $error: error };\n        }\n    }\n    if (retry < 0) {\n        return {\n            $error: \"Exceeded retry count, was unable to produce a useful response from the Gemini API.\",\n        };\n    }\n    retry = retry - 1;\n    return { ...rest, retry };\n};",
        "error": {},
        "name": "count_retries",
        "raw": true
      },
      "metadata": {
        "title": "Check Retry Count",
        "description": "Making sure we can retry, if necessary."
      }
    },
    {
      "id": "fetch-gemini-api",
      "type": "fetch",
      "configuration": {
        "method": "POST"
      },
      "metadata": {
        "title": "Make API Call",
        "description": "Calling Gemini API"
      }
    },
    {
      "id": "format-response",
      "type": "runJavascript",
      "configuration": {
        "code": "const format_response = ({ response }) => {\n    const r = response;\n    const context = r?.candidates?.[0].content;\n    const firstPart = context?.parts?.[0];\n    if (!firstPart) {\n        return {\n            $error: `No parts in response \"${JSON.stringify(response)}\" found`,\n        };\n    }\n    if (\"text\" in firstPart) {\n        return { text: firstPart.text, context };\n    }\n    else {\n        return { toolCalls: [], context };\n    }\n};",
        "name": "format_response",
        "raw": true
      },
      "metadata": {
        "title": "Format Response",
        "description": "Formatting Gemini API response"
      }
    },
    {
      "id": "GEMINI_KEY-secret",
      "type": "secrets",
      "configuration": {
        "keys": [
          "GEMINI_KEY"
        ]
      }
    },
    {
      "id": "make-body",
      "type": "runJavascript",
      "configuration": {
        "code": "const make_body = ({ context, systemInstruction, responseMimeType, text, model, tools, safetySettings, stopSequences, }) => {\n    let contents = context;\n    const olderModel = model === \"gemini-pro\" || model === \"gemini-ultra\";\n    const turn = { role: \"user\", parts: [{ text }] };\n    if (!contents || contents.length === 0) {\n        if (text) {\n            contents = [turn];\n        }\n        else {\n            throw new Error(\"Either `text` or `context` parameter is required\");\n        }\n    }\n    else {\n        // Replace the \"tool\" role with \"user\".\n        contents = contents.map((item) => item.role === \"tool\" ? ((item.role = \"user\"), item) : item);\n        const last = contents[contents.length - 1];\n        if (last.role === \"model\") {\n            contents.push(turn);\n        }\n    }\n    // Filter out the special \"$metadata\" role.\n    contents = contents.filter((item) => item.role !== \"$metadata\");\n    const result = { contents };\n    if (systemInstruction) {\n        let parts;\n        if (typeof systemInstruction === \"string\") {\n            parts = [{ text: systemInstruction }];\n        }\n        else {\n            parts = systemInstruction.parts;\n            if (!parts) {\n                throw new Error(`Malformed system instruction: ${JSON.stringify(systemInstruction)}`);\n            }\n        }\n        if (olderModel) {\n            contents[contents.length - 1].parts.unshift(...parts);\n        }\n        else {\n            result.systemInstruction = { parts };\n        }\n    }\n    if (safetySettings && !Object.keys(safetySettings).length) {\n        result.safetySettings = [\n            {\n                category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n                threshold: \"BLOCK_NONE\",\n            },\n            {\n                category: \"HARM_CATEGORY_HARASSMENT\",\n                threshold: \"BLOCK_NONE\",\n            },\n            {\n                category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n                threshold: \"BLOCK_NONE\",\n            },\n        ];\n    }\n    else {\n        result.safetySettings = safetySettings;\n    }\n    const generationConfig = {};\n    if (stopSequences && stopSequences.length > 0) {\n        generationConfig.stopSequences = stopSequences;\n    }\n    if (responseMimeType) {\n        generationConfig.responseMimeType = responseMimeType;\n    }\n    if (Object.keys(generationConfig).length > 0) {\n        result.generationConfig = generationConfig;\n    }\n    if (tools && tools.length > 0) {\n        result.tools = { function_declarations: tools };\n    }\n    return { result };\n};",
        "name": "make_body",
        "raw": true
      },
      "metadata": {
        "title": "Make Request Body"
      }
    },
    {
      "id": "make-url",
      "type": "urlTemplate",
      "configuration": {
        "template": "https://generativelanguage.googleapis.com/v1beta/models/{model}:{method}?key={GEMINI_KEY}{+sseOption}"
      },
      "metadata": {
        "title": "Make URL",
        "description": "Creating the Gemini API URL"
      }
    }
  ]
}