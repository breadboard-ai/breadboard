{
  "title": "Agent Kit",
  "description": "A collection of nodes for building Agent-like experiences.",
  "version": "0.0.1",
  "url": "https://raw.githubusercontent.com/breadboard-ai/breadboard/main/packages/agent-kit/agent.kit.json",
  "nodes": {
    "human": {
      "title": "Human",
      "description": "A human in the loop. Use this node to insert a real person (user input) into your team of synthetic workers.",
      "version": "0.0.1",
      "edges": [
        {
          "from": "appendContext",
          "to": "output-2",
          "out": "context",
          "in": "context"
        },
        {
          "from": "input",
          "to": "fn-4",
          "out": "text",
          "in": "text"
        },
        {
          "from": "input",
          "to": "output-2",
          "out": "text",
          "in": "text"
        },
        {
          "from": "fn-4",
          "to": "output-5",
          "out": "again",
          "in": "again"
        },
        {
          "from": "fn-4",
          "to": "appendContext",
          "out": "context",
          "in": "context"
        },
        {
          "from": "fn-4",
          "to": "appendContext",
          "out": "text",
          "in": "text"
        },
        {
          "from": "createSchema",
          "to": "input",
          "out": "schema",
          "in": "schema"
        },
        {
          "from": "createSchema",
          "to": "fn-4",
          "out": "context",
          "in": "context"
        },
        {
          "from": "maybeOutputRouter",
          "to": "createSchema",
          "out": "context",
          "in": "context"
        },
        {
          "from": "maybeOutputRouter",
          "to": "createSchema",
          "out": "action",
          "in": "action"
        },
        {
          "from": "maybeOutputRouter",
          "to": "output-3",
          "out": "feedback",
          "in": "feedback"
        },
        {
          "from": "maybeOutputRouter",
          "to": "output",
          "out": "output",
          "in": "output"
        },
        {
          "from": "maybeOutputRouter",
          "to": "fn-4",
          "out": "action",
          "in": "action"
        },
        {
          "from": "input-1",
          "to": "maybeOutputRouter",
          "out": "context",
          "in": "context"
        },
        {
          "from": "input-1",
          "to": "createSchema",
          "out": "title",
          "in": "title"
        },
        {
          "from": "input-1",
          "to": "createSchema",
          "out": "description",
          "in": "description"
        }
      ],
      "nodes": [
        {
          "id": "output-2",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "behavior": [
                      "llm-content"
                    ]
                  },
                  "title": "Context"
                },
                "text": {
                  "title": "Text",
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "id": "appendContext",
          "type": "runJavascript",
          "configuration": {
            "code": "const appendContext = ({context,text})=>{if(!text)return{context};return{context:[...context||[],{role:\"user\",parts:[{text}]}]}};",
            "name": "appendContext",
            "raw": true
          },
          "metadata": {
            "title": "Append Context",
            "description": "Appending user input to the conversation context"
          }
        },
        {
          "id": "input",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "text": {
                  "title": "Text",
                  "type": "string"
                }
              },
              "required": [
                "text"
              ]
            }
          },
          "metadata": {
            "title": "Input",
            "description": "Asking user for input"
          }
        },
        {
          "id": "fn-4",
          "type": "runJavascript",
          "configuration": {
            "code": "const fn_4 = ({text,context,action})=>{const a=action;if(a?.action===\"vote\"){if(text===\"No\"){context.pop();return{text,again:context}}const c=structuredClone(context);const lastItem=c[c.length-1];const parts=lastItem.parts;const t=Array.isArray(parts)?parts.map(item=>item.text).join(\"/n\"):parts.text;const output=t;const data=JSON.parse(output);delete data[\"voteRequest\"];lastItem.parts=[{text:JSON.stringify(data)}];return{text:\"\",context:c}}return{text,context}};",
            "name": "fn_4",
            "raw": true
          },
          "metadata": {
            "title": "Action Recognizer",
            "description": "Recognizing the action that user has taken"
          }
        },
        {
          "id": "createSchema",
          "type": "runJavascript",
          "configuration": {
            "code": "const createSchema = ({title,action,description,context})=>{const text={title,description,type:\"string\",behavior:[\"transient\"]};const schema2={type:\"object\",properties:{text}};if(action?.action==\"vote\"){text.title=action.title;text.enum=[\"Yes\",\"No\"]}return{schema:schema2,context}};",
            "name": "createSchema",
            "raw": true
          },
          "metadata": {
            "title": "Create Schema",
            "description": "Creating a schema for user input"
          }
        },
        {
          "id": "maybeOutputRouter",
          "type": "runJavascript",
          "configuration": {
            "code": "const maybeOutputRouter = ({context})=>{const action={action:\"none\"};if(Array.isArray(context)&&context.length>0){const lastItem=context[context.length-1];if(lastItem.role===\"model\"){const parts=lastItem.parts;const text=Array.isArray(parts)?parts.map(item=>item.text).join(\"/n\"):parts.text;const output=text;try{const data=JSON.parse(output);if(data.voteRequest){const feedback=structuredClone(data);delete feedback[\"voteRequest\"];const action2={action:\"vote\",title:data.voteRequest};return{feedback,action:action2,context}}}catch{}return{output,action,context}}}return{context,action}};",
            "name": "maybeOutputRouter",
            "raw": true
          },
          "metadata": {
            "title": "Maybe Output",
            "description": "Checking if the last message was from the model"
          }
        },
        {
          "id": "output-5",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "again": {
                  "type": "string",
                  "title": "again"
                }
              }
            }
          },
          "metadata": {
            "title": "Rejection",
            "description": "Rejecting latest agent work per user action"
          }
        },
        {
          "id": "input-1",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "title": "Context",
                  "description": "Incoming conversation context",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "behavior": [
                      "llm-content"
                    ]
                  },
                  "examples": [
                    "[{\"parts\":[{\"text\":\"{\\\"adCampaign\\\":{\\\"headlines\\\":[\\\"Breadboard: AI Playground\\\",\\\"Exp. AI Patterns\\\",\\\"Rapid Prototyping\\\",\\\"AI Power, Gemini\\\",\\\"Integrate AI Seamlessly\\\",\\\"Create Graphs, Prompts\\\",\\\"Accessible AI\\\",\\\"Breadboard: Dev's AI Kit\\\",\\\"Supercharge Dev, Breadboard\\\",\\\"Accelerate Innovation\\\",\\\"Revolutionize Dev, AI\\\",\\\"Breadboard: AI, Ingenuity\\\",\\\"Elevate Projects, Breadboard\\\",\\\"Unlock AI Power, Breadboard\\\"],\\\"descriptions\\\":[\\\"Breadboard: Play, experiment, prototype with AI. Integrate AI with Gemini.\\\",\\\"Stunning graphs with prompts. Accessible AI for devs.\\\",\\\"Accelerate innovation with Breadboard. Experiment with AI risk-free.\\\",\\\"Elevate projects with Breadboard AI. Integrate AI seamlessly.\\\"]},\\\"voteRequest\\\":\\\"Does this ad campaign seem ok to you?\\\"}\"}],\"role\":\"model\"}]"
                  ],
                  "default": "[]"
                },
                "title": {
                  "title": "Title",
                  "description": "The title to ask",
                  "default": "User",
                  "type": "string"
                },
                "description": {
                  "title": "Description",
                  "description": "The description of what to ask",
                  "default": "User's question or request",
                  "type": "string"
                }
              },
              "required": []
            }
          }
        },
        {
          "id": "output-3",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "behavior": [
                "bubble"
              ],
              "properties": {
                "feedback": {
                  "type": "string",
                  "title": "Feedback",
                  "description": "The feedback to display"
                }
              }
            }
          },
          "metadata": {
            "title": "Feedback",
            "description": "Displaying the output to user with feedback"
          }
        },
        {
          "id": "output",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "behavior": [
                "bubble"
              ],
              "properties": {
                "output": {
                  "type": "string",
                  "title": "Output",
                  "description": "The output to display"
                }
              }
            }
          },
          "metadata": {
            "title": "Output",
            "description": "Displaying the output the user."
          }
        }
      ],
      "graphs": {}
    },
    "repeater": {
      "title": "Repeater",
      "description": "A worker whose job it is to repeat the same thing over and over, until some condition is met or the max count of repetitions is reached.",
      "version": "0.0.1",
      "edges": [
        {
          "from": "counter",
          "to": "invokeAgent",
          "out": "continue",
          "in": "context"
        },
        {
          "from": "counter",
          "to": "counter",
          "out": "count",
          "in": "count"
        },
        {
          "from": "counter",
          "to": "output-2",
          "out": "stop",
          "in": "context"
        },
        {
          "from": "invokeAgent",
          "to": "exit",
          "out": "exit",
          "in": "context"
        },
        {
          "from": "invokeAgent",
          "to": "counter",
          "out": "context",
          "in": "context"
        },
        {
          "from": "input-1",
          "to": "invokeAgent",
          "out": "worker",
          "in": "$board",
          "constant": true
        },
        {
          "from": "input-1",
          "to": "invokeAgent",
          "out": "context",
          "in": "context"
        },
        {
          "from": "input-1",
          "to": "counter",
          "out": "max",
          "in": "count"
        }
      ],
      "nodes": [
        {
          "id": "output-2",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "type": "string",
                  "title": "context"
                }
              }
            }
          }
        },
        {
          "id": "counter",
          "type": "runJavascript",
          "configuration": {
            "code": "const counter = ({context,count})=>{const num=count-1;if(num!=0){return{continue:context,count:num}}return{stop:context}};",
            "name": "counter",
            "raw": true
          },
          "metadata": {
            "title": "Counter",
            "description": "Counting the number of repetitions"
          }
        },
        {
          "id": "invokeAgent",
          "type": "invoke",
          "configuration": {},
          "metadata": {
            "title": "Invoke Worker",
            "description": "Invoking the worker"
          }
        },
        {
          "id": "input-1",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "worker": {
                  "title": "Worker",
                  "behavior": [
                    "board"
                  ],
                  "description": "Worker to repeat",
                  "type": "object"
                },
                "context": {
                  "title": "Context",
                  "type": "array",
                  "format": "multiline",
                  "items": {
                    "type": "object",
                    "behavior": [
                      "llm-content"
                    ]
                  },
                  "default": "[]",
                  "description": "Initial conversation context"
                },
                "max": {
                  "title": "Max",
                  "description": "The maximum number of repetitions to make (set to -1 to go infinitely)",
                  "type": "number",
                  "default": "-1",
                  "examples": [
                    "3"
                  ]
                }
              },
              "required": [
                "worker"
              ]
            }
          }
        },
        {
          "id": "exit",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "type": "string",
                  "title": "context"
                }
              }
            }
          },
          "metadata": {
            "title": "Exit",
            "description": "Exiting early from the repeater"
          }
        }
      ],
      "graphs": {}
    },
    "structuredWorker": {
      "title": "Structured Worker",
      "description": "A worker who outputs structure data (JSON) provided a schema.",
      "version": "0.0.1",
      "edges": [
        {
          "from": "assembleContext",
          "to": "output-2",
          "out": "context",
          "in": "context"
        },
        {
          "from": "validate",
          "to": "count",
          "out": "$error",
          "in": "error"
        },
        {
          "from": "validate",
          "to": "errorOutput",
          "out": "$error",
          "in": "$error"
        },
        {
          "from": "validate",
          "to": "assembleContext",
          "out": "json",
          "in": "json"
        },
        {
          "from": "validate",
          "to": "output-2",
          "out": "json",
          "in": "json"
        },
        {
          "from": "buildContext",
          "to": "count",
          "out": "context",
          "in": "context",
          "constant": true
        },
        {
          "from": "buildContext",
          "to": "assembleContext",
          "out": "context",
          "in": "context"
        },
        {
          "from": "generate",
          "to": "validate",
          "out": "text",
          "in": "json"
        },
        {
          "from": "input-1",
          "to": "schemish",
          "out": "schema",
          "in": "schema"
        },
        {
          "from": "input-1",
          "to": "buildContext",
          "out": "context",
          "in": "context"
        },
        {
          "from": "input-1",
          "to": "buildContext",
          "out": "instruction",
          "in": "instruction"
        },
        {
          "from": "input-1",
          "to": "validate",
          "out": "schema",
          "in": "schema",
          "constant": true
        },
        {
          "from": "count",
          "to": "count",
          "out": "count",
          "in": "count"
        },
        {
          "from": "count",
          "to": "generate",
          "out": "continue",
          "in": "context"
        },
        {
          "from": "count",
          "to": "errorOutput",
          "out": "stop",
          "in": "context"
        },
        {
          "from": "format",
          "to": "buildContext",
          "out": "prompt",
          "in": "format"
        },
        {
          "from": "schemish",
          "to": "format",
          "out": "schemish",
          "in": "schemish"
        },
        {
          "from": "initialValues",
          "to": "count",
          "out": "count",
          "in": "count"
        },
        {
          "from": "initialValues",
          "to": "count",
          "out": "error",
          "in": "error"
        }
      ],
      "nodes": [
        {
          "id": "output-2",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "type": "string",
                  "title": "context"
                },
                "json": {
                  "title": "json",
                  "description": "The validated JSON.",
                  "type": "string"
                }
              }
            }
          }
        },
        {
          "id": "assembleContext",
          "type": "runJavascript",
          "configuration": {
            "code": "const assembleContext = ({context,json:json2})=>{if(!context)throw new Error(\"Context is required\");return{context:[...context,{role:\"model\",parts:{text:JSON.stringify(json2)}}]}};",
            "name": "assembleContext",
            "raw": true
          },
          "metadata": {
            "title": "Assemble Context",
            "description": "Assembling the context for the agent"
          }
        },
        {
          "id": "validate",
          "type": "validateJson",
          "configuration": {},
          "metadata": {
            "title": "Validate JSON",
            "logLevel": "info",
            "description": "Checking my work"
          }
        },
        {
          "id": "buildContext",
          "type": "runJavascript",
          "configuration": {
            "code": "const buildContext = ({context,format,instruction})=>{if(!Array.isArray(context)){const text=typeof context===\"string\"?context:JSON.stringify(context);context=[{role:\"user\",parts:[{text}]}]}const list=context||[];if(list.length>0){const last=list[list.length-1];if(last.role===\"user\"){last.parts.unshift({text:instruction},{text:format});return{context:list}}}return{context:[...list,{role:\"user\",parts:[{text:instruction},{text:format}]}]}};",
            "name": "buildContext",
            "raw": true
          },
          "metadata": {
            "title": "Build Context",
            "description": "Building the context for the agent"
          }
        },
        {
          "id": "generate",
          "type": "text",
          "configuration": {
            "text": "unused"
          },
          "metadata": {
            "title": "Generate",
            "logLevel": "info",
            "description": "Generating an answer"
          }
        },
        {
          "id": "input-1",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "schema": {
                  "title": "Schema",
                  "description": "The schema to convert to schemish.",
                  "type": "object",
                  "examples": [
                    "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"poems\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"inspiration\": {\n            \"type\": \"string\",\n            \"description\": \"The inspiration behind the poem\"\n          },\n          \"poem\": {\n            \"type\": \"string\",\n            \"description\": \"The poem itself\"\n          }\n        }\n      }\n    }\n  }\n}"
                  ],
                  "behavior": [
                    "json-schema"
                  ],
                  "default": "{}"
                },
                "context": {
                  "title": "Context",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "behavior": [
                      "llm-content"
                    ]
                  },
                  "default": "[]",
                  "examples": [
                    "the universe within us"
                  ]
                },
                "instruction": {
                  "title": "Instruction",
                  "format": "multiline",
                  "examples": [
                    "You are a brilliant poet who specializes in two-line rhyming poems.\nGiven any topic, you can quickly whip up three two-line rhyming poems about it.\nLook at the topic below and do your magic"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "instruction"
              ]
            }
          }
        },
        {
          "id": "count",
          "type": "runJavascript",
          "configuration": {
            "code": "const count = ({context,error,count})=>{const num=count-1;if(num!=0){return{continue:context,count:num}}return{stop:error}};",
            "name": "count",
            "raw": true
          },
          "metadata": {
            "title": "Counter",
            "description": "Counting the JSON healing iteration"
          }
        },
        {
          "id": "errorOutput",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "$error": {
                  "title": "$error",
                  "description": "The error if the JSON is invalid.",
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": [
                        "error"
                      ]
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "parsing",
                            "validation"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "context": {
                  "type": "string",
                  "title": "context"
                }
              }
            }
          },
          "metadata": {
            "title": "Error Output",
            "description": "Displaying error output, giving up on JSON healing"
          }
        },
        {
          "id": "format",
          "type": "promptTemplate",
          "configuration": {
            "template": "Reply as valid JSON of the following format:\n\n```json\n{{schemish}}\n```\n"
          },
          "metadata": {
            "title": "Reply Structure Formatter",
            "description": "Formatting the reply structure for the agent."
          }
        },
        {
          "id": "schemish",
          "type": "schemish",
          "configuration": {},
          "metadata": {
            "title": "Schemish",
            "description": "Converting JSON schema to a more compact format"
          }
        },
        {
          "id": "initialValues",
          "type": "passthrough",
          "configuration": {
            "count": 5,
            "error": "stub"
          },
          "metadata": {
            "title": "Initial Values",
            "description": "Populating initial values for the counter"
          }
        }
      ],
      "graphs": {}
    },
    "toolWorker": {
      "title": "Tool Worker",
      "description": "A worker that can use tools to accomplish tasks.",
      "version": "0.0.1",
      "edges": [
        {
          "from": "fn-3",
          "to": "output-2",
          "out": "context",
          "in": "context"
        },
        {
          "from": "router",
          "to": "assembleBoardInvoke",
          "out": "context",
          "in": "context"
        },
        {
          "from": "router",
          "to": "assembleBoardInvoke",
          "out": "functionCall",
          "in": "functionCall"
        },
        {
          "from": "router",
          "to": "formatFunctionResponse",
          "out": "context",
          "in": "generated"
        },
        {
          "from": "router",
          "to": "formatFunctionResponse",
          "out": "functionCall",
          "in": "functionCall"
        },
        {
          "from": "router",
          "to": "fn-3",
          "out": "context",
          "in": "generated"
        },
        {
          "from": "router",
          "to": "output-2",
          "out": "text",
          "in": "text"
        },
        {
          "from": "buildContext",
          "to": "doWork",
          "out": "context",
          "in": "context"
        },
        {
          "from": "buildContext",
          "to": "formatFunctionResponse",
          "out": "context",
          "in": "context"
        },
        {
          "from": "buildContext",
          "to": "fn-3",
          "out": "context",
          "in": "context"
        },
        {
          "from": "doWork",
          "to": "router",
          "out": "context",
          "in": "context"
        },
        {
          "from": "assembleBoardInvoke",
          "to": "invokeBoard",
          "out": "*",
          "in": ""
        },
        {
          "from": "formatFunctionResponse",
          "to": "replyToFunction",
          "out": "context",
          "in": "context"
        },
        {
          "from": "formatFunctionResponse",
          "to": "assembleContext",
          "out": "context",
          "in": "context"
        },
        {
          "from": "input-1",
          "to": "buildContext",
          "out": "context",
          "in": "context"
        },
        {
          "from": "input-1",
          "to": "buildContext",
          "out": "instruction",
          "in": "instruction"
        },
        {
          "from": "input-1",
          "to": "turnBoardsToFunctions",
          "out": "tools",
          "in": "list"
        },
        {
          "from": "formatFunctionDeclarations",
          "to": "doWork",
          "out": "tools",
          "in": "tools"
        },
        {
          "from": "formatFunctionDeclarations",
          "to": "assembleBoardInvoke",
          "out": "urlMap",
          "in": "urlMap"
        },
        {
          "from": "formatFunctionDeclarations",
          "to": "replyToFunction",
          "out": "tools",
          "in": "tools"
        },
        {
          "from": "invokeBoard",
          "to": "extractBoardResponse",
          "out": "*",
          "in": ""
        },
        {
          "from": "extractBoardResponse",
          "to": "formatFunctionResponse",
          "out": "response",
          "in": "response"
        },
        {
          "from": "replyToFunction",
          "to": "assembleContext",
          "out": "context",
          "in": "generated"
        },
        {
          "from": "replyToFunction",
          "to": "functionOutput",
          "out": "text",
          "in": "text"
        },
        {
          "from": "assembleContext",
          "to": "functionOutput",
          "out": "context",
          "in": "context"
        },
        {
          "from": "turnBoardsToFunctions",
          "to": "formatFunctionDeclarations",
          "out": "list",
          "in": "list"
        }
      ],
      "nodes": [
        {
          "id": "output-2",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "type": "string",
                  "title": "context"
                },
                "text": {
                  "type": "string",
                  "title": "text"
                }
              }
            }
          }
        },
        {
          "id": "fn-3",
          "type": "runJavascript",
          "configuration": {
            "code": "const fn_3 = ({context,generated})=>{if(!context)throw new Error(\"Context is required\");return{context:[...context,generated]}};",
            "name": "fn_3",
            "raw": true
          },
          "metadata": {
            "title": "Assemble Non-function call Context",
            "description": "Assembling the final context for the output"
          }
        },
        {
          "id": "router",
          "type": "runJavascript",
          "configuration": {
            "code": "const router = ({context})=>{if(!context)throw new Error(\"Context is a required input\");const item=context;const part=item.parts[0];console.assert(item.parts.length===1,\"Only one part is expected in Gemini response\");if(\"text\"in part){return{context,text:part.text}}return{context,functionCall:part.functionCall}};",
            "name": "router",
            "raw": true
          },
          "metadata": {
            "title": "Router",
            "description": "Routing to either function call invocation or text reply"
          }
        },
        {
          "id": "buildContext",
          "type": "runJavascript",
          "configuration": {
            "code": "const buildContext = ({context,instruction})=>{if(typeof context===\"string\"){context=[{role:\"user\",parts:[{text:context}]}]}const list=context||[];if(list.length>0){const last=list[list.length-1];if(last.role===\"user\"){last.parts.unshift({text:instruction});return{context:list}}}return{context:[...list,{role:\"user\",parts:[{text:instruction}]}]}};",
            "name": "buildContext",
            "raw": true
          },
          "metadata": {
            "title": "Build Context",
            "description": "Combining the context and instruction into a single context"
          }
        },
        {
          "id": "doWork",
          "type": "text",
          "configuration": {
            "text": "unused"
          },
          "metadata": {
            "title": "Do Work",
            "description": "Using Gemini to do the work"
          }
        },
        {
          "id": "assembleBoardInvoke",
          "type": "runJavascript",
          "configuration": {
            "code": "const assembleBoardInvoke = ({functionCall,urlMap})=>{if(!functionCall)throw new Error(\"Function call is a required input\");if(!urlMap)throw new Error(\"URL map is a required input\");const call=functionCall;const $board=urlMap[call.name];const generator=\"https://raw.githubusercontent.com/breadboard-ai/breadboard/05136f811e443dd931a2a2a40ff5a3f388d5ce75/packages/breadboard-web/public/graphs/gemini-generator.json\";return{$board,generator,...call.args}};",
            "name": "assembleBoardInvoke",
            "raw": true
          },
          "metadata": {
            "title": "Assemble Board Invoke",
            "description": "Assembling the board invocation based on Gemini response"
          }
        },
        {
          "id": "formatFunctionResponse",
          "type": "runJavascript",
          "configuration": {
            "code": "const formatFunctionResponse = ({context,generated,functionCall,response})=>{const call=functionCall;return{context:[...context,generated,{role:\"function\",parts:[{functionResponse:{name:call.name,response}}]}]}};",
            "name": "formatFunctionResponse",
            "raw": true
          },
          "metadata": {
            "title": "Format Function Response",
            "description": "Formatting the function response"
          }
        },
        {
          "id": "input-1",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "title": "Context",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "behavior": [
                      "llm-content"
                    ]
                  },
                  "default": "What is the square root of e?"
                },
                "instruction": {
                  "title": "Instruction",
                  "format": "multiline",
                  "examples": [
                    "You are a hip, fun-loving mathematician who loves to help solve problems and chat about math. You also love finding answers to questions using Search. Use the right tool for solving the problems and reply without engaging tools otherwise. After using the tool, make sure to summarize and expand the answer in a hip, humorous way to help the user enjoy the beauty of math.\n\nIn situations where the tool use is not necessary, just carry the conversation with the user."
                  ],
                  "type": "string"
                },
                "tools": {
                  "title": "Tools",
                  "type": "array",
                  "description": "The list to iterate over.",
                  "items": {
                    "type": "object",
                    "behavior": [
                      "board"
                    ]
                  },
                  "examples": [
                    "[\"https://raw.githubusercontent.com/breadboard-ai/breadboard/b5577943bdd0956bed3874244b34ea80f1589eaa/packages/breadboard-web/public/graphs/search-summarize.json\",{\"title\":\"The Calculator Board\",\"description\":\"A simple AI pattern that leans on the power of the LLMs to generate language to solve math problems.\",\"version\":\"0.0.2\",\"edges\":[{\"from\":\"compute\",\"to\":\"answer\",\"out\":\"*\",\"in\":\"\"},{\"from\":\"generator\",\"to\":\"compute\",\"out\":\"text\",\"in\":\"code\"},{\"from\":\"math-question\",\"to\":\"math-function\",\"out\":\"question\",\"in\":\"question\"},{\"from\":\"math-question\",\"to\":\"generator\",\"out\":\"generator\",\"in\":\"path\"},{\"from\":\"math-function\",\"to\":\"generator\",\"out\":\"prompt\",\"in\":\"text\"}],\"nodes\":[{\"id\":\"answer\",\"type\":\"output\",\"configuration\":{\"schema\":{\"type\":\"object\",\"properties\":{\"result\":{\"type\":\"string\",\"title\":\"Answer\",\"description\":\"The answer to the math problem\"}},\"required\":[\"text\"]}}},{\"id\":\"compute\",\"type\":\"runJavascript\",\"configuration\":{\"name\":\"compute\"}},{\"id\":\"generator\",\"type\":\"invoke\",\"configuration\":{}},{\"id\":\"math-question\",\"type\":\"input\",\"configuration\":{\"schema\":{\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\",\"title\":\"Math problem\",\"description\":\"Ask a math question\",\"examples\":[\"What is the square root of pi?\"]},\"generator\":{\"type\":\"string\",\"title\":\"Generator\",\"description\":\"The URL of the generator to call\",\"default\":\"text-generator.json\"}},\"required\":[\"text\"]}}},{\"id\":\"math-function\",\"type\":\"promptTemplate\",\"configuration\":{\"template\":\"Translate the math problem below into a self-contained,\\nzero-argument JavaScript function named `compute` that can be executed\\nto provide the answer to the problem.\\n\\nDo not use any dependencies or libraries.\\n\\nMath Problem: {{question}}\\n\\nSolution:\"}}],\"graphs\":{}}]"
                  ],
                  "default": "[]"
                }
              },
              "required": [
                "instruction"
              ]
            }
          }
        },
        {
          "id": "formatFunctionDeclarations",
          "type": "runJavascript",
          "configuration": {
            "code": "const formatFunctionDeclarations = ({list})=>{const tools=[];const urlMap={};list.forEach(item=>{tools.push(item.function);urlMap[item.function.name]=item.boardURL});return{tools,urlMap}};",
            "name": "formatFunctionDeclarations",
            "raw": true
          },
          "metadata": {
            "title": "Format Function Declarations",
            "description": "Formatting the function declarations"
          }
        },
        {
          "id": "invokeBoard",
          "type": "invoke",
          "configuration": {},
          "metadata": {
            "title": "Invoke Board",
            "description": "Invoking the board"
          }
        },
        {
          "id": "extractBoardResponse",
          "type": "runJavascript",
          "configuration": {
            "code": "const extractBoardResponse = inputs=>{const{schema,...response}=inputs;schema;return{response}};",
            "name": "extractBoardResponse",
            "raw": true
          },
          "metadata": {
            "title": "Format Board Response",
            "description": "Extracting the board response from the invocation"
          }
        },
        {
          "id": "replyToFunction",
          "type": "text",
          "configuration": {
            "text": "unused"
          },
          "metadata": {
            "title": "Reply to Function",
            "description": "Using Gemini to reply to function results"
          }
        },
        {
          "id": "assembleContext",
          "type": "runJavascript",
          "configuration": {
            "code": "const assembleContext = ({context,generated})=>{if(!context)throw new Error(\"Context is required\");return{context:[...context,generated]}};",
            "name": "assembleContext",
            "raw": true
          },
          "metadata": {
            "title": "Assemble Context",
            "description": "Assembling the final context for the output"
          }
        },
        {
          "id": "turnBoardsToFunctions",
          "type": "map",
          "configuration": {
            "board": "#boardToFunction"
          },
          "metadata": {
            "title": "Turn Boards into Functions",
            "description": "Turning provided boards into functions"
          }
        },
        {
          "id": "functionOutput",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "type": "string",
                  "title": "context"
                },
                "text": {
                  "type": "string",
                  "title": "Text",
                  "description": "The generated text"
                }
              }
            }
          },
          "metadata": {
            "title": "Function Call Output",
            "description": "Outputting the function call results"
          }
        }
      ],
      "graphs": {
        "boardToFunction": {
          "title": "Board to functions",
          "description": "Use this board to convert specified boards into function-calling signatures",
          "edges": [
            {
              "from": "getFunctionSignature",
              "to": "output-2",
              "out": "function",
              "in": "function"
            },
            {
              "from": "input-1",
              "to": "curry-3",
              "out": "item",
              "in": "$board"
            },
            {
              "from": "input-1",
              "to": "output-2",
              "out": "item",
              "in": "boardURL"
            },
            {
              "from": "curry-3",
              "to": "getFunctionSignature",
              "out": "board",
              "in": "json"
            }
          ],
          "nodes": [
            {
              "id": "output-2",
              "type": "output",
              "configuration": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "function": {
                      "type": "object",
                      "title": "function"
                    },
                    "boardURL": {
                      "type": "string",
                      "title": "boardURL"
                    }
                  }
                }
              }
            },
            {
              "id": "getFunctionSignature",
              "type": "jsonata",
              "configuration": {
                "expression": "\n      (\n        $adjustType := function ($type) {\n            $type = \"object\" or $type = \"array\" ? \"string\" : $type\n        };\n\n        {\n        \"function\": {\n            \"name\": $replace(title, /\\W/, \"_\"),\n            \"description\": description,\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": nodes[type=\"input\"][0].configuration.schema.properties ~> $each(function($v, $k) {\n                { $k: {\n                    \"type\": $v.type ~> $adjustType,\n                    \"description\": $v.description\n                } }\n                }) ~> $merge\n            }\n        },\n        \"returns\": nodes[type=\"output\"][0].configuration.schema ~> | ** | {}, 'title' |\n        }\n    )",
                "raw": true
              }
            },
            {
              "id": "input-1",
              "type": "input",
              "configuration": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "item": {
                      "title": "board",
                      "behavior": [
                        "board"
                      ],
                      "description": "The board to curry. Can be a BoardCapability, a graph or a URL",
                      "type": "string"
                    }
                  },
                  "required": [
                    "item"
                  ]
                }
              }
            },
            {
              "id": "curry-3",
              "type": "curry",
              "configuration": {}
            }
          ],
          "graphs": {}
        }
      }
    },
    "worker": {
      "title": "Worker",
      "description": "The essential Agent building block",
      "version": "0.0.1",
      "edges": [
        {
          "from": "assembleContext",
          "to": "output-2",
          "out": "context",
          "in": "context"
        },
        {
          "from": "generate",
          "to": "assembleContext",
          "out": "context",
          "in": "generated"
        },
        {
          "from": "generate",
          "to": "output-2",
          "out": "text",
          "in": "text"
        },
        {
          "from": "buildContext",
          "to": "generate",
          "out": "context",
          "in": "context"
        },
        {
          "from": "buildContext",
          "to": "assembleContext",
          "out": "context",
          "in": "context"
        },
        {
          "from": "input-1",
          "to": "buildContext",
          "out": "context",
          "in": "context"
        },
        {
          "from": "input-1",
          "to": "buildContext",
          "out": "instruction",
          "in": "instruction"
        },
        {
          "from": "input-1",
          "to": "generate",
          "out": "stopSequences",
          "in": "stopSequences"
        }
      ],
      "nodes": [
        {
          "id": "output-2",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "type": "string",
                  "title": "context"
                },
                "text": {
                  "type": "string",
                  "title": "Output",
                  "description": "Agent's output"
                }
              }
            }
          }
        },
        {
          "id": "assembleContext",
          "type": "runJavascript",
          "configuration": {
            "code": "const assembleContext = ({context,generated})=>{if(!context)throw new Error(\"Context is required\");return{context:[...context,generated]}};",
            "name": "assembleContext",
            "raw": true
          },
          "metadata": {
            "title": "Assemble Context",
            "description": "Assembling the context after generation"
          }
        },
        {
          "id": "generate",
          "type": "text",
          "configuration": {
            "text": "unused"
          },
          "metadata": {
            "title": "Generate",
            "description": "Using Gemini to generate worker output"
          }
        },
        {
          "id": "buildContext",
          "type": "runJavascript",
          "configuration": {
            "code": "const buildContext = ({context,instruction})=>{if(typeof context===\"string\"){context=[{role:\"user\",parts:[{text:context}]}]}const list=context||[];if(list.length>0){const last=list[list.length-1];if(last.role===\"user\"){last.parts.unshift({text:instruction});return{context:list}}}return{context:[...list,{role:\"user\",parts:[{text:instruction}]}]}};",
            "name": "buildContext",
            "raw": true
          },
          "metadata": {
            "title": "Build Context",
            "description": "Building the context for the worker"
          }
        },
        {
          "id": "input-1",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "title": "Context",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "behavior": [
                      "llm-content"
                    ]
                  },
                  "examples": [
                    "the universe within us"
                  ]
                },
                "instruction": {
                  "title": "Instruction",
                  "format": "multiline",
                  "examples": [
                    "You are a brilliant poet who specializes in two-line rhyming poems.\nGiven any topic, you can quickly whip up a two-line rhyming poem about it.\nLook at the topic below and do your magic"
                  ],
                  "type": "string"
                },
                "stopSequences": {
                  "type": "array",
                  "title": "Stop Sequences",
                  "description": "An array of strings that will stop the output",
                  "items": {
                    "type": "string"
                  },
                  "default": "[]"
                }
              },
              "required": [
                "context",
                "instruction"
              ]
            }
          }
        }
      ],
      "graphs": {}
    }
  }
}