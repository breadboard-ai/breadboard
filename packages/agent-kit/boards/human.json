{
  "title": "Human",
  "description": "A human in the loop. Use this node to insert a real person (user input) into your team of synthetic workers.",
  "$schema": "https://raw.githubusercontent.com/breadboard-ai/breadboard/@google-labs/breadboard-schema@1.4.0/packages/schema/breadboard.schema.json",
  "version": "0.0.1",
  "edges": [
    {
      "from": "appendContext",
      "to": "output-2",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input",
      "to": "fn-4",
      "out": "text",
      "in": "text"
    },
    {
      "from": "input",
      "to": "output-2",
      "out": "text",
      "in": "text"
    },
    {
      "from": "fn-4",
      "to": "output-5",
      "out": "again",
      "in": "again"
    },
    {
      "from": "fn-4",
      "to": "appendContext",
      "out": "context",
      "in": "context"
    },
    {
      "from": "fn-4",
      "to": "appendContext",
      "out": "text",
      "in": "text"
    },
    {
      "from": "createSchema",
      "to": "input",
      "out": "schema",
      "in": "schema"
    },
    {
      "from": "createSchema",
      "to": "fn-4",
      "out": "context",
      "in": "context"
    },
    {
      "from": "maybeOutputRouter",
      "to": "createSchema",
      "out": "context",
      "in": "context"
    },
    {
      "from": "maybeOutputRouter",
      "to": "createSchema",
      "out": "action",
      "in": "action"
    },
    {
      "from": "maybeOutputRouter",
      "to": "output-3",
      "out": "feedback",
      "in": "feedback"
    },
    {
      "from": "maybeOutputRouter",
      "to": "output",
      "out": "output",
      "in": "output"
    },
    {
      "from": "maybeOutputRouter",
      "to": "fn-4",
      "out": "action",
      "in": "action"
    },
    {
      "from": "input-1",
      "to": "maybeOutputRouter",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input-1",
      "to": "createSchema",
      "out": "title",
      "in": "title"
    },
    {
      "from": "input-1",
      "to": "createSchema",
      "out": "description",
      "in": "description"
    }
  ],
  "nodes": [
    {
      "id": "output-2",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "array",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              },
              "title": "Context"
            },
            "text": {
              "title": "Text",
              "type": "string"
            }
          }
        }
      }
    },
    {
      "id": "appendContext",
      "type": "runJavascript",
      "configuration": {
        "code": "const appendContext = ({ context, text }) => {\n    if (!text)\n      return { context };\n    return {\n      context: [...context || [], { role: \"user\", parts: [{ text }] }]\n    };\n  };",
        "name": "appendContext",
        "raw": true
      },
      "metadata": {
        "title": "Append Context",
        "description": "Appending user input to the conversation context"
      }
    },
    {
      "id": "input",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "title": "Text",
              "type": "string"
            }
          },
          "required": [
            "text"
          ]
        }
      },
      "metadata": {
        "title": "Input",
        "description": "Asking user for input"
      }
    },
    {
      "id": "fn-4",
      "type": "runJavascript",
      "configuration": {
        "code": "const fn_4 = ({ text, context, action }) => {\n  const a = action;\n  if (a?.action === \"vote\") {\n    if (text === \"No\") {\n      context.pop();\n      return { text, again: context };\n    }\n    const c = structuredClone(context);\n    const lastItem = c[c.length - 1];\n    const parts = lastItem.parts;\n    const t = Array.isArray(parts) ? parts.map((item) => item.text).join(\"/n\") : parts.text;\n    const output = t;\n    const data = JSON.parse(output);\n    delete data[\"voteRequest\"];\n    lastItem.parts = [{ text: JSON.stringify(data) }];\n    return { text: \"\", context: c };\n  }\n  return { text, context };\n};",
        "name": "fn_4",
        "raw": true
      },
      "metadata": {
        "title": "Action Recognizer",
        "description": "Recognizing the action that user has taken"
      }
    },
    {
      "id": "createSchema",
      "type": "runJavascript",
      "configuration": {
        "code": "const createSchema = ({ title: title2, action, description, context }) => {\n    const text = {\n      title: title2,\n      description,\n      type: \"string\",\n      behavior: [\"transient\"]\n    };\n    const schema2 = {\n      type: \"object\",\n      properties: { text }\n    };\n    if (action?.action == \"vote\") {\n      text.title = action.title;\n      text.enum = [\"Yes\", \"No\"];\n    }\n    return { schema: schema2, context };\n  };",
        "name": "createSchema",
        "raw": true
      },
      "metadata": {
        "title": "Create Schema",
        "description": "Creating a schema for user input"
      }
    },
    {
      "id": "maybeOutputRouter",
      "type": "runJavascript",
      "configuration": {
        "code": "const maybeOutputRouter = ({ context }) => {\n  const action = { action: \"none\" };\n  if (Array.isArray(context) && context.length > 0) {\n    const lastItem = context[context.length - 1];\n    if (lastItem.role === \"model\") {\n      const parts = lastItem.parts;\n      const text = Array.isArray(parts) ? parts.map((item) => item.text).join(\"/n\") : parts.text;\n      const output = text;\n      try {\n        const data = JSON.parse(output);\n        if (data.voteRequest) {\n          const feedback = structuredClone(data);\n          delete feedback[\"voteRequest\"];\n          const action2 = { action: \"vote\", title: data.voteRequest };\n          return { feedback, action: action2, context };\n        }\n      } catch {\n      }\n      return { output, action, context };\n    }\n  }\n  return { context, action };\n};",
        "name": "maybeOutputRouter",
        "raw": true
      },
      "metadata": {
        "title": "Maybe Output",
        "description": "Checking if the last message was from the model"
      }
    },
    {
      "id": "output-5",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "again": {
              "type": "string",
              "title": "again"
            }
          }
        }
      },
      "metadata": {
        "title": "Rejection",
        "description": "Rejecting latest agent work per user action"
      }
    },
    {
      "id": "input-1",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "title": "Context",
              "description": "Incoming conversation context",
              "type": "array",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              },
              "examples": [
                "[{\"parts\":[{\"text\":\"{\\\"adCampaign\\\":{\\\"headlines\\\":[\\\"Breadboard: AI Playground\\\",\\\"Exp. AI Patterns\\\",\\\"Rapid Prototyping\\\",\\\"AI Power, Gemini\\\",\\\"Integrate AI Seamlessly\\\",\\\"Create Graphs, Prompts\\\",\\\"Accessible AI\\\",\\\"Breadboard: Dev's AI Kit\\\",\\\"Supercharge Dev, Breadboard\\\",\\\"Accelerate Innovation\\\",\\\"Revolutionize Dev, AI\\\",\\\"Breadboard: AI, Ingenuity\\\",\\\"Elevate Projects, Breadboard\\\",\\\"Unlock AI Power, Breadboard\\\"],\\\"descriptions\\\":[\\\"Breadboard: Play, experiment, prototype with AI. Integrate AI with Gemini.\\\",\\\"Stunning graphs with prompts. Accessible AI for devs.\\\",\\\"Accelerate innovation with Breadboard. Experiment with AI risk-free.\\\",\\\"Elevate projects with Breadboard AI. Integrate AI seamlessly.\\\"]},\\\"voteRequest\\\":\\\"Does this ad campaign seem ok to you?\\\"}\"}],\"role\":\"model\"}]"
              ],
              "default": "[]"
            },
            "title": {
              "title": "Title",
              "description": "The title to ask",
              "default": "User",
              "type": "string"
            },
            "description": {
              "title": "Description",
              "description": "The description of what to ask",
              "default": "User's question or request",
              "type": "string"
            }
          },
          "required": []
        }
      }
    },
    {
      "id": "output-3",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "behavior": [
            "bubble"
          ],
          "properties": {
            "feedback": {
              "type": "string",
              "title": "Feedback",
              "description": "The feedback to display"
            }
          }
        }
      },
      "metadata": {
        "title": "Feedback",
        "description": "Displaying the output to user with feedback"
      }
    },
    {
      "id": "output",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "behavior": [
            "bubble"
          ],
          "properties": {
            "output": {
              "type": "string",
              "title": "Output",
              "description": "The output to display"
            }
          }
        }
      },
      "metadata": {
        "title": "Output",
        "description": "Displaying the output the user."
      }
    }
  ],
  "kits": [],
  "graphs": {}
}