{
  "title": "Human",
  "description": "A human in the loop. Use this node to insert a real person (user input) into your team of synthetic workers.",
  "$schema": "https://raw.githubusercontent.com/breadboard-ai/breadboard/@google-labs/breadboard-schema@1.4.1/packages/schema/breadboard.schema.json",
  "version": "0.0.1",
  "edges": [
    {
      "from": "appendContext",
      "to": "output-2",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input",
      "to": "appendContext",
      "out": "text",
      "in": "toAdd"
    },
    {
      "from": "input",
      "to": "output-2",
      "out": "text",
      "in": "text"
    },
    {
      "from": "fn-5",
      "to": "createSchema",
      "out": "input",
      "in": "context"
    },
    {
      "from": "fn-5",
      "to": "fn-6",
      "out": "choose",
      "in": "context"
    },
    {
      "from": "fn-5",
      "to": "fn-8",
      "out": "choose",
      "in": "context"
    },
    {
      "from": "fn-5",
      "to": "output",
      "out": "output",
      "in": "output"
    },
    {
      "from": "fn-5",
      "to": "appendContext",
      "out": "input",
      "in": "context"
    },
    {
      "from": "createSchema",
      "to": "input",
      "out": "schema",
      "in": "schema"
    },
    {
      "from": "fn-3",
      "to": "output-4",
      "out": "done",
      "in": "context"
    },
    {
      "from": "fn-3",
      "to": "fn-5",
      "out": "context",
      "in": "context"
    },
    {
      "from": "fn-6",
      "to": "input-7",
      "out": "schema",
      "in": "schema"
    },
    {
      "from": "fn-6",
      "to": "fn-8",
      "out": "total",
      "in": "total"
    },
    {
      "from": "fn-8",
      "to": "output-9",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input-1",
      "to": "fn-3",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input-1",
      "to": "createSchema",
      "out": "title",
      "in": "title"
    },
    {
      "from": "input-1",
      "to": "createSchema",
      "out": "description",
      "in": "description"
    },
    {
      "from": "input-1",
      "to": "fn-6",
      "out": "title",
      "in": "title"
    },
    {
      "from": "input-1",
      "to": "fn-6",
      "out": "description",
      "in": "description"
    },
    {
      "from": "input-7",
      "to": "fn-8",
      "out": "choice",
      "in": "choice"
    }
  ],
  "nodes": [
    {
      "id": "output-2",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "array",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              },
              "title": "Context out"
            },
            "text": {
              "title": "Text",
              "behavior": [
                "deprecated"
              ],
              "type": "string"
            }
          }
        }
      }
    },
    {
      "id": "appendContext",
      "type": "runJavascript",
      "configuration": {
        "code": "const appendContext = ({ context, toAdd }) => {\n  if (!context) throw new Error(\"Context is required\");\n  const existing = Array.isArray(context) ? context : [context];\n  const incoming = toAdd;\n  if (!incoming.parts) {\n    const containsUserRole = existing.filter(\n      (item) => item.role !== \"model\" && item.role !== \"$metadata\"\n    ).length > 0;\n    if (!containsUserRole) {\n      return {\n        context: [\n          ...existing,\n          { role: \"user\", parts: [{ text: \"Do your magic\" }] }\n        ]\n      };\n    }\n    return { context: existing };\n  }\n  if (!incoming.role) {\n    incoming.role = \"user\";\n  }\n  const last = existing[existing.length - 1];\n  if (!last) {\n    return { context: [incoming] };\n  }\n  if (last.role !== incoming.role) {\n    return { context: [...existing, incoming] };\n  } else {\n    const result = structuredClone(existing);\n    const index = result.length - 1;\n    result[index].parts.push(...incoming.parts);\n    return { context: result };\n  }\n};",
        "name": "appendContext",
        "raw": true
      },
      "metadata": {
        "title": "Append Context",
        "description": "Appending user input to the conversation context"
      }
    },
    {
      "id": "input",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "title": "Text",
              "behavior": [
                "deprecated"
              ],
              "type": "string"
            }
          },
          "required": [
            "text"
          ]
        }
      },
      "metadata": {
        "title": "Input",
        "description": "Asking user for input"
      }
    },
    {
      "id": "fn-5",
      "type": "runJavascript",
      "configuration": {
        "code": "const fn_5 = ({ context }) => {\n    const c = asContextArray(context);\n    const mode = computeMode(c);\n    if (mode === \"input\") {\n      return { input: c };\n    } else if (mode === \"inputOutput\") {\n      return { input: c, output: c };\n    }\n    return { output: onlyChoices(c), choose: c };\n    function asContextArray(context2) {\n      const input = context2;\n      return Array.isArray(input) ? input : [input];\n    }\n    function onlyChoices(context2) {\n      const choices = [];\n      const reversed = [...context2].reverse();\n      for (const item of reversed) {\n        choices.push(item);\n        if (item.role === \"$metadata\" && item.type === \"split\" && item.data.type === \"start\") {\n          break;\n        }\n      }\n      return choices.reverse();\n    }\n    function computeMode(context2) {\n      const lastItem = context2[context2.length - 1];\n      if (lastItem.role === \"user\") {\n        return \"input\";\n      }\n      if (lastItem.role !== \"$metadata\") {\n        return \"inputOutput\";\n      }\n      if (lastItem.type === \"split\" && lastItem.data.type === \"end\") {\n        return \"choose\";\n      }\n      return \"inputOutput\";\n    }\n  };",
        "name": "fn_5",
        "raw": true
      },
      "metadata": {
        "title": "Compute Mode",
        "description": "Determining the mode of operation"
      }
    },
    {
      "id": "createSchema",
      "type": "runJavascript",
      "configuration": {
        "code": "const createSchema = ({ title: title2, action, description, context }) => {\n    const text = {\n      title: title2,\n      description,\n      type: \"object\",\n      behavior: [\"transient\", \"llm-content\"]\n    };\n    const schema = {\n      type: \"object\",\n      properties: { text }\n    };\n    if (action?.action == \"vote\") {\n      text.title = action.title;\n      text.enum = [\"Yes\", \"No\"];\n    }\n    return { schema, context };\n  };",
        "name": "createSchema",
        "raw": true
      },
      "metadata": {
        "title": "Create Schema",
        "description": "Creating a schema for user input"
      }
    },
    {
      "id": "fn-3",
      "type": "runJavascript",
      "configuration": {
        "code": "const fn_3 = ({ context }) => {\n  if (!context) throw new Error(\"Context is required\");\n  const c = context;\n  let done = false;\n  for (let i = 0; i < c.length; ++i) {\n    const item = c[i];\n    if (item.role === \"$metadata\" && item.type === \"looper\") {\n      const plan = item.data;\n      if (plan.done) {\n        done = true;\n        break;\n      }\n    }\n  }\n  if (done) {\n    return { done: context };\n  } else {\n    return { context };\n  }\n};",
        "name": "fn_3",
        "raw": true
      },
      "metadata": {
        "title": "Done Check",
        "description": "Checking to see if we can skip work altogether"
      }
    },
    {
      "id": "fn-6",
      "type": "runJavascript",
      "configuration": {
        "code": "const fn_6 = ({ context, title: title2, description }) => {\n    const c = asContextArray(context).reverse();\n    const choices = [];\n    for (const item of c) {\n      if (item.role === \"$metadata\" && item.type === \"split\") {\n        const type = item.data.type;\n        if (type === \"start\") {\n          break;\n        } else {\n          choices.push(`Choice ${choices.length + 1}`);\n        }\n      }\n    }\n    const schema = {\n      type: \"object\",\n      properties: {\n        choice: {\n          title: title2,\n          description,\n          type: \"string\",\n          enum: choices\n        }\n      }\n    };\n    return { schema, total: choices.length };\n    function asContextArray(context2) {\n      const input = context2;\n      return Array.isArray(input) ? input : [input];\n    }\n  };",
        "name": "fn_6",
        "raw": true
      },
      "metadata": {
        "title": "Choose Options",
        "description": "Creating the options to choose from"
      }
    },
    {
      "id": "fn-8",
      "type": "runJavascript",
      "configuration": {
        "code": "const fn_8 = ({ context, choice, total }) => {\n  const chosenIndex = total - parseInt(choice.split(\" \")[1], 10);\n  const c = context.reverse();\n  const current = [];\n  let found = \"before\";\n  let chunkIndex = 0;\n  let startIndex = 0;\n  for (const [i, item] of c.entries()) {\n    if (item.role === \"$metadata\" && item.type === \"split\") {\n      const type = item.data.type;\n      if (type === \"start\") {\n        startIndex = i;\n        break;\n      } else {\n        if (chunkIndex === chosenIndex) {\n          found = \"found\";\n        } else if (chunkIndex > chosenIndex) {\n          found = \"after\";\n        } else {\n          found = \"before\";\n        }\n        chunkIndex++;\n      }\n    } else if (found === \"found\") {\n      current.push(item);\n    }\n  }\n  const preamble = c.slice(startIndex + 1).reverse();\n  if (!found) {\n    throw new Error(`Integrity error: choice \"${choice}\" not found`);\n  }\n  return { context: [...preamble, ...current.reverse()] };\n};",
        "name": "fn_8",
        "raw": true
      },
      "metadata": {
        "title": "Read Choice",
        "description": "Reading the user's choice"
      }
    },
    {
      "id": "output",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "behavior": [
            "bubble"
          ],
          "properties": {
            "output": {
              "type": "object",
              "behavior": [
                "llm-content"
              ],
              "title": "Output",
              "description": "The output to display"
            }
          }
        }
      },
      "metadata": {
        "title": "Output",
        "description": "Displaying the output the user."
      }
    },
    {
      "id": "input-1",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "title": "Context in",
              "description": "Incoming conversation context",
              "type": "array",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              },
              "examples": [
                "[{\"parts\":[{\"text\":\"{\\\"adCampaign\\\":{\\\"headlines\\\":[\\\"Breadboard: AI Playground\\\",\\\"Exp. AI Patterns\\\",\\\"Rapid Prototyping\\\",\\\"AI Power, Gemini\\\",\\\"Integrate AI Seamlessly\\\",\\\"Create Graphs, Prompts\\\",\\\"Accessible AI\\\",\\\"Breadboard: Dev's AI Kit\\\",\\\"Supercharge Dev, Breadboard\\\",\\\"Accelerate Innovation\\\",\\\"Revolutionize Dev, AI\\\",\\\"Breadboard: AI, Ingenuity\\\",\\\"Elevate Projects, Breadboard\\\",\\\"Unlock AI Power, Breadboard\\\"],\\\"descriptions\\\":[\\\"Breadboard: Play, experiment, prototype with AI. Integrate AI with Gemini.\\\",\\\"Stunning graphs with prompts. Accessible AI for devs.\\\",\\\"Accelerate innovation with Breadboard. Experiment with AI risk-free.\\\",\\\"Elevate projects with Breadboard AI. Integrate AI seamlessly.\\\"]},\\\"voteRequest\\\":\\\"Does this ad campaign seem ok to you?\\\"}\"}],\"role\":\"model\"}]"
              ],
              "default": "[]"
            },
            "title": {
              "title": "Title",
              "description": "The user label",
              "behavior": [
                "config"
              ],
              "default": "User",
              "type": "string"
            },
            "description": {
              "title": "Description",
              "description": "The user's input",
              "behavior": [
                "config"
              ],
              "default": "A request or response",
              "type": "string"
            }
          },
          "required": []
        }
      }
    },
    {
      "id": "output-4",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "title": "Context out",
              "type": "string"
            }
          }
        }
      },
      "metadata": {
        "title": "Done",
        "description": "Skipping because we're done"
      }
    },
    {
      "id": "input-7",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "choice": {
              "type": "string",
              "title": "choice"
            }
          },
          "required": [
            "choice"
          ]
        }
      },
      "metadata": {
        "title": "Look at the choices above and pick one",
        "description": "Asking user to choose an option"
      }
    },
    {
      "id": "output-9",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "array",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              },
              "title": "Context out"
            }
          }
        }
      },
      "metadata": {
        "title": "Choice Output",
        "description": "Outputting the user's choice"
      }
    }
  ],
  "kits": [],
  "graphs": {}
}