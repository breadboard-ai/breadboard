{
  "title": "Tool Worker",
  "description": "A worker that can use tools to accomplish tasks.",
  "$schema": "https://raw.githubusercontent.com/breadboard-ai/breadboard/@google-labs/breadboard-schema@1.4.0/packages/schema/breadboard.schema.json",
  "version": "0.0.1",
  "edges": [
    {
      "from": "fn-3",
      "to": "output-2",
      "out": "context",
      "in": "context"
    },
    {
      "from": "router",
      "to": "assembleBoardInvoke",
      "out": "context",
      "in": "context"
    },
    {
      "from": "router",
      "to": "assembleBoardInvoke",
      "out": "functionCall",
      "in": "functionCall"
    },
    {
      "from": "router",
      "to": "formatFunctionResponse",
      "out": "context",
      "in": "generated"
    },
    {
      "from": "router",
      "to": "formatFunctionResponse",
      "out": "functionCall",
      "in": "functionCall"
    },
    {
      "from": "router",
      "to": "fn-3",
      "out": "context",
      "in": "generated"
    },
    {
      "from": "router",
      "to": "output-2",
      "out": "text",
      "in": "text"
    },
    {
      "from": "buildContext",
      "to": "doWork",
      "out": "context",
      "in": "context"
    },
    {
      "from": "buildContext",
      "to": "formatFunctionResponse",
      "out": "context",
      "in": "context"
    },
    {
      "from": "buildContext",
      "to": "fn-3",
      "out": "context",
      "in": "context"
    },
    {
      "from": "doWork",
      "to": "router",
      "out": "context",
      "in": "context"
    },
    {
      "from": "assembleBoardInvoke",
      "to": "invokeBoard",
      "out": "*",
      "in": ""
    },
    {
      "from": "formatFunctionResponse",
      "to": "replyToFunction",
      "out": "context",
      "in": "context"
    },
    {
      "from": "formatFunctionResponse",
      "to": "assembleContext",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input-1",
      "to": "buildContext",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input-1",
      "to": "buildContext",
      "out": "instruction",
      "in": "instruction"
    },
    {
      "from": "input-1",
      "to": "turnBoardsToFunctions",
      "out": "tools",
      "in": "list"
    },
    {
      "from": "formatFunctionDeclarations",
      "to": "doWork",
      "out": "tools",
      "in": "tools"
    },
    {
      "from": "formatFunctionDeclarations",
      "to": "assembleBoardInvoke",
      "out": "urlMap",
      "in": "urlMap"
    },
    {
      "from": "formatFunctionDeclarations",
      "to": "replyToFunction",
      "out": "tools",
      "in": "tools"
    },
    {
      "from": "invokeBoard",
      "to": "extractBoardResponse",
      "out": "*",
      "in": ""
    },
    {
      "from": "extractBoardResponse",
      "to": "formatFunctionResponse",
      "out": "response",
      "in": "response"
    },
    {
      "from": "replyToFunction",
      "to": "assembleContext",
      "out": "context",
      "in": "generated"
    },
    {
      "from": "replyToFunction",
      "to": "functionOutput",
      "out": "text",
      "in": "text"
    },
    {
      "from": "assembleContext",
      "to": "functionOutput",
      "out": "context",
      "in": "context"
    },
    {
      "from": "turnBoardsToFunctions",
      "to": "formatFunctionDeclarations",
      "out": "list",
      "in": "list"
    }
  ],
  "nodes": [
    {
      "id": "output-2",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "string",
              "title": "context"
            },
            "text": {
              "type": "string",
              "title": "text"
            }
          }
        }
      }
    },
    {
      "id": "fn-3",
      "type": "runJavascript",
      "configuration": {
        "code": "const fn_3 = ({ context, generated }) => {\n  if (!context)\n    throw new Error(\"Context is required\");\n  return { context: [...context, generated] };\n};",
        "name": "fn_3",
        "raw": true
      },
      "metadata": {
        "title": "Assemble Non-function call Context",
        "description": "Assembling the final context for the output"
      }
    },
    {
      "id": "router",
      "type": "runJavascript",
      "configuration": {
        "code": "const router = ({ context }) => {\n  if (!context)\n    throw new Error(\"Context is a required input\");\n  const item = context;\n  const part = item.parts[0];\n  console.assert(\n    item.parts.length === 1,\n    \"Only one part is expected in Gemini response\"\n  );\n  if (\"text\" in part) {\n    return { context, text: part.text };\n  }\n  return { context, functionCall: part.functionCall };\n};",
        "name": "router",
        "raw": true
      },
      "metadata": {
        "title": "Router",
        "description": "Routing to either function call invocation or text reply"
      }
    },
    {
      "id": "buildContext",
      "type": "runJavascript",
      "configuration": {
        "code": "const buildContext = ({ context, instruction }) => {\n  if (typeof context === \"string\") {\n    context = [{ role: \"user\", parts: [{ text: context }] }];\n  }\n  const list = context || [];\n  if (list.length > 0) {\n    const last = list[list.length - 1];\n    if (last.role === \"user\") {\n      last.parts.unshift({ text: instruction });\n      return { context: list };\n    }\n  }\n  return {\n    context: [...list, { role: \"user\", parts: [{ text: instruction }] }]\n  };\n};",
        "name": "buildContext",
        "raw": true
      },
      "metadata": {
        "title": "Build Context",
        "description": "Combining the context and instruction into a single context"
      }
    },
    {
      "id": "doWork",
      "type": "text",
      "configuration": {
        "text": "unused"
      },
      "metadata": {
        "title": "Do Work",
        "description": "Using Gemini to do the work"
      }
    },
    {
      "id": "assembleBoardInvoke",
      "type": "runJavascript",
      "configuration": {
        "code": "const assembleBoardInvoke = ({ functionCall, urlMap }) => {\n  if (!functionCall)\n    throw new Error(\"Function call is a required input\");\n  if (!urlMap)\n    throw new Error(\"URL map is a required input\");\n  const call = functionCall;\n  const $board = urlMap[call.name];\n  const generator = \"https://raw.githubusercontent.com/breadboard-ai/breadboard/05136f811e443dd931a2a2a40ff5a3f388d5ce75/packages/breadboard-web/public/graphs/gemini-generator.json\";\n  return { $board, generator, ...call.args };\n};",
        "name": "assembleBoardInvoke",
        "raw": true
      },
      "metadata": {
        "title": "Assemble Board Invoke",
        "description": "Assembling the board invocation based on Gemini response"
      }
    },
    {
      "id": "formatFunctionResponse",
      "type": "runJavascript",
      "configuration": {
        "code": "const formatFunctionResponse = ({ context, generated, functionCall, response }) => {\n    const call = functionCall;\n    return {\n      context: [\n        ...context,\n        generated,\n        {\n          role: \"function\",\n          parts: [{ functionResponse: { name: call.name, response } }]\n        }\n      ]\n    };\n  };",
        "name": "formatFunctionResponse",
        "raw": true
      },
      "metadata": {
        "title": "Format Function Response",
        "description": "Formatting the function response"
      }
    },
    {
      "id": "input-1",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "title": "Context",
              "type": "array",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              },
              "default": "What is the square root of e?"
            },
            "instruction": {
              "title": "Instruction",
              "format": "multiline",
              "examples": [
                "You are a hip, fun-loving mathematician who loves to help solve problems and chat about math. You also love finding answers to questions using Search. Use the right tool for solving the problems and reply without engaging tools otherwise. After using the tool, make sure to summarize and expand the answer in a hip, humorous way to help the user enjoy the beauty of math.\n\nIn situations where the tool use is not necessary, just carry the conversation with the user."
              ],
              "type": "string"
            },
            "tools": {
              "title": "Tools",
              "type": "array",
              "description": "The list to iterate over.",
              "items": {
                "type": "object",
                "behavior": [
                  "board"
                ]
              },
              "examples": [
                "[\"https://raw.githubusercontent.com/breadboard-ai/breadboard/b5577943bdd0956bed3874244b34ea80f1589eaa/packages/breadboard-web/public/graphs/search-summarize.json\",{\"title\":\"The Calculator Board\",\"description\":\"A simple AI pattern that leans on the power of the LLMs to generate language to solve math problems.\",\"version\":\"0.0.2\",\"edges\":[{\"from\":\"compute\",\"to\":\"answer\",\"out\":\"*\",\"in\":\"\"},{\"from\":\"generator\",\"to\":\"compute\",\"out\":\"text\",\"in\":\"code\"},{\"from\":\"math-question\",\"to\":\"math-function\",\"out\":\"question\",\"in\":\"question\"},{\"from\":\"math-question\",\"to\":\"generator\",\"out\":\"generator\",\"in\":\"path\"},{\"from\":\"math-function\",\"to\":\"generator\",\"out\":\"prompt\",\"in\":\"text\"}],\"nodes\":[{\"id\":\"answer\",\"type\":\"output\",\"configuration\":{\"schema\":{\"type\":\"object\",\"properties\":{\"result\":{\"type\":\"string\",\"title\":\"Answer\",\"description\":\"The answer to the math problem\"}},\"required\":[\"text\"]}}},{\"id\":\"compute\",\"type\":\"runJavascript\",\"configuration\":{\"name\":\"compute\"}},{\"id\":\"generator\",\"type\":\"invoke\",\"configuration\":{}},{\"id\":\"math-question\",\"type\":\"input\",\"configuration\":{\"schema\":{\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\",\"title\":\"Math problem\",\"description\":\"Ask a math question\",\"examples\":[\"What is the square root of pi?\"]},\"generator\":{\"type\":\"string\",\"title\":\"Generator\",\"description\":\"The URL of the generator to call\",\"default\":\"text-generator.json\"}},\"required\":[\"text\"]}}},{\"id\":\"math-function\",\"type\":\"promptTemplate\",\"configuration\":{\"template\":\"Translate the math problem below into a self-contained,\\nzero-argument JavaScript function named `compute` that can be executed\\nto provide the answer to the problem.\\n\\nDo not use any dependencies or libraries.\\n\\nMath Problem: {{question}}\\n\\nSolution:\"}}],\"graphs\":{}}]"
              ],
              "default": "[]"
            }
          },
          "required": [
            "instruction"
          ]
        }
      }
    },
    {
      "id": "formatFunctionDeclarations",
      "type": "runJavascript",
      "configuration": {
        "code": "const formatFunctionDeclarations = ({ list }) => {\n  const tools = [];\n  const urlMap = {};\n  list.forEach((item) => {\n    tools.push(item.function);\n    urlMap[item.function.name] = item.boardURL;\n  });\n  return { tools, urlMap };\n};",
        "name": "formatFunctionDeclarations",
        "raw": true
      },
      "metadata": {
        "title": "Format Function Declarations",
        "description": "Formatting the function declarations"
      }
    },
    {
      "id": "invokeBoard",
      "type": "invoke",
      "configuration": {},
      "metadata": {
        "title": "Invoke Board",
        "description": "Invoking the board"
      }
    },
    {
      "id": "extractBoardResponse",
      "type": "runJavascript",
      "configuration": {
        "code": "const extractBoardResponse = (inputs) => {\n  const { schema, ...response } = inputs;\n  schema;\n  return { response };\n};",
        "name": "extractBoardResponse",
        "raw": true
      },
      "metadata": {
        "title": "Format Board Response",
        "description": "Extracting the board response from the invocation"
      }
    },
    {
      "id": "replyToFunction",
      "type": "text",
      "configuration": {
        "text": "unused"
      },
      "metadata": {
        "title": "Reply to Function",
        "description": "Using Gemini to reply to function results"
      }
    },
    {
      "id": "assembleContext",
      "type": "runJavascript",
      "configuration": {
        "code": "const assembleContext = ({ context, generated }) => {\n  if (!context)\n    throw new Error(\"Context is required\");\n  return { context: [...context, generated] };\n};",
        "name": "assembleContext",
        "raw": true
      },
      "metadata": {
        "title": "Assemble Context",
        "description": "Assembling the final context for the output"
      }
    },
    {
      "id": "turnBoardsToFunctions",
      "type": "map",
      "configuration": {
        "board": "#boardToFunction"
      },
      "metadata": {
        "title": "Turn Boards into Functions",
        "description": "Turning provided boards into functions"
      }
    },
    {
      "id": "functionOutput",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "string",
              "title": "context"
            },
            "text": {
              "type": "string",
              "title": "Text",
              "description": "The generated text"
            }
          }
        }
      },
      "metadata": {
        "title": "Function Call Output",
        "description": "Outputting the function call results"
      }
    }
  ],
  "kits": [],
  "graphs": {
    "boardToFunction": {
      "title": "Board to functions",
      "description": "Use this board to convert specified boards into function-calling signatures",
      "edges": [
        {
          "from": "getFunctionSignature",
          "to": "output-2",
          "out": "function",
          "in": "function"
        },
        {
          "from": "input-1",
          "to": "curry-3",
          "out": "item",
          "in": "$board"
        },
        {
          "from": "input-1",
          "to": "output-2",
          "out": "item",
          "in": "boardURL"
        },
        {
          "from": "curry-3",
          "to": "getFunctionSignature",
          "out": "board",
          "in": "json"
        }
      ],
      "nodes": [
        {
          "id": "output-2",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "function": {
                  "type": "object",
                  "title": "function"
                },
                "boardURL": {
                  "type": "string",
                  "title": "boardURL"
                }
              }
            }
          }
        },
        {
          "id": "getFunctionSignature",
          "type": "jsonata",
          "configuration": {
            "expression": "\n      (\n        $adjustType := function ($type) {\n            $type = \"object\" or $type = \"array\" ? \"string\" : $type\n        };\n\n        {\n        \"function\": {\n            \"name\": $replace(title, /\\W/, \"_\"),\n            \"description\": description,\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": nodes[type=\"input\"][0].configuration.schema.properties ~> $each(function($v, $k) {\n                { $k: {\n                    \"type\": $v.type ~> $adjustType,\n                    \"description\": $v.description\n                } }\n                }) ~> $merge\n            }\n        },\n        \"returns\": nodes[type=\"output\"][0].configuration.schema ~> | ** | {}, 'title' |\n        }\n    )",
            "raw": true
          }
        },
        {
          "id": "input-1",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "item": {
                  "title": "board",
                  "behavior": [
                    "board"
                  ],
                  "description": "The board to curry. Can be a BoardCapability, a graph or a URL",
                  "type": "string"
                }
              },
              "required": [
                "item"
              ]
            }
          }
        },
        {
          "id": "curry-3",
          "type": "curry",
          "configuration": {}
        }
      ],
      "graphs": {}
    }
  }
}