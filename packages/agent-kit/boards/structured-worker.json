{
  "title": "Structured Worker",
  "description": "A worker who outputs structure data (JSON) provided a schema.",
  "$schema": "https://raw.githubusercontent.com/breadboard-ai/breadboard/@google-labs/breadboard-schema@1.4.1/packages/schema/breadboard.schema.json",
  "version": "0.0.1",
  "edges": [
    {
      "from": "assembleContext",
      "to": "output-2",
      "out": "context",
      "in": "context"
    },
    {
      "from": "validate",
      "to": "count",
      "out": "$error",
      "in": "error"
    },
    {
      "from": "validate",
      "to": "errorOutput",
      "out": "$error",
      "in": "$error"
    },
    {
      "from": "validate",
      "to": "assembleContext",
      "out": "json",
      "in": "json"
    },
    {
      "from": "validate",
      "to": "output-2",
      "out": "json",
      "in": "json"
    },
    {
      "from": "buildContext",
      "to": "count",
      "out": "context",
      "in": "context",
      "constant": true
    },
    {
      "from": "buildContext",
      "to": "assembleContext",
      "out": "context",
      "in": "context"
    },
    {
      "from": "generate",
      "to": "validate",
      "out": "text",
      "in": "json"
    },
    {
      "from": "input-1",
      "to": "schemish",
      "out": "schema",
      "in": "schema"
    },
    {
      "from": "input-1",
      "to": "buildContext",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input-1",
      "to": "buildContext",
      "out": "instruction",
      "in": "instruction"
    },
    {
      "from": "input-1",
      "to": "validate",
      "out": "schema",
      "in": "schema",
      "constant": true
    },
    {
      "from": "count",
      "to": "count",
      "out": "count",
      "in": "count"
    },
    {
      "from": "count",
      "to": "generate",
      "out": "continue",
      "in": "context"
    },
    {
      "from": "count",
      "to": "errorOutput",
      "out": "stop",
      "in": "context"
    },
    {
      "from": "format",
      "to": "buildContext",
      "out": "prompt",
      "in": "format"
    },
    {
      "from": "schemish",
      "to": "format",
      "out": "schemish",
      "in": "schemish"
    },
    {
      "from": "initialValues",
      "to": "count",
      "out": "count",
      "in": "count"
    },
    {
      "from": "initialValues",
      "to": "count",
      "out": "error",
      "in": "error"
    }
  ],
  "nodes": [
    {
      "id": "output-2",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "string",
              "title": "context"
            },
            "json": {
              "title": "json",
              "description": "The validated JSON.",
              "type": "string"
            }
          }
        }
      }
    },
    {
      "id": "assembleContext",
      "type": "runJavascript",
      "configuration": {
        "code": "const assembleContext = ({ context: context2, json: json2 }) => {\n  if (!context2) throw new Error(\"Context is required\");\n  return {\n    context: [\n      ...context2,\n      { role: \"model\", parts: { text: JSON.stringify(json2) } }\n    ]\n  };\n};",
        "name": "assembleContext",
        "raw": true
      },
      "metadata": {
        "title": "Assemble Context",
        "description": "Assembling the context for the agent"
      }
    },
    {
      "id": "validate",
      "type": "validateJson",
      "configuration": {},
      "metadata": {
        "title": "Validate JSON",
        "logLevel": "info",
        "description": "Checking my work"
      }
    },
    {
      "id": "buildContext",
      "type": "runJavascript",
      "configuration": {
        "code": "const buildContext = ({ context: context2, format, instruction }) => {\n  if (!Array.isArray(context2)) {\n    const text2 = typeof context2 === \"string\" ? context2 : JSON.stringify(context2);\n    context2 = [{ role: \"user\", parts: [{ text: text2 }] }];\n  }\n  const list = context2 || [];\n  if (list.length > 0) {\n    const last = list[list.length - 1];\n    if (last.role === \"user\") {\n      last.parts.unshift(\n        { text: instruction },\n        { text: format }\n      );\n      return { context: list };\n    }\n  }\n  return {\n    context: [\n      ...list,\n      { role: \"user\", parts: [{ text: instruction }, { text: format }] }\n    ]\n  };\n};",
        "name": "buildContext",
        "raw": true
      },
      "metadata": {
        "title": "Build Context",
        "description": "Building the context for the agent"
      }
    },
    {
      "id": "generate",
      "type": "text",
      "configuration": {
        "text": "unused"
      },
      "metadata": {
        "title": "Generate",
        "logLevel": "info",
        "description": "Generating an answer"
      }
    },
    {
      "id": "input-1",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "schema": {
              "title": "Schema",
              "description": "The schema to convert to schemish.",
              "type": "object",
              "examples": [
                "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"poems\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"inspiration\": {\n            \"type\": \"string\",\n            \"description\": \"The inspiration behind the poem\"\n          },\n          \"poem\": {\n            \"type\": \"string\",\n            \"description\": \"The poem itself\"\n          }\n        }\n      }\n    }\n  }\n}"
              ],
              "behavior": [
                "json-schema",
                "config"
              ],
              "default": "{}"
            },
            "context": {
              "title": "Context",
              "type": "array",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              },
              "default": "[]",
              "examples": [
                "the universe within us"
              ]
            },
            "instruction": {
              "title": "Instruction",
              "behavior": [
                "config"
              ],
              "format": "multiline",
              "examples": [
                "You are a brilliant poet who specializes in two-line rhyming poems.\nGiven any topic, you can quickly whip up three two-line rhyming poems about it.\nLook at the topic below and do your magic"
              ],
              "type": "string"
            }
          },
          "required": [
            "instruction"
          ]
        }
      }
    },
    {
      "id": "count",
      "type": "runJavascript",
      "configuration": {
        "code": "const count = ({ context: context2, error, count }) => {\n  const num = count - 1;\n  if (num != 0) {\n    return { continue: context2, count: num };\n  }\n  return { stop: error };\n};",
        "name": "count",
        "raw": true
      },
      "metadata": {
        "title": "Counter",
        "description": "Counting the JSON healing iteration"
      }
    },
    {
      "id": "errorOutput",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "$error": {
              "title": "$error",
              "description": "The error if the JSON is invalid.",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "error"
                  ]
                },
                "error": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "parsing",
                        "validation"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "context": {
              "type": "string",
              "title": "context"
            }
          }
        }
      },
      "metadata": {
        "title": "Error Output",
        "description": "Displaying error output, giving up on JSON healing"
      }
    },
    {
      "id": "format",
      "type": "promptTemplate",
      "configuration": {
        "template": "Reply as valid JSON of the following format:\n\n```json\n{{schemish}}\n```\n"
      },
      "metadata": {
        "title": "Reply Structure Formatter",
        "description": "Formatting the reply structure for the agent."
      }
    },
    {
      "id": "schemish",
      "type": "schemish",
      "configuration": {},
      "metadata": {
        "title": "Schemish",
        "description": "Converting JSON schema to a more compact format"
      }
    },
    {
      "id": "initialValues",
      "type": "passthrough",
      "configuration": {
        "count": 5,
        "error": "stub"
      },
      "metadata": {
        "title": "Initial Values",
        "description": "Populating initial values for the counter"
      }
    }
  ],
  "kits": [],
  "graphs": {}
}