{
  "title": "Human",
  "metadata": {
    "icon": "human",
    "help": {
      "url": "https://breadboard-ai.github.io/breadboard/docs/kits/agents/#human"
    }
  },
  "description": "A human in the loop. Use this node to insert a real person (user input) into your team of synthetic workers.",
  "version": "0.0.1",
  "edges": [
    {
      "from": "appendContext",
      "to": "output-2",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input",
      "to": "appendContext",
      "out": "text",
      "in": "toAdd"
    },
    {
      "from": "input",
      "to": "output-2",
      "out": "text",
      "in": "text"
    },
    {
      "from": "fn-5",
      "to": "createSchema",
      "out": "input",
      "in": "context"
    },
    {
      "from": "fn-5",
      "to": "fn-6",
      "out": "choose",
      "in": "context"
    },
    {
      "from": "fn-5",
      "to": "fn-8",
      "out": "choose",
      "in": "context"
    },
    {
      "from": "fn-5",
      "to": "output",
      "out": "output",
      "in": "output"
    },
    {
      "from": "fn-5",
      "to": "appendContext",
      "out": "input",
      "in": "context"
    },
    {
      "from": "createSchema",
      "to": "input",
      "out": "schema",
      "in": "schema"
    },
    {
      "from": "fn-3",
      "to": "output-4",
      "out": "done",
      "in": "context"
    },
    {
      "from": "fn-3",
      "to": "fn-5",
      "out": "context",
      "in": "context"
    },
    {
      "from": "fn-6",
      "to": "input-7",
      "out": "schema",
      "in": "schema"
    },
    {
      "from": "fn-6",
      "to": "fn-8",
      "out": "total",
      "in": "total"
    },
    {
      "from": "fn-8",
      "to": "output-9",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input-1",
      "to": "fn-3",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input-1",
      "to": "createSchema",
      "out": "title",
      "in": "title"
    },
    {
      "from": "input-1",
      "to": "createSchema",
      "out": "description",
      "in": "description"
    },
    {
      "from": "input-1",
      "to": "fn-6",
      "out": "title",
      "in": "title"
    },
    {
      "from": "input-1",
      "to": "fn-6",
      "out": "description",
      "in": "description"
    },
    {
      "from": "input-7",
      "to": "fn-8",
      "out": "choice",
      "in": "choice"
    }
  ],
  "nodes": [
    {
      "id": "output-2",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "array",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              },
              "title": "Context out"
            },
            "text": {
              "title": "Text",
              "behavior": [
                "deprecated"
              ],
              "type": "string"
            }
          }
        }
      }
    },
    {
      "id": "appendContext",
      "type": "runJavascript",
      "configuration": {
        "code": "const appendContext = ({context,toAdd})=>{if(!context)throw new Error(\"Context is required\");const existing=Array.isArray(context)?context:[context];const incoming=toAdd;if(!incoming.parts){const containsUserRole=existing.filter(item=>item.role!==\"model\"&&item.role!==\"$metadata\").length>0;if(!containsUserRole){return{context:[...existing,{role:\"user\",parts:[{text:\"Do your magic\"}]}]}}return{context:existing}}if(!incoming.role){incoming.role=\"user\"}const last=existing[existing.length-1];if(!last){return{context:[incoming]}}if(last.role!==incoming.role){return{context:[...existing,incoming]}}else{const result=structuredClone(existing);const index=result.length-1;result[index].parts.push(...incoming.parts);return{context:result}}};",
        "name": "appendContext",
        "raw": true
      },
      "metadata": {
        "title": "Append Context",
        "description": "Appending user input to the conversation context"
      }
    },
    {
      "id": "input",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "title": "Text",
              "behavior": [
                "deprecated"
              ],
              "type": "string"
            }
          },
          "required": [
            "text"
          ]
        }
      },
      "metadata": {
        "title": "Input",
        "description": "Asking user for input"
      }
    },
    {
      "id": "fn-5",
      "type": "runJavascript",
      "configuration": {
        "code": "const fn_5 = ({context})=>{if(!context){return{input:[]}}const c=asContextArray(context);const mode=computeMode(c);if(mode===\"input\"){return{input:c}}else if(mode===\"inputOutput\"){return{input:c,output:c}}return{output:onlyChoices(c),choose:c};function asContextArray(context2){const input=context2;return Array.isArray(input)?input:[input]}__name(asContextArray,\"asContextArray\");function onlyChoices(context2){const choices=[];const reversed=[...context2].reverse();for(const item of reversed){choices.push(item);if(item.role===\"$metadata\"&&item.type===\"split\"&&item.data.type===\"start\"){break}}return choices.reverse()}__name(onlyChoices,\"onlyChoices\");function computeMode(context2){const lastItem=context2[context2.length-1];if(!lastItem){return\"input\"}if(lastItem.role===\"user\"){return\"input\"}if(lastItem.role!==\"$metadata\"){return\"inputOutput\"}if(lastItem.type===\"split\"&&lastItem.data.type===\"end\"){const splitId=lastItem.data.id;let choiceCounter=1;for(let i=context2.length-2;i>=0;i--){const item=context2[i];if(item.role===\"$metadata\"&&item.type===\"split\"){const{id,type}=item.data;if(splitId!==id){return\"inputOutput\"}if(type===\"start\"){break}choiceCounter++}}if(choiceCounter>1){return\"choose\"}}return\"inputOutput\"}__name(computeMode,\"computeMode\")};",
        "name": "fn_5",
        "raw": true
      },
      "metadata": {
        "title": "Compute Mode",
        "description": "Determining the mode of operation"
      }
    },
    {
      "id": "createSchema",
      "type": "runJavascript",
      "configuration": {
        "code": "const createSchema = ({title,action,description,context})=>{const text={title,description,type:\"object\",behavior:[\"transient\",\"llm-content\"],examples:[JSON.stringify({parts:[{text:\"\"}]})]};const schema={type:\"object\",properties:{text}};if(action?.action==\"vote\"){text.title=action.title;text.enum=[\"Yes\",\"No\"]}return{schema,context}};",
        "name": "createSchema",
        "raw": true
      },
      "metadata": {
        "title": "Create Schema",
        "description": "Creating a schema for user input"
      }
    },
    {
      "id": "fn-3",
      "type": "runJavascript",
      "configuration": {
        "code": "const fn_3 = ({context})=>{if(!context)throw new Error(\"Context is required\");const c=context;let done=false;for(let i=0;i<c.length;++i){const item=c[i];if(item.role===\"$metadata\"&&item.type===\"looper\"){const plan=item.data;if(plan.done){done=true;break}}}if(done){return{done:context}}else{return{context}}};",
        "name": "fn_3",
        "raw": true
      },
      "metadata": {
        "title": "Done Check",
        "description": "Checking to see if we can skip work altogether"
      }
    },
    {
      "id": "fn-6",
      "type": "runJavascript",
      "configuration": {
        "code": "const fn_6 = ({context,title,description})=>{const c=asContextArray(context).reverse();const choices=[];for(const item of c){if(item.role===\"$metadata\"&&item.type===\"split\"){const type=item.data.type;if(type===\"start\"){break}else{choices.push(`Choice ${choices.length+1}`)}}}const schema={type:\"object\",properties:{choice:{title,description,type:\"string\",enum:choices}}};return{schema,total:choices.length};function asContextArray(context2){const input=context2;return Array.isArray(input)?input:[input]}__name(asContextArray,\"asContextArray\")};",
        "name": "fn_6",
        "raw": true
      },
      "metadata": {
        "title": "Choose Options",
        "description": "Creating the options to choose from"
      }
    },
    {
      "id": "fn-8",
      "type": "runJavascript",
      "configuration": {
        "code": "const fn_8 = ({context,choice,total})=>{const chosenIndex=total-parseInt(choice.split(\" \")[1],10);const c=context.reverse();const current=[];let found=\"before\";let chunkIndex=0;let startIndex=0;for(const[i,item]of c.entries()){if(item.role===\"$metadata\"&&item.type===\"split\"){const type=item.data.type;if(type===\"start\"){startIndex=i;break}else{if(chunkIndex===chosenIndex){found=\"found\"}else if(chunkIndex>chosenIndex){found=\"after\"}else{found=\"before\"}chunkIndex++}}else if(found===\"found\"){current.push(item)}}const preamble=c.slice(startIndex+1).reverse();if(!found){throw new Error(`Integrity error: choice \"${choice}\" not found`)}return{context:[...preamble,...current.reverse()]}};",
        "name": "fn_8",
        "raw": true
      },
      "metadata": {
        "title": "Read Choice",
        "description": "Reading the user's choice"
      }
    },
    {
      "id": "output",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "behavior": [
            "bubble"
          ],
          "properties": {
            "output": {
              "title": "Output",
              "description": "The output to display",
              "type": "array",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              }
            }
          }
        }
      },
      "metadata": {
        "title": "Output",
        "description": "Displaying the output the user."
      }
    },
    {
      "id": "input-1",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "title": "Context in",
              "description": "Incoming conversation context",
              "type": "array",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              },
              "default": "[]"
            },
            "title": {
              "title": "Title",
              "description": "The user label",
              "behavior": [
                "config"
              ],
              "default": "User",
              "type": "string"
            },
            "description": {
              "title": "Description",
              "description": "The user's input",
              "behavior": [
                "config"
              ],
              "default": "A request or response",
              "type": "string"
            }
          },
          "required": []
        }
      }
    },
    {
      "id": "output-4",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "title": "Context out",
              "type": "string"
            }
          }
        }
      },
      "metadata": {
        "title": "Done",
        "description": "Skipping because we're done"
      }
    },
    {
      "id": "input-7",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "choice": {
              "type": "string",
              "title": "choice"
            }
          },
          "required": [
            "choice"
          ]
        }
      },
      "metadata": {
        "title": "Look at the choices above and pick one",
        "description": "Asking user to choose an option"
      }
    },
    {
      "id": "output-9",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "array",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              },
              "title": "Context out"
            }
          }
        }
      },
      "metadata": {
        "title": "Choice Output",
        "description": "Outputting the user's choice"
      }
    }
  ],
  "graphs": {}
}