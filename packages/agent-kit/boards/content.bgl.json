{
  "title": "Content",
  "description": "Use it as a way to initialize or add to conversation context, optionally applying extra arguments with mustache-style {{placeholders}}.",
  "version": "0.1.0",
  "metadata": {
    "icon": "code-blocks",
    "help": {
      "url": "https://breadboard-ai.github.io/breadboard/docs/kits/agents/#content"
    },
    "describer": "#subgraph-0"
  },
  "edges": [
    {
      "from": "input-0",
      "to": "runJavascript-0",
      "out": "*",
      "in": ""
    },
    {
      "from": "runJavascript-0",
      "to": "output-0",
      "out": "context",
      "in": "context"
    }
  ],
  "nodes": [
    {
      "id": "input-0",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {},
          "required": [],
          "additionalProperties": {
            "type": "object",
            "properties": {},
            "required": [],
            "additionalProperties": true
          }
        }
      }
    },
    {
      "id": "output-0",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "user",
                      "model",
                      "tool"
                    ]
                  },
                  "parts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "text"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "functionCall": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "name",
                                "args"
                              ],
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "functionCall"
                          ],
                          "additionalProperties": false
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "parts"
                ],
                "additionalProperties": false,
                "behavior": [
                  "llm-content"
                ]
              }
            }
          },
          "required": [
            "context"
          ]
        }
      }
    },
    {
      "id": "runJavascript-0",
      "type": "runJavascript",
      "configuration": {
        "code": "const run = function content(starInputs){const{template,context,...inputs}=starInputs;const params=mergeParams(findParams(template));const values=collectValues(params,inputs);return{context:prependContext(context,subContent(template,values))};function prependContext(context2,c){const content2=isEmptyContent(c)?[]:[c];if(!context2)return[...content2];if(isLLMContentArray(context2)){const last=context2.at(-1);if(last&&last.role===\"user\"){return[...context2.slice(0,-1),{role:\"user\",parts:[...last.parts,...content2.at(0)?.parts||[]]}]}return[...context2,...content2]}return content2}__name(prependContext,\"prependContext\");function isEmptyContent(content2){if(!content2)return true;if(typeof content2===\"string\")return true;if(!content2.parts?.length)return true;if(content2.parts.length>1)return false;const part=content2.parts[0];if(!(\"text\"in part))return true;if(part.text.trim()===\"\")return true;return false}__name(isEmptyContent,\"isEmptyContent\");function subContent(content2,values2){if(Array.isArray(content2)){content2=content2.at(-1)}if(!content2)return\"\";return{role:content2.role||\"user\",parts:mergeTextParts(splitToTemplateParts(content2).flatMap(part=>{if(\"param\"in part){const value=values2[part.param];if(typeof value===\"string\"){return{text:value}}else if(isLLMContent(value)){return value.parts}else if(isLLMContentArray(value)){const last=getLastNonMetadata(value);return last?last.parts:[]}else{return{text:JSON.stringify(value)}}}else{return part}}))}}__name(subContent,\"subContent\");function getLastNonMetadata(content2){for(let i=content2.length-1;i>=0;i--){if(content2[i].role!==\"$metadata\"){return content2[i]}}return null}__name(getLastNonMetadata,\"getLastNonMetadata\");function findParams(content2){const parts=content2?.parts;if(!parts)return[];const results=parts.flatMap(part=>{if(!(\"text\"in part))return[];const matches=part.text.matchAll(/{{\\s*(?<name>[\\w-]+)(?:\\s*\\|\\s*(?<op>[\\w-]*)(?::\\s*\"(?<arg>[\\w-]+)\")?)?\\s*}}/g);return unique(Array.from(matches)).map(match=>{const name=match.groups?.name||\"\";if(!name)return null;return{name,locations:[{part,parts}]}}).filter(Boolean)});return results}__name(findParams,\"findParams\");function mergeParams(...paramList){return paramList.reduce((acc,params2)=>{for(const param of params2){const{name,locations}=param;const existing=acc[name];if(existing){existing.push(...locations)}else{acc[name]=locations}}return acc},{})}__name(mergeParams,\"mergeParams\");function unique(params2){return Array.from(new Set(params2))}__name(unique,\"unique\");function mergeTextParts(parts){const merged=[];for(const part of parts){if(\"text\"in part){const last=merged[merged.length-1];if(last&&\"text\"in last){last.text+=part.text}else{merged.push(part)}}else{merged.push(part)}}return merged}__name(mergeTextParts,\"mergeTextParts\");function toId(param){return`p-${param}`}__name(toId,\"toId\");function toTitle(id){const spaced=id?.replace(/[_-]/g,\" \");return(spaced?.at(0)?.toUpperCase()??\"\")+(spaced?.slice(1)?.toLowerCase()??\"\")}__name(toTitle,\"toTitle\");function splitToTemplateParts(content2){const parts=[];for(const part of content2.parts){if(!(\"text\"in part)){parts.push(part);continue}const matches=part.text.matchAll(/{{\\s*(?<name>[\\w-]+)(?:\\s*\\|\\s*(?<op>[\\w-]*)(?::\\s*\"(?<arg>[\\w-]+)\")?)?\\s*}}/g);let start=0;for(const match of matches){const name=match.groups?.name||\"\";const end=match.index;if(end>start){parts.push({text:part.text.slice(start,end)})}parts.push({param:name});start=end+match[0].length}if(start<part.text.length){parts.push({text:part.text.slice(start)})}}return parts}__name(splitToTemplateParts,\"splitToTemplateParts\");function collectValues(params2,inputs2){const values2={};for(const param in params2){const id=toId(param);const value=inputs2[id];if(!value){const title=toTitle(param);throw new Error(`Missing required parameter: ${title}`)}values2[param]=value}return values2}__name(collectValues,\"collectValues\");function isLLMContent(nodeValue){if(typeof nodeValue!==\"object\"||!nodeValue)return false;if(nodeValue===null||nodeValue===void 0)return false;if(\"role\"in nodeValue&&nodeValue.role===\"$metadata\"){return true}return\"parts\"in nodeValue&&Array.isArray(nodeValue.parts)}__name(isLLMContent,\"isLLMContent\");function isLLMContentArray(nodeValue){if(!Array.isArray(nodeValue))return false;if(nodeValue.length===0)return true;return isLLMContent(nodeValue.at(-1))}__name(isLLMContentArray,\"isLLMContentArray\")};",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {},
            "required": [],
            "additionalProperties": true
          }
        },
        "name": "run",
        "outputSchema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "user",
                      "model",
                      "tool"
                    ]
                  },
                  "parts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "text"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "functionCall": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "args": {
                                  "type": "object",
                                  "properties": {},
                                  "required": [],
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "name",
                                "args"
                              ],
                              "additionalProperties": false
                            }
                          },
                          "required": [
                            "functionCall"
                          ],
                          "additionalProperties": false
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "parts"
                ],
                "additionalProperties": false,
                "behavior": [
                  "llm-content"
                ]
              }
            }
          }
        },
        "raw": true
      },
      "metadata": {
        "title": "Substitute Parameters",
        "description": "Performing parameter substitution, if needed."
      }
    }
  ],
  "graphs": {
    "subgraph-0": {
      "title": "Content Describer",
      "description": "A custom describer for the Content component",
      "version": "0.1.0",
      "edges": [
        {
          "from": "input-0",
          "to": "runJavascript-0",
          "out": "*",
          "in": ""
        },
        {
          "from": "runJavascript-0",
          "to": "output-0",
          "out": "inputSchema",
          "in": "inputSchema"
        },
        {
          "from": "runJavascript-0",
          "to": "output-0",
          "out": "outputSchema",
          "in": "outputSchema"
        }
      ],
      "nodes": [
        {
          "id": "input-0",
          "type": "input",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": {
                "type": "object",
                "properties": {},
                "required": [],
                "additionalProperties": true
              }
            }
          }
        },
        {
          "id": "output-0",
          "type": "output",
          "configuration": {
            "schema": {
              "type": "object",
              "properties": {
                "inputSchema": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": true
                },
                "outputSchema": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": true
                }
              },
              "required": [
                "inputSchema",
                "outputSchema"
              ]
            }
          }
        },
        {
          "id": "runJavascript-0",
          "type": "runJavascript",
          "configuration": {
            "code": "const run = function describeContent(inputs){const{template}=inputs;const params=unique([...collectParams(textFromLLMContent(template))]);const props=Object.fromEntries(params.map(param=>[toId(param),{title:toTitle(param),description:`The value to substitute for the parameter \"${param}\"`,type:\"string\"}]));const $inputSchema={properties:{context:{type:\"array\",title:\"Context in\",examples:[],items:{type:\"object\",behavior:[\"llm-content\"]},default:'[{\"role\":\"user\",\"parts\":[{\"text\":\"\"}]}]',description:\"The optional incoming conversation context\"},template:{type:\"object\",title:\"Template\",examples:[],behavior:[\"llm-content\",\"config\"],default:\"null\",description:\"(Optional) Content that will initialize a new conversation contenxt or be appended to the existing one. Use mustache-style {{params}} to add parameters.\"}},type:\"object\",required:[]};const $outputSchema={type:\"object\",properties:{context:{type:\"array\",title:\"Context out\",examples:[],items:{type:\"object\",behavior:[\"llm-content\"]},description:\"The resulting context, created from the template and parameters.\"}},required:[]};const required=params.map(toId);return mergeSchemas($inputSchema,$outputSchema,props);function mergeSchemas(inputSchema,outputSchema,properties){return{inputSchema:{...inputSchema,properties:{...inputSchema.properties,...properties},required:[...inputSchema.required||[],...required]},outputSchema}}__name(mergeSchemas,\"mergeSchemas\");function toId(param){return`p-${param}`}__name(toId,\"toId\");function toTitle(id){const spaced=id?.replace(/[_-]/g,\" \");return(spaced?.at(0)?.toUpperCase()??\"\")+(spaced?.slice(1)?.toLowerCase()??\"\")}__name(toTitle,\"toTitle\");function textFromLLMContent(content2){return content2?.parts.map(item=>{return\"text\"in item?item.text:\"\"}).join(\"\\n\")||\"\"}__name(textFromLLMContent,\"textFromLLMContent\");function unique(params2){return Array.from(new Set(params2))}__name(unique,\"unique\");function collectParams(text){if(!text)return[];const matches=text.matchAll(/{{\\s*(?<name>[\\w-]+)(?:\\s*\\|\\s*(?<op>[\\w-]*)(?::\\s*\"(?<arg>[\\w-]+)\")?)?\\s*}}/g);return Array.from(matches).map(match=>match.groups?.name||\"\")}__name(collectParams,\"collectParams\")};",
            "inputSchema": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "object",
                "properties": {},
                "required": [],
                "additionalProperties": true
              }
            },
            "name": "run",
            "outputSchema": {
              "type": "object",
              "properties": {
                "inputSchema": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": true
                },
                "outputSchema": {
                  "type": "object",
                  "properties": {},
                  "required": [],
                  "additionalProperties": true
                }
              }
            },
            "raw": true
          },
          "metadata": {
            "title": "Describe",
            "description": "Describes the content"
          }
        }
      ]
    }
  }
}