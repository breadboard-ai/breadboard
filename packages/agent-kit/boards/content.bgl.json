{
  "title": "Content",
  "description": "Use it as a way to initialize or add to conversation context, optionally applying extra arguments with mustache-style {{placeholders}}.",
  "version": "0.0.1",
  "nodes": [
    {
      "type": "input",
      "id": "input",
      "configuration": {
        "schema": {
          "properties": {},
          "type": "object",
          "required": []
        }
      },
      "metadata": {
        "visual": {
          "x": -77.00000000000003,
          "y": -120,
          "collapsed": false
        },
        "tags": [
          {
            "type": "start",
            "label": "default"
          }
        ]
      }
    },
    {
      "type": "output",
      "id": "output",
      "configuration": {
        "schema": {
          "properties": {
            "prompt": {
              "type": "string",
              "title": "Prompt",
              "examples": [],
              "format": "multiline"
            }
          },
          "type": "object",
          "required": []
        }
      },
      "metadata": {
        "visual": {
          "x": 259.00000000000017,
          "y": -119,
          "collapsed": false
        }
      }
    },
    {
      "id": "runJavascript-2655506c",
      "type": "runJavascript",
      "metadata": {
        "visual": {
          "x": 44,
          "y": -120,
          "collapsed": false
        },
        "title": "Substitute Placeholders",
        "logLevel": "debug"
      },
      "configuration": {
        "code": "function run({template, context, ... inputs}) {\n  const toId = (param) => `p-${param}`;\n  const toName = (id) => id.slice(2);\n\n  const stringify = (value) => {\n    if (typeof value === \"string\") return value;\n    if (value === undefined) return \"undefined\";\n    return JSON.stringify(value, null, 2);\n  };\n  \n  const substitute = (template, values) => {\n    return Object.entries(values).reduce(\n      (acc, [key, value]) => acc.replace(`{{${key}}}`, stringify(value)),\n      template\n    );\n  };\n  \n  const parametersFromTemplate = (template) => {\n    if (!template) return [];\n    const matches = template.matchAll(/{{(?<name>[\\w-]+)}}/g);\n    const parameters = Array.from(matches).map(\n      (match) => match.groups?.name || \"\"\n    );\n    const unique = Array.from(new Set(parameters));\n    return unique;\n  };\n  \n  const parameters = parametersFromTemplate(template);\n  if (!parameters.length) {\n    return createLLMContentArray(template);\n  }\n\n  const substitutes = parameters.reduce((acc, parameter) => {\n    if (inputs[toId(parameter)] === undefined)\n      throw new Error(`Input is missing parameter \"${parameter}\"`);\n    return { ...acc, [parameter]: inputs[toId(parameter)] };\n  }, {});\n\n  const prompt = substitute(template, substitutes);\n  return createLLMContentArray(prompt);\n\n  function createLLMContentArray(text = '') {\n    let prepend = context || [];\n    if (prepend.length === 1 && prepend.at(0).parts.at(0)?.text?.length === 0) {\n      prepend = [];\n    }\n    return [ ... prepend, { parts: [{ text }], role: \"user\" }]\n  }\n}",
        "name": "run",
        "raw": false
      }
    },
    {
      "id": "input-58c1588f",
      "type": "input",
      "metadata": {
        "visual": {
          "x": -103.00000000000003,
          "y": 74.00000000000011,
          "collapsed": false
        },
        "tags": [
          {
            "type": "start",
            "label": "describe"
          }
        ],
        "title": "Describe",
        "logLevel": "debug"
      },
      "configuration": {
        "schema": {
          "properties": {},
          "type": "object",
          "required": []
        }
      }
    },
    {
      "id": "runJavascript-4e04e982",
      "type": "runJavascript",
      "metadata": {
        "visual": {
          "x": 31.000000000000014,
          "y": 71.00000000000011,
          "collapsed": false
        },
        "title": "Schema from Inputs",
        "logLevel": "debug"
      },
      "configuration": {
        "outputSchema": {
          "properties": {
            "outputSchema": {
              "type": "object",
              "title": "Output Schema",
              "examples": []
            },
            "inputSchema": {
              "type": "object",
              "title": "Input Schema",
              "examples": []
            }
          },
          "type": "object",
          "required": []
        },
        "code": "function run({ template }) {\n  const toId = (param) => `p-${param}`;\n  const parametersFromTemplate = (template) => {\n    if (!template) return [];\n    const matches = template.matchAll(/{{(?<name>[\\w-]+)}}/g);\n    const parameters = Array.from(matches).map(\n      (match) => match.groups?.name || \"\"\n    );\n    const unique = Array.from(new Set(parameters));\n    return unique;\n  };\n\n  const parameters = parametersFromTemplate(template);\n\n  const required = parameters.map(toId);\n\n  const inputSchema = {\n    type: \"object\",\n    properties: {\n      ...Object.fromEntries(\n        parameters.map((parameter) => [\n          toId(parameter),\n          {\n            title: toTitle(parameter),\n            description: `The value to substitute for the parameter \"${parameter}\"`,\n            type: \"string\",\n          },\n        ])\n      ),\n      context: asLLMContentArray(\n        \"Context In\",\n        \"The optional incoming conversation context\",\n        true\n      ),\n      template: {\n        title: \"Text\",\n        description: \"(Optional) The text that will initialize or be added to existing conversation context. Use mustache-style {{params}} to add variables.\",\n        type: \"string\",\n        format: \"multiline\",\n        behavior: [\"config\"]\n      },\n    },\n    required,\n  };\n\n  const outputSchema = {\n    type: \"object\",\n    properties: {\n      prompt: asLLMContentArray(\n        \"Context Out\",\n        \"The resulting context, created from the template and parameters\",\n      )\n    },\n  };\n\n  return {\n    inputSchema,\n    outputSchema,\n  };\n\n  function toTitle(id) {\n    return (id?.at(0)?.toUpperCase() ?? '') + (id?.slice(1)?.toLowerCase() ?? '');\n  }\n\n  function asLLMContentArray(title, description, setDefault) {\n    return {\n      type: \"array\",\n      items: {\n        type: \"object\",\n        behavior: [\"llm-content\"]\n      },\n      title,\n      description,\n      ... (setDefault ? {} : { default: \"{\\\"role\\\":\\\"user\\\",\\\"parts\\\":[{\\\"text\\\":\\\"\\\"}]}\"})\n    }\n  }\n}\n",
        "name": "run",
        "raw": true
      }
    },
    {
      "id": "output-acc3ef03",
      "type": "output",
      "metadata": {
        "visual": {
          "x": 262.0000000000001,
          "y": 72,
          "collapsed": false
        },
        "title": "Schemas",
        "logLevel": "debug"
      },
      "configuration": {
        "schema": {
          "properties": {
            "inputSchema": {
              "type": "object",
              "title": "Input Schema",
              "examples": []
            },
            "outputSchema": {
              "type": "object",
              "title": "Output Schema",
              "examples": []
            }
          },
          "type": "object",
          "required": []
        }
      }
    }
  ],
  "edges": [
    {
      "from": "input",
      "to": "runJavascript-2655506c",
      "out": "*",
      "in": ""
    },
    {
      "from": "input-58c1588f",
      "to": "runJavascript-4e04e982",
      "out": "*",
      "in": ""
    },
    {
      "from": "runJavascript-4e04e982",
      "to": "output-acc3ef03",
      "out": "inputSchema",
      "in": "inputSchema"
    },
    {
      "from": "runJavascript-4e04e982",
      "to": "output-acc3ef03",
      "out": "outputSchema",
      "in": "outputSchema"
    },
    {
      "from": "runJavascript-2655506c",
      "to": "output",
      "out": "result",
      "in": "prompt"
    }
  ],
  "metadata": {
    "comments": [],
    "tags": []
  }
}