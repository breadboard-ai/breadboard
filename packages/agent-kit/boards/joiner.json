{
  "title": "Joiner",
  "description": "Joins two or more worker contexts into one. Great for combining results of multiple workers.",
  "$schema": "https://raw.githubusercontent.com/breadboard-ai/breadboard/@google-labs/breadboard-schema@1.4.1/packages/schema/breadboard.schema.json",
  "version": "0.0.1",
  "edges": [
    {
      "from": "fn-4",
      "to": "output-5",
      "out": "context",
      "in": "context"
    },
    {
      "from": "input-3",
      "to": "fn-4",
      "out": "*",
      "in": ""
    },
    {
      "from": "input-1",
      "to": "fn-4",
      "out": "merge",
      "in": "merge"
    }
  ],
  "nodes": [
    {
      "id": "output-5",
      "type": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "context": {
              "type": "array",
              "items": {
                "type": "object",
                "behavior": [
                  "llm-content"
                ]
              },
              "title": "context"
            }
          }
        }
      },
      "metadata": {
        "title": "Output",
        "description": "Returning combined values"
      }
    },
    {
      "id": "fn-4",
      "type": "runJavascript",
      "configuration": {
        "code": "const fn_4 = ({ merge, ...inputs }) => {\n  const entries = Object.entries(inputs).sort();\n  if (merge) {\n    const context = [];\n    const parts = [];\n    for (const [, input] of entries) {\n      const c = asContextArray(input);\n      let lastIndex = c.length - 1;\n      let last;\n      do {\n        last = c[lastIndex--];\n      } while (lastIndex >= 0 && last.role === \"$metadata\");\n      if (last) {\n        parts.push(...last.parts);\n      }\n    }\n    context.push({ parts });\n    return { context };\n  } else {\n    let mode;\n    const [f, ...rest] = entries;\n    if (!f) {\n      return { context: [] };\n    }\n    const first = asContextArray(f[1]);\n    const firstOpenSplits = scanForSplits(first);\n    const preambleIndices = [];\n    for (const [, input] of rest) {\n      const c = asContextArray(input);\n      const hasOpenSplits = scanForSplits(c);\n      if (hasOpenSplits) {\n        preambleIndices.push(hasOpenSplits[1]);\n      }\n    }\n    if (!firstOpenSplits) {\n      if (preambleIndices.length === 0) {\n        mode = \"simple\";\n      } else {\n        mode = \"adhoc\";\n      }\n    } else {\n      const preamblesMatch = preambleIndices.length > 0 && preambleIndices.every((value) => value === firstOpenSplits[1]);\n      if (preamblesMatch) {\n        mode = \"preamble\";\n      } else {\n        if (firstOpenSplits[1] === first.length - 1) {\n          mode = \"single\";\n        } else {\n          mode = \"adhoc\";\n        }\n      }\n    }\n    const context = [];\n    if (mode === \"adhoc\") {\n      for (const [, input] of entries) {\n        const c = asContextArray(input);\n        context.push(...c);\n      }\n      return { context };\n    } else if (mode === \"simple\") {\n      const splitId = Math.random().toString(36).substring(7);\n      context.push({\n        role: \"$metadata\",\n        type: \"split\",\n        data: { type: \"start\", id: splitId }\n      });\n      for (const [, input] of entries) {\n        const c = asContextArray(input);\n        context.push(...c);\n        context.push({\n          role: \"$metadata\",\n          type: \"split\",\n          data: { type: \"next\", id: splitId }\n        });\n      }\n    } else if (mode === \"preamble\") {\n      const preambleIndex = firstOpenSplits?.[1] || 0;\n      const preamble = entries[0][1].slice(0, preambleIndex + 1);\n      context.push(...preamble);\n      const splitId = preamble[preamble.length - 1].data.id;\n      for (const [, input] of entries) {\n        let c = asContextArray(input);\n        if (preambleIndex >= 0) {\n          c = c.slice(preambleIndex + 1);\n        }\n        if (c.length) {\n          context.push(...c);\n          context.push({\n            role: \"$metadata\",\n            type: \"split\",\n            data: { type: \"next\", id: splitId }\n          });\n        }\n      }\n    } else if (mode === \"single\") {\n      const splitId = first[first.length - 1].data.id;\n      context.push(...first);\n      for (const [, input] of rest) {\n        const c = asContextArray(input);\n        context.push(...c);\n        context.push({\n          role: \"$metadata\",\n          type: \"split\",\n          data: { type: \"next\", id: splitId }\n        });\n      }\n    }\n    const last = context[context.length - 1];\n    last.data.type = \"end\";\n    return { context };\n  }\n  function asContextArray(input) {\n    return Array.isArray(input) ? input : [input];\n  }\n  function scanForSplits(c) {\n    const stack = [];\n    for (const [i, item] of c.entries()) {\n      if (item.role !== \"$metadata\") continue;\n      if (item.type !== \"split\") continue;\n      if (item.data.type === \"start\") {\n        stack.push([item.data.id, i]);\n      }\n      if (item.data.type === \"end\") {\n        const [id] = stack.pop() || [];\n        if (id !== item.data.id) {\n          console.warn(\n            \"Split integrity error: mismatched split start/end markers. Start:\",\n            id,\n            \"End:\",\n            item.data.id\n          );\n          return null;\n        }\n      }\n    }\n    return stack.pop() || null;\n  }\n};",
        "name": "fn_4",
        "raw": true
      },
      "metadata": {
        "title": "Combine Context",
        "description": "Combining context into one"
      }
    },
    {
      "id": "input-3",
      "type": "input",
      "configuration": {},
      "metadata": {
        "title": "Input",
        "description": "Getting all the data"
      }
    },
    {
      "id": "input-1",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "merge": {
              "type": "boolean",
              "behavior": [
                "config"
              ],
              "title": "Merge Contexts",
              "default": "false",
              "description": "Merge the last items of all incoming conversation into one."
            }
          },
          "required": []
        }
      }
    }
  ],
  "kits": [],
  "graphs": {}
}