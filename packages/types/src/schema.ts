/**
 * @license
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

export type BehaviorSchema =
  /**
   * This port is deprecated and is only there because there might be graphs
   * that still use it. Don't show it in the UI unless there are existing
   * incoming wires.
   */
  | "deprecated"
  /**
   * Indicates that this particular input port value should not be cached by
   * the input bubbling machinery.
   * Use this when you'd like to continually ask the user for the same input,
   * rather that re-using cached answer (default behavior).
   */
  | "transient"
  /**
   * Indicates that the output node should bubble up to the invoking runner,
   * if any.
   * This is useful for sending outputs to the user from inside of the nested
   * graphs.
   */
  | "bubble"
  /**
   * Indicates that the input our output port is a `BoardCapability`.
   * @see [BoardCapability]
   */
  | "board"
  /**
   * Indicates that the input or output port is a `StreamCapability`.
   * @see [StreamCapability]
   */
  | "stream"
  /**
   * Indicates that the input or output port is an `ErrorCapability`.
   * @see [ErrorCapability]
   */
  | "error"
  /**
   * Indicates that the input port is usually configured, rather than wired in.
   */
  | "config"
  /**
   * In combination with "config", hints that the port value should be shown
   * (as a preview) when viewing the component in the context of the graph
   * or any other larger context.
   */
  | "hint-preview"
  /**
   * In combination with "config" and "reactive", hints that the port controls
   * the rest of the configuration and may be used as the first to be
   * displayed in the UI.
   */
  | "hint-controller"
  /**
   * In combination with "config", Indicates that this port is part of the
   * advanced configuration.
   */
  | "hint-advanced"
  /**
   * Hints that the node is in a chat mode: it interacts with the user
   * as part of its invocation.
   * When applied to a port, hints that this port participates in user
   * interaction.
   */
  | "hint-chat-mode"
  /**
   * Hints that the text is short (e.g. a query) and needs a single line treatment.
   */
  | "hint-single-line"
  /**
   * Indicates that the input or output port represents an image. The image can
   * be a URL or a base64 encoded image.
   * For output ports, hints at the output type of image
   */
  | "hint-image"
  /**
   * Indicates that the input or output represents some sort of code.
   * For output ports, hints at the output type of code.
   */
  | "hint-code"
  /**
   * Hints that the port represents the text of some sort
   * (though the actual type could be LLMContent or JSON)
   */
  | "hint-text"
  /**
   * Hints that the port represents the audio
   */
  | "hint-audio"
  /**
   * Hints that the port represents a multimodal value (could be text, image,
   * etc.)
   */
  | "hint-multimodal"
  /**
   * Indicates that the input or output port represents base structured
   * datatype containing multi-part content of a message, generated by an LLM.
   * See [Content](https://ai.google.dev/api/rest/v1beta/Content) for details
   * on the datatype.
   */
  | "llm-content"
  /**
   * Indicates that the input or output port represents a JSON schema.
   */
  | "json-schema"
  /**
   * Indicates that the input or output port represents a JSON schema that
   * describes an input or output port.
   */
  | "ports-spec"
  /**
   * Indicates that the string is a Google Drive Query. See
   * https://developers.google.com/drive/api/guides/search-files.
   */
  | "google-drive-query"
  /**
   * Indicates that the string is a Google Drive File ID.
   * https://developers.google.com/drive/api/guides/about-files#characteristics
   */
  | "google-drive-file-id"
  /**
   * Indicates that the string is a Module.
   */
  | "module"
  /**
   * Indicates that this is a side wire
   * See https://github.com/breadboard-ai/breadboard/issues/3788#issuecomment-2477813443
   */
  | "side"
  /**
   * When a port is marked with it, indicates that this port is the main
   * input or output port, so that UI can treat it differently, like hoist
   * it into a header.
   */
  | "main-port"
  /**
   * Indicates that this entire node supports "@"-wiring, where the wires
   * are automatically created and allocated using a pre-defined scheme.
   */
  | "at-wireable"
  /**
   * Indicates that when the value of this port changes, the entire input
   * and/or output schema of the node may change as well, and a describer must
   * be invoked again to get the new schema.
   */
  | "reactive";

export type SchemaEnumValue =
  | string
  | {
      id: string;
      title?: string;
      description?: string;
      icon?: string;
      /**
       * A brief message that can be presented to the user.
       * Currently used to provide proactive quota notification.
       */
      info?: string;
    };

export type Schema = {
  title?: string;
  description?: string;
  type?: string | string[];
  properties?: Record<string, Schema>;
  required?: string[];
  format?: string;
  /**
   * Can be used to provide additional hints to the UI or to other parts of
   * the system about behavior of this particular input/output or input/output
   * port.
   */
  behavior?: BehaviorSchema[];
  /**
   * If present, allows specifying an icon for the property. This icon will
   * be used when rendering the property in an editor.
   */
  icon?: string;
  transient?: boolean;
  enum?: SchemaEnumValue[];
  /**
   * The default value of the schema. The UI can use this to pre-populate a
   * field with a value, if there is no `examples` present.
   */
  default?: string;
  additionalProperties?: boolean | Schema;
  items?: Schema | Schema[];
  minItems?: number;
  /**
   * Can be used by UI to pre-populate a field with a value that could be
   * used as an example.
   */
  examples?: string[];
};
