/**
 * @license
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { LitElement, html, css, svg } from "lit";
import { customElement, property, query } from "lit/decorators.js";
import { guard } from "lit/directives/guard.js";
import { Animator } from "./helpers/animator.js";
import * as Easing from "./helpers/ease.js";

const shapes = new Map([
  [
    "shape-1",
    `M141.185 49.2994C145.59 42.3013 155.925 42.3012 160.331 49.2994L170.891 66.0741C173.788 70.675 179.631 72.5455 184.719 70.5007L203.271 63.0452C211.01 59.9349 219.371 65.9198 218.76 74.1327L217.296 93.8193C216.894 99.2188 220.506 104.116 225.842 105.408L245.299 110.12C253.415 112.085 256.609 121.769 251.215 128.06L238.285 143.139C234.739 147.274 234.739 153.327 238.285 157.463L251.215 172.542C256.609 178.833 253.415 188.516 245.299 190.482L225.842 195.193C220.506 196.486 216.894 201.383 217.296 206.782L218.76 226.469C219.371 234.682 211.01 240.667 203.271 237.556L184.719 230.101C179.631 228.056 173.788 229.927 170.891 234.527L160.331 251.302C155.925 258.3 145.59 258.3 141.185 251.302L130.624 234.527C127.728 229.927 121.885 228.056 116.796 230.101L98.2449 237.556C90.5056 240.667 82.1445 234.682 82.7553 226.469L84.2196 206.782C84.6212 201.383 81.0099 196.486 75.6735 195.193L56.2171 190.482C48.1002 188.516 44.9066 178.833 50.3006 172.542L63.2303 157.463C66.7765 153.327 66.7765 147.274 63.2303 143.139L50.3006 128.06C44.9066 121.769 48.1002 112.085 56.2171 110.12L75.6735 105.408C81.0099 104.116 84.6212 99.2188 84.2196 93.8193L82.7553 74.1327C82.1445 65.9198 90.5056 59.9349 98.2449 63.0452L116.796 70.5007C121.885 72.5455 127.728 70.675 130.624 66.0741L141.185 49.2994Z`,
  ],
  [
    "shape-2",
    `M117.309 62.4092C127.675 54.8572 132.858 51.0812 138.395 49.2079C146.405 46.4984 155.111 46.4984 163.121 49.2079C168.658 51.0812 173.841 54.8572 184.207 62.4092L206.879 78.9266L229.539 94.4033C240.289 101.746 245.663 105.417 249.257 110.034C254.454 116.712 257.184 124.92 256.999 133.316C256.871 139.12 254.735 145.187 250.461 157.321L241.564 182.587L233.351 208.476C229.497 220.625 227.57 226.7 224.201 231.426C219.328 238.261 212.245 243.288 204.096 245.697C198.462 247.363 191.968 247.266 178.979 247.072L150.758 246.652L122.536 247.072C109.548 247.266 103.053 247.363 97.4196 245.697C89.2706 243.288 82.188 238.261 77.3146 231.426C73.9455 226.7 72.0184 220.625 68.1643 208.476L59.9516 182.587L51.0541 157.321C46.781 145.187 44.6445 139.12 44.5166 133.316C44.3317 124.92 47.0613 116.712 52.2589 110.034C55.8522 105.417 61.2271 101.746 71.9769 94.4033L94.6365 78.9266L117.309 62.4092Z`,
  ],
  [
    "shape-3",
    `M106.918 80.1574C138.394 48.6819 189.426 48.6819 220.901 80.1574C252.377 111.633 252.377 162.665 220.901 194.14L194.597 220.444C163.122 251.92 112.09 251.92 80.6145 220.444C49.1389 188.969 49.1389 137.937 80.6145 106.461L106.918 80.1574Z`,
  ],
  [
    "shape-4",
    `M208.168 69.8242C214.777 70.2734 218.081 70.4979 220.752 71.666C224.617 73.3562 227.702 76.4415 229.393 80.3063C230.561 82.9772 230.785 86.2817 231.234 92.8906L232.259 107.973C232.441 110.646 232.532 111.982 232.822 113.259C233.242 115.103 233.971 116.864 234.979 118.465C235.676 119.573 236.557 120.583 238.319 122.601L248.258 133.99C252.614 138.981 254.792 141.477 255.855 144.191C257.392 148.119 257.392 152.482 255.855 156.41C254.792 159.125 252.614 161.62 248.258 166.611L238.319 178C236.557 180.019 235.676 181.028 234.979 182.136C233.971 183.738 233.242 185.498 232.822 187.343C232.532 188.62 232.441 189.956 232.259 192.629L231.234 207.711C230.785 214.32 230.561 217.624 229.393 220.295C227.702 224.16 224.617 227.245 220.752 228.936C218.081 230.104 214.777 230.328 208.168 230.777L193.086 231.802C190.413 231.984 189.077 232.075 187.8 232.365C185.955 232.785 184.195 233.514 182.593 234.522C181.485 235.219 180.476 236.1 178.457 237.862L167.068 247.801C162.077 252.157 159.582 254.335 156.867 255.398C152.939 256.935 148.576 256.935 144.648 255.398C141.934 254.335 139.438 252.157 134.447 247.801L123.058 237.862C121.04 236.1 120.03 235.219 118.922 234.522C117.321 233.514 115.56 232.785 113.716 232.365C112.439 232.075 111.103 231.984 108.43 231.802L93.3477 230.777C86.7387 230.328 83.4342 230.104 80.7633 228.936C76.8985 227.245 73.8132 224.16 72.123 220.295C70.9549 217.624 70.7304 214.32 70.2813 207.711L69.2564 192.629C69.0747 189.956 68.9839 188.62 68.6933 187.343C68.2735 185.498 67.5443 183.738 66.5368 182.136C65.8395 181.028 64.9586 180.019 63.197 178L53.2572 166.611C48.9015 161.62 46.7237 159.125 45.661 156.41C44.1234 152.482 44.1234 148.119 45.661 144.191C46.7237 141.477 48.9015 138.981 53.2572 133.99L63.197 122.601C64.9586 120.583 65.8395 119.573 66.5368 118.465C67.5443 116.864 68.2735 115.103 68.6933 113.259C68.9839 111.982 69.0747 110.646 69.2564 107.973L70.2813 92.8906C70.7304 86.2817 70.9549 82.9772 72.123 80.3063C73.8132 76.4415 76.8986 73.3562 80.7633 71.666C83.4342 70.4979 86.7387 70.2734 93.3477 69.8242L108.43 68.7994C111.103 68.6177 112.439 68.5269 113.716 68.2363C115.56 67.8165 117.321 67.0873 118.922 66.0797C120.03 65.3824 121.04 64.5016 123.058 62.74L134.447 52.8002C139.438 48.4445 141.934 46.2667 144.648 45.204C148.576 43.6664 152.939 43.6664 156.867 45.204C159.582 46.2667 162.077 48.4445 167.068 52.8002L178.457 62.74C180.476 64.5016 181.485 65.3824 182.593 66.0797C184.195 67.0873 185.955 67.8165 187.8 68.2363C189.077 68.5269 190.413 68.6177 193.086 68.7994L208.168 69.8242Z`,
  ],
  [
    "shape-5",
    `M174.964 66.6801C212.553 50.3547 250.704 88.5059 234.378 126.095L231.679 132.31C226.695 143.786 226.695 156.816 231.679 168.292L234.378 174.507C250.704 212.096 212.553 250.247 174.964 233.921L168.749 231.222C157.273 226.238 144.243 226.238 132.767 231.222L126.552 233.921C88.9629 250.247 50.8117 212.096 67.1372 174.507L69.8364 168.292C74.8207 156.816 74.8206 143.786 69.8364 132.31L67.1372 126.095C50.8117 88.5059 88.9629 50.3547 126.552 66.6801L132.767 69.3794C144.243 74.3636 157.273 74.3636 168.749 69.3793L174.964 66.6801Z`,
  ],
  [
    "shape-6",
    `M200.818 200.818C157.316 244.321 99.2978 256.835 71.2317 228.768C43.1655 200.702 55.6792 142.684 99.1817 99.1817C142.684 55.6792 200.702 43.1655 228.768 71.2317C256.835 99.2978 244.321 157.316 200.818 200.818Z`,
  ],
  [
    "shape-7",
    `M127.69 54.0732C128.835 53.1381 129.408 52.6705 129.931 52.2757C142.251 42.9755 159.265 42.9755 171.585 52.2757C172.108 52.6705 172.68 53.1381 173.826 54.0732C174.337 54.4906 174.593 54.6994 174.846 54.8981C180.644 59.4534 187.752 62.0348 195.129 62.2636C195.45 62.2736 195.781 62.2777 196.441 62.2859C197.921 62.3042 198.661 62.3134 199.316 62.3464C214.746 63.1232 227.779 74.0345 231.225 89.0601C231.371 89.6979 231.509 90.4234 231.784 91.8745C231.907 92.5222 231.968 92.8461 232.034 93.1605C233.541 100.368 237.323 106.905 242.826 111.811C243.066 112.025 243.317 112.24 243.817 112.67C244.939 113.633 245.5 114.115 245.981 114.56C257.3 125.05 260.254 141.767 253.214 155.488C252.915 156.07 252.553 156.714 251.829 158.002C251.506 158.577 251.344 158.865 251.192 159.148C247.702 165.635 246.389 173.068 247.444 180.356C247.49 180.674 247.543 180.999 247.65 181.65C247.889 183.107 248.008 183.836 248.089 184.485C250.002 199.78 241.495 214.481 227.262 220.476C226.658 220.731 225.966 220.992 224.581 221.514C223.963 221.747 223.654 221.864 223.356 221.983C216.503 224.715 210.708 229.567 206.821 235.826C206.651 236.099 206.483 236.382 206.145 236.949C205.389 238.219 205.011 238.853 204.655 239.403C196.266 252.346 180.279 258.152 165.514 253.617C164.887 253.424 164.188 253.18 162.791 252.693C162.168 252.475 161.856 252.366 161.55 252.266C154.54 249.964 146.975 249.964 139.966 252.266C139.66 252.366 139.348 252.475 138.724 252.693C137.327 253.18 136.629 253.424 136.002 253.617C121.237 258.152 105.249 252.346 96.8604 239.403C96.5043 238.853 96.1263 238.219 95.3704 236.949C95.0329 236.382 94.8642 236.099 94.6947 235.826C90.808 229.567 85.013 224.715 78.1601 221.983C77.8612 221.864 77.5522 221.747 76.9341 221.514C75.5496 220.992 74.8574 220.731 74.2533 220.476C60.0207 214.481 51.5139 199.78 53.4264 184.485C53.5076 183.836 53.6271 183.107 53.8659 181.65C53.9726 180.999 54.0259 180.674 54.0719 180.356C55.127 173.068 53.8133 165.635 50.3238 159.148C50.1716 158.865 50.01 158.577 49.6868 158.002C48.9627 156.714 48.6006 156.07 48.3018 155.488C41.2614 141.767 44.2157 125.05 55.5349 114.56C56.0153 114.115 56.5763 113.633 57.6983 112.67C58.1991 112.24 58.4495 112.025 58.6896 111.811C64.1927 106.905 67.9751 100.368 69.4817 93.1605C69.5475 92.8461 69.6089 92.5222 69.7317 91.8745C70.0068 90.4234 70.1444 89.6979 70.2906 89.0601C73.7367 74.0345 86.7698 63.1232 102.199 62.3464C102.854 62.3134 103.594 62.3042 105.074 62.2859C105.735 62.2777 106.065 62.2736 106.387 62.2636C113.763 62.0348 120.872 59.4534 126.67 54.8981C126.923 54.6994 127.178 54.4906 127.69 54.0732Z`,
  ],
]);

@customElement("bb-shape-morph")
export class ShapeMorph extends LitElement {
  @property()
  accessor width = 240;

  @property()
  accessor height = 240;

  @query("#target")
  accessor target: SVGPathElement | null = null;

  static styles = css`
    :host {
      display: block;
      aspect-ratio: 1;
    }

    svg {
      width: 100%;
      height: 100%;
      aspect-ratio: 1;
      animation: rotate 10s linear infinite;
    }

    #target {
      will-change: transform;
      fill: var(--p-30, #ccc);
    }

    @keyframes rotate {
      from {
        rotate: 0deg;
      }

      to {
        rotate: 360deg;
      }
    }
  `;

  #shapes = [...shapes];
  #idx = 6;
  #rotation = 0;
  #animator = new Animator({ id: this.id });
  #visible = false;
  #intersectionObserver = new IntersectionObserver((entries) => {
    const [entry] = entries;
    this.#visible = entry.isIntersecting;

    if (entry.isIntersecting) {
      this.#resumeAnimation();
    } else {
      this.#pauseAnimation();
    }
  });

  constructor() {
    super();

    this.id = globalThis.crypto.randomUUID();
    this.#animator.preload(shapes);
    this.#animator.ready.then(() => {
      this.#createAnimation();
    });
  }

  connectedCallback(): void {
    super.connectedCallback();

    this.#intersectionObserver.observe(this);
  }

  disconnectedCallback(): void {
    super.disconnectedCallback();

    this.#intersectionObserver.disconnect();
  }

  #pauseAnimation() {
    if (!this.#animator) {
      return;
    }

    console.log("[Suspend Animation]", this.id);
    this.#animator.pause();
  }

  #resumeAnimation() {
    if (!this.#animator) {
      return;
    }

    console.log("[Resume Animation]", this.id);
    this.#animator.resume();
  }

  #animationTimeout = 0;
  async #createAnimation() {
    if (!this.target) {
      return;
    }

    const from = this.#shapes[this.#idx];
    const fromRotation = this.#rotation * 90;

    this.#idx++;
    this.#rotation++;
    if (this.#idx >= this.#shapes.length) {
      this.#idx = 0;
    }

    const duration = 600;
    const scaleDuration = duration * 0.65;
    const to = this.#shapes[this.#idx];
    const toRotation = this.#rotation * 90;

    await this.#animator.ready;

    this.#animator
      .enqueue({
        type: "svg",
        target: this.target,
        duration,
        path: { from, to },
        rotation: { from: fromRotation, to: toRotation },
        transformOrigin: "50% 50%",
        ease: Easing.easeInOut,
      })
      .enqueue({
        type: "element",
        target: this.target,
        duration: scaleDuration,
        ease: Easing.easeIn,
        scale: { from: 1, to: 1.13 },
        transformOrigin: "50% 50%",
      })
      .enqueue({
        type: "element",
        target: this.target,
        duration: scaleDuration,
        delay: scaleDuration,
        ease: Easing.easeOut,
        scale: { from: 1.13, to: 1 },
        transformOrigin: "50% 50%",
      });

    await this.#animator;

    window.clearTimeout(this.#animationTimeout);
    this.#animationTimeout = window.setTimeout(() => {
      this.#createAnimation();
    }, 25);
  }

  render() {
    return html` ${guard(
      [],
      () => svg`<svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 300 300"
      width="300"
      height="300"
      id="output"
    ><path id="target" d=${this.#shapes[this.#idx][1]}></svg>`
    )}`;
  }
}
