{
  "title": "API Inputs for createCompletion",
  "url": "#",
  "nodes": [
    { "id": "output", "type": "output" },
    {
      "id": "input-requestBody",
      "type": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "model": {
              "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n",
              "anyOf": [
                { "type": "string" },
                {
                  "type": "string",
                  "enum": [
                    "gpt-3.5-turbo-instruct",
                    "davinci-002",
                    "babbage-002"
                  ]
                }
              ],
              "x-oaiTypeLabel": "string"
            },
            "prompt": {
              "description": "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n",
              "default": "<|endoftext|>",
              "nullable": true,
              "oneOf": [
                {
                  "type": "string",
                  "default": "",
                  "example": "This is a test."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "",
                    "example": "This is a test."
                  }
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": { "type": "integer" },
                  "example": "[1212, 318, 257, 1332, 13]"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": { "type": "integer" }
                  },
                  "example": "[[1212, 318, 257, 1332, 13]]"
                }
              ]
            },
            "best_of": {
              "type": "integer",
              "default": 1,
              "minimum": 0,
              "maximum": 20,
              "nullable": true,
              "description": "Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
            },
            "echo": {
              "type": "boolean",
              "default": false,
              "nullable": true,
              "description": "Echo back the prompt in addition to the completion\n"
            },
            "frequency_penalty": {
              "type": "number",
              "default": 0,
              "minimum": -2,
              "maximum": 2,
              "nullable": true,
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)\n"
            },
            "logit_bias": {
              "type": "object",
              "x-oaiTypeLabel": "map",
              "default": null,
              "nullable": true,
              "additionalProperties": { "type": "integer" },
              "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.\n"
            },
            "logprobs": {
              "type": "integer",
              "minimum": 0,
              "maximum": 5,
              "default": null,
              "nullable": true,
              "description": "Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5.\n"
            },
            "max_tokens": {
              "type": "integer",
              "minimum": 0,
              "default": 16,
              "example": 16,
              "nullable": true,
              "description": "The maximum number of [tokens](/tokenizer) that can be generated in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n"
            },
            "n": {
              "type": "integer",
              "minimum": 1,
              "maximum": 128,
              "default": 1,
              "example": 1,
              "nullable": true,
              "description": "How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
            },
            "presence_penalty": {
              "type": "number",
              "default": 0,
              "minimum": -2,
              "maximum": 2,
              "nullable": true,
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)\n"
            },
            "seed": {
              "type": "integer",
              "minimum": -9223372036854776000,
              "maximum": 9223372036854776000,
              "nullable": true,
              "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\n\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
            },
            "stop": {
              "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\n",
              "default": null,
              "nullable": true,
              "oneOf": [
                {
                  "type": "string",
                  "default": "<|endoftext|>",
                  "example": "\n",
                  "nullable": true
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "maxItems": 4,
                  "items": { "type": "string", "example": "[\"\\n\"]" }
                }
              ]
            },
            "stream": {
              "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
              "type": "boolean",
              "nullable": true,
              "default": false
            },
            "suffix": {
              "description": "The suffix that comes after a completion of inserted text.",
              "default": null,
              "nullable": true,
              "type": "string",
              "example": "test."
            },
            "temperature": {
              "type": "number",
              "minimum": 0,
              "maximum": 2,
              "default": 1,
              "example": 1,
              "nullable": true,
              "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n"
            },
            "top_p": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1,
              "example": 1,
              "nullable": true,
              "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
            },
            "user": {
              "type": "string",
              "example": "user-1234",
              "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n"
            }
          }
        }
      }
    },
    {
      "id": "input-secrets",
      "type": "secrets",
      "configuration": { "keys": ["OPENAI_API_KEY"] }
    }
  ],
  "edges": [
    {
      "from": "input-requestBody",
      "out": "model",
      "to": "output",
      "in": "model"
    },
    {
      "from": "input-requestBody",
      "out": "prompt",
      "to": "output",
      "in": "prompt"
    },
    {
      "from": "input-requestBody",
      "out": "best_of",
      "to": "output",
      "in": "best_of"
    },
    {
      "from": "input-requestBody",
      "out": "echo",
      "to": "output",
      "in": "echo"
    },
    {
      "from": "input-requestBody",
      "out": "frequency_penalty",
      "to": "output",
      "in": "frequency_penalty"
    },
    {
      "from": "input-requestBody",
      "out": "logit_bias",
      "to": "output",
      "in": "logit_bias"
    },
    {
      "from": "input-requestBody",
      "out": "logprobs",
      "to": "output",
      "in": "logprobs"
    },
    {
      "from": "input-requestBody",
      "out": "max_tokens",
      "to": "output",
      "in": "max_tokens"
    },
    { "from": "input-requestBody", "out": "n", "to": "output", "in": "n" },
    {
      "from": "input-requestBody",
      "out": "presence_penalty",
      "to": "output",
      "in": "presence_penalty"
    },
    {
      "from": "input-requestBody",
      "out": "seed",
      "to": "output",
      "in": "seed"
    },
    {
      "from": "input-requestBody",
      "out": "stop",
      "to": "output",
      "in": "stop"
    },
    {
      "from": "input-requestBody",
      "out": "stream",
      "to": "output",
      "in": "stream"
    },
    {
      "from": "input-requestBody",
      "out": "suffix",
      "to": "output",
      "in": "suffix"
    },
    {
      "from": "input-requestBody",
      "out": "temperature",
      "to": "output",
      "in": "temperature"
    },
    {
      "from": "input-requestBody",
      "out": "top_p",
      "to": "output",
      "in": "top_p"
    },
    {
      "from": "input-requestBody",
      "out": "user",
      "to": "output",
      "in": "user"
    },
    {
      "from": "input-secrets",
      "out": "OPENAI_API_KEY",
      "to": "output",
      "in": "OPENAI_API_KEY"
    }
  ]
}
