name: Publish NPM Package

on:
  workflow_dispatch:
    inputs:
      packageName:
        description: "Package Name (e.g., @google-labs/graph-runner)"
        required: true
        type: string
      packageDir:
        description: "Package directory relative to the root of the mono repo (e.g. packages/graph-runner)"
        required: true
        type: string
      packageVersion:
        description: "Package Version (e.g., 1.0.0)"
        required: false
        type: string
      tag:
        description: "Tag (e.g., @google-labs/graph-runner-m1, @google-labs/graph-runner/v1.0.0)"
        required: false
        type: string
      gitUser:
        description: "Git User (e.g., github-actions[bot])"
        required: false
        type: string
      gitEmail:
        description: "Git Email (e.g., github-actions[bot]@users.noreply.github.com)"
        required: false
        type: string

env:
  ALLOWED_PACKAGES: |
    (
      @google-labs/breadboard
      @google-labs/breadboard-cli
    )
  DEFAULT_GIT_NAME: "${{ github.actor }}"
  DEFAULT_GIT_EMAIL: "${{ github.actor }}@users.noreply.github.com"
  NPM_REGISTRY: https://wombat-dressing-room.appspot.com

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - run: echo "github.event.inputs.packageName ${{ github.event.inputs.packageName }}"
      - run: echo "github.event.inputs.packageDir ${{ github.event.inputs.packageDir }}"
      - run: echo "github.event.inputs.packageVersion ${{ github.event.inputs.packageVersion }}"
      - run: echo "github.event.inputs.tag ${{ github.event.inputs.tag }}"
      - run: echo "ALLOWED_PACKAGES ${ALLOWED_PACKAGES}"

      - name: Validate Package Name is in Allowed Packages
        run: |
          if [[ ! $ALLOWED_PACKAGES =~ (^|[[:space:]])${{ github.event.inputs.packageName }}($|[[:space:]]) ]]; then
            echo "Error: Package name '${{ github.event.inputs.packageName }}' is not in the list of allowed packages: $ALLOWED_PACKAGES"
            exit 1
          fi

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: ${{ env.NPM_REGISTRY }}

      - if: github.event.inputs.packageVersion != ''
        name: If input package version is not empty, validate package version
        run: |
          if [[ ! ${{ github.event.inputs.packageVersion }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid package version. Package version must be in the format of x.y.z"
            exit 1
          fi

      - if: github.event.inputs.packageVersion == ''
        name: If input package version is empty, derive package version from package.json
        working-directory: ${{ github.event.inputs.packageDir }}
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> "$GITHUB_ENV"

      - if: github.event.inputs.tag != ''
        name: Use provided tag if set
        run: echo "TAG=${{ github.event.inputs.tag }}" >> "$GITHUB_ENV"

      - if: github.event.inputs.tag == ''
        name: If tag is empty, use '{package}/v{version}'
        run: echo "TAG=${{ github.event.inputs.packageName }}/v${{ env.PACKAGE_VERSION }}" >> "$GITHUB_ENV"

      - run: echo "PACKAGE_VERSION ${{ env.PACKAGE_VERSION }}"
      - run: echo "TAG ${{ env.TAG }}"

      - name: Install Dependencies
        run: npm ci

      - name: Checking the code quality
        run: npm run lint

      - name: Checking the code formatting
        run: npm run check:format

      - name: Running tests
        run: npm run test

      - if: github.event.inputs.packageVersion != ''
        name: Set Package Version
        working-directory: ${{ github.event.inputs.packageDir }}
        run: npm version ${{ env.PACKAGE_VERSION }} --no-git-tag-version

      - if: github.event.inputs.gitUser != ''
        run: echo "GIT_USER=${{ github.event.inputs.gitUser }}" >> "$GITHUB_ENV"

      - if: github.event.inputs.gitUser == ''
        run: echo "GIT_USER=${{ env.DEFAULT_GIT_NAME }}" >> "$GITHUB_ENV"

      - if: github.event.inputs.gitEmail != ''
        run: echo "GIT_EMAIL=${{ github.event.inputs.gitEmail }}" >> "$GITHUB_ENV"

      - if: github.event.inputs.gitEmail == ''
        run: echo "GIT_EMAIL=${{ env.DEFAULT_GIT_EMAIL }}" >> "$GITHUB_ENV"

      - name: Commit and Push Changes
        run: |
          git config user.name "${{ env.GIT_USER }}"
          git config user.email "${{ env.GIT_EMAIL }}"
          git commit -am "${{ env.TAG }}" || echo "No changes to commit"

      - name: Publish to NPM
        working-directory: ${{ github.event.inputs.packageDir }}
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create and push tag
        run: |
          git tag ${{ env.TAG }}
          git push origin ${{ env.TAG }}
